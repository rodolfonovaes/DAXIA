#include "Protheus.ch"
#include "OMSA010.CH" 
#include "FWMVCDEF.CH"
#include "TBICONN.CH"
#include 'FWADAPTEREAI.CH'	//Include para rotinas de integração com EAI
#include 'FILEIO.CH'

#DEFINE MAXGETDAD 99999
#DEFINE MAXSAVERESULT 99999

Static aUltResult
Static lCenVenda	 := SuperGetMv("MV_LJCNVDA",,.F.)
Static lAmbOffLn	 := SuperGetMv("MV_LJOFFLN", Nil, .F.)	//Identifica se o ambiente esta operando em offline
Static aIntDA0		 := {}	 								//Integracao Criterium Loja
Static aoIntDA1		 := {}									//Integracao Criterium Loja
Static lCopia		 := .F.
Static oQryDA1Tb1 	 := Nil
Static oQryDA1Tb2	 := Nil
Static oQryDA1Tb3	 := Nil
Static oQryDA1Tb4	 := Nil
Static oQryDA1Gd1 	 := Nil
Static oQryDA1Gd2	 := Nil
Static __cEmpDA1	 := ""
Static aPrdAlt		 := {}	

//-------------------------------------------------------------------
/*/{Protheus.doc} OMSA010

Rotina de Manutencao da Tabela de Preco

@param xAutoCab, array, Campos da Tabela DA0
@param xAutoItens, array, Campos da Tabela DA0
@param nOpcAuto, numerico, opcao da rotina

@return nulo

@author Henry Fila
@since 01/04/2001
@version 1.0
/*/
//-------------------------------------------------------------------
Function OMSA010(xAutoCab,xAutoItens,nOpcAuto)
Local nX			:= 0

Private aRotina		:= MenuDef()
Private cCadastro	:= OemToAnsi(STR0006) //"Manutencao da Tabela de Precos"
Private lAutoOMS010	:= .F.

//Verifica se está em modo automatico.
If ValType(xAutoCab) == "A" .AND. ValType(xAutoItens) == "A"
	lAutoOMS010 := .T.
EndIf

Pergunte("OMS010",.F.)
SetKey(VK_F12,{|| Pergunte("OMS010",.T.)})

If !Empty(xAutoCab)
	If ValType(xAutoItens) <> "A"
		xAutoItens := {}
	EndIf
	INCLUI := (nOpcAuto == 3)
	FWMVCRotAuto(ModelDef(),"DA0",nOpcAuto,{{"DA0MASTER",xAutoCab},{"DA1DETAIL",xAutoItens}})
Else
	//----------------------------
	// Browse de Tabela de Preço
	//----------------------------
	BrowseDef( /*oMBrowse*/ )
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Restaura a Integridade da Rotina                                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("DA0")
dbSetOrder(1)
dbClearFilter()
SetKey(VK_F12,Nil)

aIntDA0  := {}
aoIntDA1 := {}

Return

//------------------------------------------------------------------------------
/*/{Protheus.doc} BrowseDef

Browse de Tabela de Preço

@sample	BrowseDef( oMBrowse, cFilDef, aAddFil, cVDefault )

@param		oMBrowse	, Objeto	, Browse criado pelo Widget da Area de Trabalho.

@return	oMBrowse	, Objeto	, Retorna o objeto FWMBrowse.

@author	Anderson Silva
@since		05/12/2015
@version	P12
/*/
//------------------------------------------------------------------------------
Static Function BrowseDef( oMBrowse )

Local aLegenda 	:= {}
Local aCores	:= {}
Local oTableAtt	:= Nil
Local lWidget 	:= .F.
Local nX		:= 0 
Local nC		:= 0
//Declara Objeto da Grade de Produtos
Private oGrade		:= Nil
Private oFWLegend	:= Nil

Default oMBrowse := Nil

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica as cores da MBrowse                                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Aadd(aCores,{"Dtos(DA0_DATATE) < Dtos(dDataBase).And. !Empty(Dtos(DA0_DATATE))","DISABLE"}) //inativa
Aadd(aCores,{"(Dtos(DA0_DATATE) >= Dtos(dDataBase) .Or. Empty(Dtos(DA0_DATATE))).And.DA0_ATIVO =='1'","ENABLE"})    //Ativa simples
Aadd(aCores,{"(Dtos(DA0_DATATE) >= Dtos(dDataBase) .Or. Empty(Dtos(DA0_DATATE))) .And.DA0_ATIVO =='2'","BR_LARANJA"}) //Ativa especial

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para alterar cores do Browse do Cadastro    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If ExistBlock("OM010COR")
	aCores := ExecBlock("OM010COR",.F.,.F.,aCores)
Endif

If Empty( oMBrowse )
	oMBrowse := FWMBrowse():New()
	oMBrowse:SetAlias("DA0")
Else
	lWidget := .T.
EndIf	

aLegenda := { { "RED"  	, STR0016 	},;
			{ "GREEN"	, STR0017 	},;
			{ "ORANGE"	, STR0018 	} }

For nC := 4 to Len(aCores)
	aAdd(aLegenda,{aCores[nC][2],aCores[nC][3]})
Next nC

// Painel da Legenda
oFWLegend := FWLegend():New()

For nX := 1 To Len(aLegenda)
	oFWLegend:Add( aCores[nX,1], aLegenda[nX,1], aLegenda[nX,2] )
Next nX
oFWLegend:Activate()

For nX := 1 To Len(aCores)
	oMBrowse:AddLegend( aCores[nX,1], aLegenda[nX,1],  aLegenda[nX,2] )
Next nX

If !lWidget 
	#IFDEF TOP
		
		oTableAtt := TableAttDef()
		oMBrowse:SetAttach( .T. )
		oMBrowse:SetViewsDefault( oTableAtt:aViews )
		//Se não for SIGACRM inibe a exibição do gráfico
		If nModulo <> 73
			oMBrowse:SetOpenChart( .F. )
		EndIf
	
		oMBrowse:SetTotalDefault('DA0_CODTAB','COUNT',STR0033) //'Total de Registros'
	#ENDIF
	oMBrowse:Activate()
EndIf

oFWLegend:DeActivate()

Return Nil

//------------------------------------------------------------------------------
/*/	{Protheus.doc} TableAttDef

Cria as vis?s e gr?icos.

@sample	TableAttDef()

@param		Nenhum

@return	ExpO - Objetos com as Visoes e Gr?icos.

@author	Cristiane Nishizaka
@since		28/04/2014
@version	12
/*/
//------------------------------------------------------------------------------
Static Function TableAttDef()

Local oAtivos	:= Nil // Tabelas de Pre?s Ativas
Local oInativos	:= Nil // Tabelas de Pre?s Inativas
Local oTableAtt := FWTableAtt():New()

oTableAtt:SetAlias("DA0")

// Tabelas de Prés Ativas
oAtivos := FWDSView():New()
oAtivos:SetName(STR0031) //"Tabelas de Pre?s Ativas"
oAtivos:SetID("Ativos")
oAtivos:SetOrder(1) // DA0_FILIAL+DA0_CODTAB
oAtivos:SetCollumns({"DA0_CODTAB","DA0_DESCRI","DA0_DATDE","DA0_HORADE","DA0_DATATE",;
								"DA0_HORATE","DA0_CONDPG"})
oAtivos:SetPublic( .T. )
oAtivos:AddFilter(STR0031, "DA0_ATIVO == '1'") //"Tabelas de Pre?s Ativas"

oTableAtt:AddView(oAtivos)

// Tabelas de Pre?s Inativas
oInativos := FWDSView():New()
oInativos:SetName(STR0032) //"Tabelas de Pre?s Inativas"
oInativos:SetID("Inativos")
oInativos:SetOrder(1) // DA0_FILIAL+DA0_CODTAB
oInativos:SetCollumns({"DA0_CODTAB","DA0_DESCRI","DA0_DATDE","DA0_HORADE","DA0_DATATE",;
								  "DA0_HORATE","DA0_CONDPG"})
oInativos:SetPublic( .T. )
oInativos:AddFilter(STR0032, "DA0_ATIVO == '2'") //"Tabelas de Pre?s Inativas"

oTableAtt:AddView(oInativos)

Return (oTableAtt)

/*/{Protheus.doc} ViewDef
Definicao da View da tabela de preco

@param nulo
@return objeto FWFormView

@author Vendas & CRM
@since 08/03/12
@version 1.0

/*/
Static Function ViewDef()
Local oModel	:= FWLoadModel( 'OMSA010' )	// Cria um objeto de Modelo de dados baseado no ModelDef do fonte informado
Local oStruDA0	:= FWFormStruct( 2, 'DA0' )	// Cria as estruturas a serem usadas na View
Local oStruDA1	:= FWFormStruct( 2, 'DA1' )	// Cria as estruturas a serem usadas na View
Local aUsrMemo	:= If( ExistBlock( "OM010MEM" ), ExecBlock( "OM010MEM", .F.,.F. ), {} )
Local aNoFields	:= {}
Local oView									// Interface de visualização construída
Local nLoop		:= 1
Local nI		:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ATENCAO!!!Se for PYME retira o campo DA1_REFGRD da GetDados.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If __lPyme
	aNoFields := {"DA1_CODTAB","DA1_DESTAB","DA1_REFGRD","DA1_INDLOT"}
Else
	aNoFields := {"DA1_CODTAB","DA1_DESTAB","DA1_INDLOT"}
EndIf

For nI := 1 To Len(aNoFields)
	oStruDA1:RemoveField(aNoFields[nI])
Next nI

oView := FWFormView():New()					// Cria o objeto de View
oView:SetModel( oModel )					// Define qual Modelo de dados será utilizado

If ValType( aUsrMemo ) == "A" .And. Len( aUsrMemo ) > 0
	For nLoop := 1 to Len( aUsrMemo )
		If aUsrMemo[ nLoop, 1 ] == "DA0"
			oStruDA0:RemoveField(aUsrMemo[ nLoop, 2 ])
		ElseIf aUsrMemo[ nLoop, 1 ] == "DA1"
			oStruDA1:RemoveField(aUsrMemo[ nLoop, 2 ])
		EndIf
	Next nLoop
EndIf

oView:AddField( 'VIEW_DA0', oStruDA0, 'DA0MASTER' )	// Adiciona no nosso View um controle do tipo formulário (antiga Enchoice)
oView:AddGrid(  'VIEW_DA1', oStruDA1, 'DA1DETAIL' )	// Adiciona no nosso View um controle do tipo Grid (antiga Getdados)

oView:AddIncrementField( 'VIEW_DA1', 'DA1_ITEM' )

If nModulo == 73
	oView:AddUserButton( STR0030, "",{ |oView| CRMA090( "DA0", DA0->( RECNO() ) ) },,,{ MODEL_OPERATION_VIEW,MODEL_OPERATION_UPDATE } )//Anotaçõs
EndIf

oView:CreateHorizontalBox( 'SUPERIOR'  , 25 )
oView:CreateHorizontalBox( 'INFERIOR'  , 75 )

//Retira campo de Codigo da SYP da View
If ExistBlock("OS010BTN")
	aButtonUsr := ExecBlock("OS010BTN",.F.,.F.)
	If ValType(aButtonUsr) == "A"
		For nI   := 1  To  Len(aButtonUsr)
			oView:AddUserButton( aButtonUsr[nI,3], aButtonUsr[nI,1], aButtonUsr[nI,2],NIL,NIL)
		Next nI
	EndIf
EndIf

// Adciona o botão de busca
oView:AddUserButton(STR0019,'', { || GdSeek(Nil,OemtoAnsi(STR0014),,,.T.,oModel:GetModel("DA1DETAIL")),oView:Refresh(),oView:GetSubView("DA1DETAIL"):SetFocus(),.F.} )// //"Busca" //"Busca Produto na tabela"

// Relaciona o identificador (ID) da View com o "box" para exibição
oView:SetOwnerView( 'VIEW_DA0', 'SUPERIOR' )
oView:SetOwnerView( 'VIEW_DA1', 'INFERIOR' )

Return oView

//-------------------------------------------------------------------
/*/{Protheus.doc} ModelDef

Definicao do Model

@param nulo

@return objeto ModelDef

@author Reynaldo Tetsu Miyashita
@since 03/10/2013
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function ModelDef()

// Cria as estruturas a serem usadas no Modelo de Dados
Local oStruDA0 	:= FWFormStruct( 1, 'DA0' ) // Cria as estruturas a serem usadas na View
Local oStruDA1	:= FWFormStruct( 1, 'DA1' ) // Cria as estruturas a serem usadas na View
Local oModel 								// Modelo de dados construído
Local aUsrMemo	:= If( ExistBlock( "OM010MEM" ), ExecBlock( "OM010MEM", .F.,.F. ), {} )
Local aMemoDA0	:= {}
Local aMemoDA1	:= {}
Local nLoop		:= 1
Local lGrade	:= MaGrade()
Local aAux		:= {}						// Auxiliar para criar a trigger
Local lOMS010Com := !IsInCallStack("OMS010Com")

oStruDA1:SetProperty("DA1_PRCVEN",MODEL_FIELD_OBRIGAT,.F.)

If lGrade
	oStruDA1:SetProperty("DA1_DESTAB",MODEL_FIELD_INIT,"")
	oStruDA1:SetProperty("DA1_PRCBAS",MODEL_FIELD_INIT,"")
	oStruDA1:SetProperty("DA1_DESCRI",MODEL_FIELD_INIT,"")
EndIf

// Cria o objeto do Modelo de Dados
oModel := MPFormModel():New( 'OMSA010' , /*Pre*/, {|oMdl| OMS010GetOk(oMdl)}, {|oMdl| OMS010Com(oMdl) })
// Carga por demanda devido performance
oModel:SetOnDemand()
If ValType( aUsrMemo ) == "A" .And. Len( aUsrMemo ) > 0
	For nLoop := 1 to Len( aUsrMemo )
		If aUsrMemo[ nLoop, 1 ] == "DA0"
			AAdd( aMemoDA0, { aUsrMemo[ nLoop, 2 ], aUsrMemo[ nLoop, 3 ] } )
			Oms010AddC(oStruDA0,aUsrMemo[ nLoop, 2 ])
		ElseIf aUsrMemo[ nLoop, 1 ] == "DA1"
			AAdd( aMemoDA1, { aUsrMemo[ nLoop, 2 ], aUsrMemo[ nLoop, 3 ] } )
			Oms010AddC(oStruDA1,aUsrMemo[ nLoop, 2 ])
		EndIf
	Next nLoop
EndIf

FWMemoVirtual( oStruDA0, aMemoDA0)

FWMemoVirtual( oStruDA1, aMemoDA1)

Pergunte("OMS010",.F.)
oStruDA1:SetProperty( 'DA1_CODTAB' , MODEL_FIELD_OBRIGAT, .F.)
// Adiciona ao modelo um componente de formulário
oModel:AddFields( 'DA0MASTER', /*cOwner*/, oStruDA0 )

// Adiciona ao modelo componentes de grid
oModel:AddGrid( 'DA1DETAIL', 'DA0MASTER', oStruDA1 , /*LinPre*/, {|oMdl| OMS010LinOk(oMdl) },{|oMdl| OMS010GdPr(oMdl)},/*Pos*/,Iif(lOMS010Com,{|oGrid| OMS010Load(oGrid) },NIL))

If lGrade
	If !IsInCallStack("Oms010Ger")
		oStruDA1:AddField("","","DA1_GRDUPD","L",1,0,Nil,Nil,Nil,Nil,{||.F. },Nil,Nil,.T.)	//Campo para controle de update nos registros da grade
	EndIf
	oModel:AddGrid( 'DA1DETAIL2', 'DA0MASTER', oStruDA1 , /*LinPre*/, /*LinPos*/,/*Pre*/,/*Pos*/,/*Load*/)
	oModel:GetModel( 'DA1DETAIL2' ):SetUseOldGrid(.T.)
EndIf

oModel:GetModel( 'DA1DETAIL' ):SetUseOldGrid(.T.)

// define o numero maximo de linhas, de acordo com a define MAXGETDAD
oModel:GetModel( 'DA1DETAIL' ):SetMaxLine(MAXGETDAD)

If lGrade
	// define o numero maximo de linhas, de acordo com a define MAXGETDAD
	oModel:GetModel( 'DA1DETAIL2' ):SetMaxLine(MAXGETDAD)
	oModel:GetModel( 'DA1DETAIL' ):SetOnlyQuery(.T.)
	oModel:GetModel( 'DA1DETAIL2' ):SetOptional(.T.)
EndIf

// Validacao de Ativacao
oModel:SetVldActivate( { |oModel| OMS010VlAc( oModel ) } )

// Faz relacionamento entre os componentes do model
oModel:SetRelation( 'DA1DETAIL', { { 'DA1_FILIAL', 'xFilial( "DA1" )' }, { 'DA1_CODTAB', 'DA0_CODTAB' } }, DA1->( IndexKey( 3 ) ) )

If lGrade
	// Faz relacionamento entre os componentes do model
	oModel:SetRelation( 'DA1DETAIL2', { { 'DA1_FILIAL', 'xFilial( "DA1" )' }, { 'DA1_CODTAB', 'DA0_CODTAB' } }, DA1->( IndexKey( 3 ) ) )
EndIf

// Linha unica do grid.
If DA1->(ColumnPos("DA1_TIPPRE")) == 0
	oModel:GetModel( 'DA1DETAIL' ):SetUniqueLine( { 'DA1_CODPRO','DA1_GRUPO','DA1_QTDLOT','DA1_TPOPER','DA1_ESTADO','DA1_DATVIG','DA1_REFGRD' } )
Else
	oModel:GetModel( 'DA1DETAIL' ):SetUniqueLine( { 'DA1_CODPRO','DA1_GRUPO','DA1_QTDLOT','DA1_TPOPER','DA1_ESTADO','DA1_DATVIG','DA1_REFGRD','DA1_TIPPRE' } )
EndIf
// Retorna o Modelo de dados
Return oModel

//-------------------------------------------------------------------
/*/{Protheus.doc} OMS010Desc
Inicializador padrao da descricao do produto ou grade

@param nulo, descricao do produto
@return caracter,

@author Vendas & CRM
@since 19/04/12
@version 1.0
/*/
//-------------------------------------------------------------------
Function OMS010Desc()

Local cProduto		:= ""
Local lReferencia	:= .F.
Local cRet			:= ""
Local lContinua		:= .T.
Local oMdl
Local oMdlDA1
Local nTam			:= 0

If IsInCallStack("OMSA010")
	oMdl := FWModelActive()
	oMdlDA1 := oMdl:GetModel("DA1DETAIL")
	If oMdlDA1:GetOperation() <> MODEL_OPERATION_VIEW .and. oMdlDA1:GetOperation() <> MODEL_OPERATION_DELETE
		lContinua := .F.
	EndIf
	nTam := oMdlDA1:OFORMMODELSTRUCT:GetProperty("DA1_DESCRI", MODEL_FIELD_TAMANHO)
Else
	nTam := TamSX3("DA1_DESCRI")[1]
EndIf

If lContinua 
	cProduto := DA1->DA1_CODPRO
	If cProduto <> "" .AND. (!INCLUI .OR. lCopia)
		lReferencia	:= MatGrdPrrf(@cProduto)
		If IsInCallStack("OMSA010") .And. MV_PAR01 == 2 .And. lReferencia 
			cRet := oGrade:GetDescProd(cProduto)
		ElseIf ExistCpo("SB1",cProduto)
			cRet := Posicione("SB1",1,xFilial("SB1")+cProduto,"B1_DESC")
		EndIf
	EndIf
EndIf

Return PadR(cRet,nTam)

//-------------------------------------------------------------------
/*/{Protheus.doc} Oms010Ger

Funcao para geração da de Tabela de Preco via MVC.

@param cAlias,caracter
@param nRecno,numerico
@param nOpc,numerico

@return logico, sempre verdadeiro

@author Vendas & CRM
@since 03/04/12
@version 1.0
/*/
//-------------------------------------------------------------------
Function Oms010Ger(cAlias, nRecno, nOpc)
Local cTitle := ""
Local nCount := 0
Local oModel
Local oGrid

Default nOpc := 0

If Type("aRotina") == "A" .and. nOpc>0 .and. len(aRotina)>= nOpc
	cTitle := aRotina[nOpc,1]
EndIf

If Pergunte("OMS10A",.T.)

	// ativa o model com a operacao
	oModel := ModelDef()
	oModel:SetOperation(MODEL_OPERATION_INSERT)
	oModel:Activate()

	// altera a operacao do model para update
	// permitindo que a grid receba uma atribuição do bLoad
	oModel:nOperation := MODEL_OPERATION_UPDATE
	oGrid:= oModel:Getmodel("DA1DETAIL")
	oGrid:bLoad := {|oMdl|OMS010CarGD(oModel)}

	// desativa e ativa o model para que o bLoad seja executado
	// e retorna para operacao de insert.
	oGrid:Deactivate()
	MsgRun( STR0034,STR0006, {|| oGrid:Activate() } ) // "Validando Tabela de Preço" #### 'Aguarde...'

	// Devido a planilha de dados dos itens da tabela de preco ser pré-carregada
	// deve desconsiderar a validação das linhas da grid.
	// Pois isso ira impactar ao chamar o metodo CommitData() gerando lentidão,
	// já que o mesmo vai validar esses dados.
	For nCount := 2 to Len(oGrid:aDataModel)
		oGrid:aDataModel[nCount,MODEL_GRID_VALID] := .T.
		oGrid:aDataModel[nCount,MODEL_GRID_MODIFY] := .T.
		oGrid:aDataModel[nCount,MODEL_GRID_INSERT] := .T.
		oGrid:aDataModel[nCount,MODEL_GRID_DATA,2,2] = .T.
		aAdd(oGrid:aLinesChanged,nCount)
	Next nCount

	oModel:nOperation := MODEL_OPERATION_INSERT

	lOk := (FWExecView(cTitle,'OMSA010',MODEL_OPERATION_INSERT,,{ || .T. } ,,,,,,,oModel) == 0 )

EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Oms010Inc

Funcao para rotina de inclusão de Tabela de Preco via MVC.

@param cAlias,caracter, Alias corrente
@param nRecno,numerico, numero do registro que esta posicionado
@param nOpc,numerico, opção do menudef()

@return logico, sempre verdadeiro

@author Reynaldo Tetsu Miyashita
@since 08/09/2014
@version 1.0
/*/
//-------------------------------------------------------------------
Function Oms010Inc(cAlias, nRecno, nOpc)
Local cTitle := ""
Local lGrade := MaGrade()

Default nOpc := 0

If Type("aRotina") == "A" .and. nOpc>0 .and. len(aRotina)>= nOpc
	cTitle := aRotina[nOpc,1]
EndIf

If lGrade .AND. Type("oGrade") <> "O"
	oGrade := MsMatGrade():New("oGrade",,"DA1_PRCVEN","OMSASomG()","Positivo().And.OMSACalV()",,{{"DA1_PRCVEN",.T.,,.T.},;
																								{"DA1_VLRDES",.T.,,.T.},;
																								{"DA1_PERDES",.T.,,.T.}})
EndIf

lOk := ( FWExecView(cTitle, 'OMSA010', MODEL_OPERATION_INSERT,, { || .T. } ) == 0 )

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Oms010Alt

Funcao para rotina de alteração de Tabela de Preco via MVC.

@param cAlias,caracter, Alias corrente
@param nRecno,numerico, numero do registro que esta posicionado
@param nOpc,numerico, opção do menudef()

@return logico, sempre verdadeiro

@author Vendas & CRM
@since 03/04/12
@version 1.0
/*/
//-------------------------------------------------------------------
Function Oms010Alt(cAlias, nRecno, nOpc)
Local cTitle := ""

Default nOpc := 0

If Type("aRotina") == "A" .and. nOpc>0 .and. len(aRotina)>= nOpc
	cTitle := aRotina[nOpc,1]
EndIf

Pergunte("OMS010",.F.)
If mv_par01 == 2
	lOk := ( FWExecView(cTitle, 'OMSA010A', MODEL_OPERATION_UPDATE,, { || .T. } ) == 0 )
Else
	lOk := ( FWExecView(cTitle, 'OMSA010', MODEL_OPERATION_UPDATE,, { || .T. } ) == 0 )
EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} Oms010Vis

Funcao para rotina de visualização de Tabela de Preco via MVC.

@param cAlias,caracter, Alias corrente
@param nRecno,numerico, numero do registro que esta posicionado
@param nOpc,numerico, opção do menudef()

@return logico, sempre verdadeiro

@author Vendas & CRM
@since 20/10/2014
@version 1.0
/*/
//-------------------------------------------------------------------
Function Oms010Vis(cAlias, nRecno, nOpc)

Local cTitle := ""

Default nOpc := 0

If Type("aRotina") == "A" .and. nOpc>0 .and. len(aRotina)>= nOpc
	cTitle := aRotina[nOpc,1]
EndIf

Pergunte("OMS010",.F.)
If mv_par01 == 2
	lOk := ( FWExecView(cTitle, 'OMSA010A', MODEL_OPERATION_VIEW,, { || .T. } ) == 0 )
Else
	lOk := ( FWExecView(cTitle, 'OMSA010', MODEL_OPERATION_VIEW,, { || .T. } ) == 0 )
EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} OMS010Com

Commit do Model

@param oMd1,Modedef,

@return logico,

@author Vendas & CRM
@since 12/03/12
@version 1.0
/*/
//-------------------------------------------------------------------
Function OMS010Com(oMdl)
Local aColsGrd		:= {}
Local aTabDel		:= {}
Local aTamCODTAB	:= TamSx3("DA1_CODTAB")[1]
Local aUmovStatus	:= {}
Local bAfter		:= {|| .T. }
Local bBefore		:= {|| .T. }
Local bTTS			:= {|| .T. }
Local cChaveCab		:=	""
Local cChaveIte		:= ""
Local cCodTab		:= ""
Local cFilialDA0	:= xFilial("DA0")
Local cFilialDA1	:= xFilial("DA1")
Local cProcesCab	:= "019"
Local cProcesIte	:= "020"
Local cTabelaCab	:= "DA0"
Local cTabelaIte	:= "DA1"
Local lRet			:= .F.
Local luMovme		:= (SuperGetMV("MV_UMOV",,.F.)) 		// Indica se Existe Integração Protheus x uMov.me
Local nOpc			:= 0
Local nPosCodPro	:= 0
Local nPosItem		:= 0
Local nTipo			:= 0
Local nX			:= 0
Local nY			:= 0
Local oMdl2DA1		:= NIL
Local oMdlDA1		:= NIL
Local oModelNovo	:= NIL
Local lAlterado 	:= .F.			
Local lGrade		:= MaGrade()
Local lEComm		:= SuperGetMV("MV_LJECOMM",,.F.)
Local aAreaSB5	    := {}
Local lExcluido		:= .F.
Local lNovo			:= .F.
Local lAlterado		:= .F.

Pergunte("OMS010",.F.)
nTipo  := mv_par01

oMdlDA1	:= oMdl:GetModel("DA1DETAIL")
nOpc	:= oMdl:GetOperation()

//Sem grade ou atualizacao por produto
If (nTipo==2 .AND. nOpc == MODEL_OPERATION_UPDATE).OR. !lGrade
	oMdl2DA1 := oMdlDA1
Else
	oMdl2DA1 := oMdl:GetModel("DA1DETAIL2")
EndIf

nPosCodPro	:= Ascan(oMdl2DA1:aHeader,{|x| AllTrim(x[2]) == "DA1_CODPRO"})
nPosItem	:= Ascan(oMdl2DA1:aHeader,{|x| AllTrim(x[2]) == "DA1_ITEM"})

Pergunte("OMS010",.F.)
nTipo := mv_par01

If ExistBlock("OS010END")
	bTTS	:= {|oModel,cID,cAlias| ExecBlock("OS010END",.F.,.F.,{nTipo,nOpc})}
Endif

If ExistBlock("OM010DA1")
	bAfter	:= {|oModel,cID,cAlias| Iif(cAlias=="DA1",ExecBlock("OM010DA1",.F.,.F.,{nTipo,nOpc}),.T.) }
EndIf

If nTipo == 1 .AND. (nOpc == MODEL_OPERATION_INSERT .OR. nOpc == MODEL_OPERATION_UPDATE .OR. nOpc == 9) //Copia

	If ExistBlock( "OS010MAN")
		bBefore	:= {|oModel,cID,cAlias| Iif(cAlias=="DA0",ExecBlock( "OS010MAN", .F., .F. ),.T.) }
	EndIf

ElseIf nOpc == MODEL_OPERATION_DELETE

	//-------------------------
	// Exclusao de Anotações
	//-------------------------
	If  nModulo == 73
		CRMA090Del( "DA0", DA0->( Recno() ) )
	EndIf

	If ExistBlock( "OS010EXT")
		bBefore	:= {|oModel,cID,cAlias| Iif(cAlias=="DA0",ExecBlock( "OS010EXT", .F., .F. ),.T.) }
	EndIf

ElseIf nOpc == MODEL_OPERATION_UPDATE .AND. nTipo == 2

	If ExistBlock( "OS010MNP")
		bBefore	:= {|oModel,cID,cAlias| ExecBlock("OS010MNP",.F.,.F., MV_PAR02 ) }
	EndIf

EndIf

aUmovStatus := {}

If luMovme
	// Leio dois arrays: oMdlDA1 e oMdl2DA1
	// Usar seekline
	// Comparo o antigo e o novo pelo DA1_PRCVEN
	// Se for diferente, msseek, reclock .F., gravo e msunlock.
	aColsGrd := aGradeCols(oGrade,oMdlDA1:aCols,oMdlDA1:aHeader,"DA1_CODPRO","DA1_ITEMGR","DA1_PRCVEN","DA1_ITEM")

	If nPosItem > 0
		nY := Ascan(oMdl2DA1:aHeader,{|x| AllTrim(x[2]) == "DA1_PRCVEN"})
		If nY > 0
			cCodTab := oMdl:GetValue("DA0MASTER","DA0_CODTAB")
			DA1->(dbSetOrder(3))
			// Quando usar grade explode os itens para gravação
			For nX := 1 To Len(aColsGrd)
				If oMdl2DA1:SeekLine({{"DA1_ITEM",aColsGrd[nX,nPosItem]},{"DA1_CODPRO",aColsGrd[nX,nPosCodPro]}}) .AND. !oMdl2DA1:IsDeleted()
					If !Empty(aColsGrd[nX,nY])
						If DA1->(MsSeek(xFilial("DA1")+PadR(cCodTab,aTamCODTAB[1])+oMdl2DA1:GetValue(oMdl2DA1:aHeader[nPosItem,2])))
							If DA1->DA1_PRCVEN <> aColsGrd[nX,nY]
								aAdd( aUmovStatus, oMdl2DA1:GetValue(oMdl2DA1:aHeader[nPosItem,2]) )
							EndIf
						Endif
					EndIf
				EndIf
			Next nX
		EndIf
	EndIf
EndIf
lEComm := lEComm .AND. oMdl:GetModel("DA0MASTER"):HasField("DA0_ECFLAG") .AND. !Empty(oMdl:GetValue("DA0MASTER","DA0_ECFLAG")) 
If lEComm 
	aAreaSB5 := SB5->(GetArea()) 
	SB5->(dbSetOrder(1))   //B5_FILIAL + B5_COD
	aAreaDA1 := DA1->(GetArea()) 
	DA1->(dbSetOrder(3))   //DA1_FILIAL + DA1_ITEM 	  
	For nX := 1 To oMdl2DA1:Length()
		oMdl2DA1:GoLine( nX ) 
		cChaveIte := cFilialDA1 + oMdl:GetValue("DA0MASTER","DA0_CODTAB") +  oMdl2DA1:GetValue("DA1_ITEM")
		lExcluido := oMdl2DA1:IsDeleted()
		lNovo	  := oMdl2DA1:IsInserted() .OR.  nOpc == MODEL_OPERATION_INSERT 
		lAlterado := oMdl2DA1:IsUpdated()   
		If lEComm .AND. !Empty(oMdl2DA1:GetValue("DA1_ECDTEX")) .AND. !Empty(oMdl2DA1:GetValue("DA1_ECSEQ"))  
			If lExcluido   
			   oMdl2DA1:SetValue("DA1_ECSEQ", "")
			   oMdl2DA1:SetValue("DA1_ECDTEX", "")
			ElseIf lAlterado .AND.  DA1->(MsSeek(cChaveIte))
				If DA1->DA1_PRCVEN <> oMdl2DA1:GetValue("DA1_PRCVEN") .OR. oMdl2DA1:GetValue("DA1_DATVIG")  <>  DA1->DA1_DATVIG .OR. ;
					oMdl2DA1:GetValue("DA1_ATIVO")  <> DA1->DA1_ATIVO   							 
				   oMdl2DA1:SetValue("DA1_ECSEQ", "")
				   oMdl2DA1:SetValue("DA1_ECDTEX", "")
				EndIf
				
			ElseIf lNovo .AND. !Empty(oMdl2DA1:GetValue("DA1_ECDTEX")) .AND. !Empty(oMdl2DA1:GetValue("DA1_ECSEQ")) //Cópia
				   oMdl2DA1:SetValue("DA1_ECSEQ", "")
				   oMdl2DA1:SetValue("DA1_ECDTEX", "")
			EndIf
		EndIf		
	Next nX 
	RestArea(aAreaSB5)
	RestArea(aAreaDA1)
	If nOpc == MODEL_OPERATION_DELETE        
		aAreaDA0 := DA0->(GetArea())		
		DA0->(DBSetOrder(1))

		If DA0->(MsSeek(cFilialDA0+oMdl:GetValue("DA0MASTER","DA0_CODTAB")))
			DA0->(RecLock("DA0",.F.))
			//E-COMMERCE
			DA0->DA0_ECFLAG  := "2" //Inativo 
			DA0->DA0_ECDTEX  := ""
			DA0->DA0_ECSEQ   := ""
	   		DA0->(MsUnlock() )
		Endif  
		RestArea(aAreaDA0)
	EndIf

EndIf


If nTipo == 2 .AND. nOpc == MODEL_OPERATION_UPDATE 
	For nX := 1 To oMdl2DA1:Length()

		If oMdl2DA1:IsDeleted() //Quando alteracao por produto
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Se delecao armazena para verificar se deleta cabecalho       ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If Ascan(aTabDel,oMdl2DA1:GetValue("DA1_CODTAB")) == 0
				Aadd(aTabDel,oMdl2DA1:GetValue("DA1_CODTAB"))
			Endif
		EndIf
	Next nX
EndIf

If Type("lAutoOMS010") <> "U" .And. lAutoOMS010
	lRet := FwFormCommit(oMdl,bBefore,bAfter,bTTS)
Else
	MsgRun( STR0035,STR0006, {|| lRet := FwFormCommit(oMdl,bBefore,bAfter,bTTS) } ) //"Manutencao da tabela de precos" ## "Aguarde! atualizando os dados..."
EndIf

//Grava as tabelas da integração offline (MD6 e MD7):
If lRet
	If nModulo == 12 .And. lAmbOffLn .AND. nTipo == 1 
		For nX := 1 To oMdl2DA1:Length()
			oMdl2DA1:GoLine( nX )
			cChaveIte := cFilialDA1 + oMdl:GetValue("DA0MASTER","DA0_CODTAB") + oMdl2DA1:GetValue("DA1_CODPRO") + PadR(oMdl2DA1:GetValue("DA1_INDLOT"), TamSx3("DA1_INDLOT")[1]) + oMdl2DA1:GetValue("DA1_ITEM")
			lExcluido := oMdl2DA1:IsDeleted()
			lNovo	  := oMdl2DA1:IsInserted()
			lAlterado := oMdl2DA1:IsUpdated()			
						
			//Para Alteracao verifica se item foi modificado para inserir na integracao
			If nOpc == MODEL_OPERATION_UPDATE								
				If lExcluido .OR. lNovo .OR. lAlterado
					Om010IteOk(cProcesIte, cChaveIte, cTabelaIte, lExcluido, lNovo)					
				EndIf
			Else
				//Para Inclusao e Exclusao sempre insere item na integracao
				Om010IteOk(cProcesIte, cChaveIte, cTabelaIte, lExcluido, lNovo)				
			EndIf
		Next nX
		//Insere o registro na integracao
		cChaveCab := cFilialDA0 + oMdl:GetValue("DA0MASTER","DA0_CODTAB")
		Om010CabOk(cProcesCab, cChaveCab, cTabelaCab)		
	EndIF

	If luMovme	
		For nX := 1 to Len(auMovStatus)
			cCodTab := oMdl:GetValue("DA0MASTER","DA0_CODTAB")
			DA1->(dbSetOrder(3))
			If DA1->(MsSeek(xFilial("DA1")+PadR(cCodTab,TamSx3("DA1_CODTAB")[1])+auMovStatus[nX]))
				RecLock( "DA1", .F.)
				DA1->DA1_DTUMOV := CTOD("")
				DA1->DA1_HRUMOV := ""
				MsUnlock()
			EndIf	
		Next nX
	EndIf
EndIf

If lRet .AND. nOpc == MODEL_OPERATION_UPDATE .AND. nTipo == 2 // Alteracao por produto apaga cabecalho quando nao houver mais itens
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Analisa se deleta cabecalho de acordo com os deletados       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	DA0->(DBSetOrder(1))
	DA1->(dbSetOrder(3))
	For nX := 1 to Len(aTabDel)
		If !DA1->(MsSeek(cFilialDA1+aTabDel[nX]))
			If DA0->(MsSeek(cFilialDA0+aTabDel[nX]))
				RecLock("DA0",.F.)
				//E-COMMERCE
				If lEComm .And. !Empty(DA0->DA0_ECFLAG) 
					DA0->DA0_ECFLAG := "2" //Inativo 
					DA0->DA0_ECDTEX  := ""
					DA0->DA0_ECSEQ := ""
				EndIf
					dbDelete()
				MsUnlock()
			Endif
		Endif
	Next nX
EndIf

If lRet
	If ExistBlock("OS010GRV")
		ExecBlock("OS010GRV",.F.,.F.,{nTipo,nOpc})
	Endif

	OMSA010Int( 2, nOpc, aIntDA0, aoIntDA1 )
EndIf

IntDA0	:= {}
aoIntDA1:= {}

If lRet
	lCopia	:= .F.
EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} OMS010GdLo

Carga de Produtos na Geracao de Tabela para o objeto
FwFormGridModel "DA1DETAIL".
A carga é feita no modelo de aHeader/aCols devido aos pontos de entrada
já existentes.

@param oMDl, ModelDef,
@param lGrade, logico, se é produto com grade

@param array, contem os itens da tabela de preco
				selecionados de acordo com o grupo de perguntas "OMS10A"

@author Vendas & CRM
@since 02/04/12
@version 1.0
/*/
//-------------------------------------------------------------------
Function OMS010GdLo(oMdl,lGrade)
Local aArea			:= GetArea()
Local aHeaderEx		:= {}
Local aColsEx		:= {}
Local aCampos		:= {}
Local aCols			:= {}
Local aColsModel	:= {}
Local aHeader		:= {}
Local aRecno		:= {}
Local cAliasSB1		:= "SB1"
Local cArqInd		:= ""
Local cCondicao		:= ""
Local cItem			:= Repl("0",Len(DA1->DA1_ITEM))
Local cProduto		:= ""
Local lExcLine		:= ExistBlock("OS010LCO")
Local lOs010Col		:= ExistBlock("OS010COL")
Local lQuery		:= .F.
Local nI			:= 0
Local nIndex		:= 0
Local nOpcA			:= 0
Local nSaveSx8		:= GetSx8Len()
Local nTamCols		:= 0
Local nUsado		:= 0
Local nX			:= 0
Local oGrid			:= NIL
Local nPFaixa     	:= 0

DEFAULT lGrade	:= MaGrade()

Pergunte("OMS10A",.F.)

aCampos := {"DA1_CODTAB","DA1_DESTAB"}

oGrid := oMdl:GetModel("DA1DETAIL")
aHeader := oGrid:aHeader
nUsado := Len(aHeader)
nPFaixa := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_QTDLOT"})

If lGrade .AND. Type("oGrade") <> "O"
	oGrade := MsMatGrade():New("oGrade",,"DA1_PRCVEN","OMSASomG()","Positivo().And.OMSACalV()",,{{"DA1_PRCVEN",.T.,,.T.},;
																								{"DA1_VLRDES",.T.,,.T.},;
																								{"DA1_PERDES",.T.,,.T.}})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta o Array aCols.                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SB1")
dbSetOrder(1)

#IFDEF TOP
	If TcSrvType() <> "AS/400"
		lQuery    := .T.
		cAliasSB1 := "QRYSB1"

		cQuery := "SELECT B1_COD,B1_DESC,B1_PRV1,B1_MSBLQL "
		cQuery += "FROM "+RetSqlName("SB1")+ " SB1 "
		cQuery += "WHERE "
		cQuery += "B1_FILIAL ='"+xFilial("SB1")+"' AND "
		cQuery += "B1_COD >= '"+mv_par01+"' AND "
		cQuery += "B1_COD <= '"+mv_par02+"' AND "
		cQuery += "B1_GRUPO >= '"+mv_par03+"' AND "
		cQuery += "B1_GRUPO <= '"+mv_par04+"' AND "
		cQuery += "B1_TIPO >= '"+mv_par05+"' AND "
		cQuery += "B1_TIPO <= '"+mv_par06+"' AND "
		cQuery += "SB1.D_E_L_E_T_ = ' ' "
		cQuery += "ORDER BY "+SqlOrder(SB1->(IndexKey()))

		If ExistBlock("OM010FIL")
			cQuery := ExecBlock("OM010FIL",.F.,.F.,{cQuery})
		Endif

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSB1,.T.,.T.)

		TcSetField(cAliasSB1,"B1_PRV1","N",TamSx3("B1_PRV1")[1],TamSx3("B1_PRV1")[2])
	Else
#EndIf
		cAliasSB1 := "SB1"
		cArqInd   := CriaTrab(,.F.)

   		cCondicao := 'B1_FILIAL == "'+xFilial("SB1")+'" .And.'
   		cCondicao += 'B1_COD >= "'+mv_par01+'" .And. B1_COD <= "'+mv_par02+'" .And. '
   		cCondicao += 'B1_GRUPO >= "'+mv_par03+'" .And. B1_GRUPO <= "'+mv_par04+'" .And. '
   		cCondicao += 'B1_TIPO >= "'+mv_par05+'" .And. B1_TIPO <= "'+mv_par06+'" '

	    If ExistBlock("OM010FIL")
	        cCondicao := ExecBlock("OM010FIL",.F.,.F.,{cCondicao})
	    Endif

		IndRegua(cAliasSB1,cArqInd,IndexKey(),,cCondicao)

		nIndex := RetIndex("SB1")
		#IFNDEF TOP
			dbSetIndex(cArqInd+OrdBagExt())
		#ENDIF
		dbSetOrder(nIndex+1)
		dbGotop()

#IFDEF TOP
	Endif
#ENDIF

nTamCols := 0
While (cAliasSB1)->(!Eof())

	If (cAliasSB1)->B1_MSBLQL <> "1"

		aAdd(aCols,Array(nUsado))

		cItem := Soma1(cItem,Len(DA1->DA1_ITEM))

		nTamCols := Len(aCols)

		For nX := 1 To nUsado

			If ( aHeader[nX,10] ==  "V" )
    			Do Case
					Case Alltrim(aHeader[nX,2]) == "DA1_DESCRI"
						aCols[nTamCols,nX] := (cAliasSB1)->B1_DESC
					Case Alltrim(aHeader[nX,2]) == "DA1_PRCBAS"
						aCols[nTamCols,nX] := (cAliasSB1)->B1_PRV1
					OtherWise
						aCols[nTamCols,nX] := CriaVar(aHeader[nX,2])
				EndCase
			Else
				Do Case
					Case Alltrim(aHeader[nX,2]) == "DA1_ITEM"
						aCols[nTamCols,nX] := cItem
					Case Alltrim(aHeader[nX,2]) == "DA1_CODPRO"
						aCols[nTamCols,nX] := (cAliasSB1)->B1_COD
					Case Alltrim(aHeader[nX,2]) == "DA1_DATVIG"
						aCols[nTamCols,nX] := mv_par07
					Case Alltrim(aHeader[nX,2]) == "DA1_PRCVEN"
						aCols[nTamCols,nX] := (cAliasSB1)->B1_PRV1
					Case Alltrim(aHeader[nX,2]) == "DA1_INDLOT"
						If nPFaixa >0 
							If nPFaixa < nX
								aCols[nTamCols,nX] := StrZero(aCols[nTamCols,nPFaixa],18,2) 
							Else
								aCols[nTamCols,nX] := StrZero(CriaVar(aHeader[nX,nPFaixa]),18,2)
							EndIf
						Else
							aCols[nTamCols,nX] := CriaVar(aHeader[nX,2])
						EndIf
					OtherWise
						aCols[nTamCols,nX] := CriaVar(aHeader[nX,2])
				EndCase
			EndIf

		Next nX

		If lGrade
			oGrade:MontaGrade(nTamCols,(cAliasSB1)->B1_COD,.T.,,.F.)
		Endif

		If lExcLine
			aCols[nTamCols] := ExecBlock("OS010LCO",.F.,.F.,{aHeader,aCols[nTamCols]})
		Endif

		If lOs010Col
			aCols := ExecBlock("OS010COL",.F.,.F.,{aHeader,aCols})
		Endif
	Else
		aAdd( aColsEx, { (cAliasSB1)->B1_COD	,;
						(cAliasSB1)->B1_DESC	,;
						.F.})	
	EndIf
	dbSelectArea(cAliasSB1)
	dbSkip()
EndDo
If Len(aColsEx) > 0
	aAdd( aHeaderEx, { STR0041	, 'B1_COD'	, '@!', TAMSX3('B1_COD')    [1]	, 0, '', 'û', 'C', '', '', '', '', '.T.'})
	aAdd( aHeaderEx, { STR0042	, 'B1_DESC'	, '@!', TAMSX3('B1_DESC')   [1]	, 0, '', 'û', 'C', '', '', '', '', '.T.'})
	
	If FindFunction("A410MsgLog")
		A410MsgLog(STR0043, STR0038 + STR0039, aHeaderEx, aColsEx) 
	Else
		HELP(" ",1,STR0043, STR0040,1,1)
	EndIf
	
	FreeObj(aHeaderEx)
	FreeObj(aColsEx)
EndIf
(cAliasSB1)->(DbCloseArea())

If Empty(aCols)
	Aadd(aCols,Array(nUsado))
	nTamCols := Len(aCols)
	For nX := 1 To nUsado
		If AllTrim(aHeader[nX,2]) == "DA1_ITEM"
			aCols[nTamCols,nX] := StrZero(1,Len(DA1->DA1_ITEM))
		Else
			aCols[nTamCols,nX] := ""
		EndIf
	Next nX
EndIf

oGrid:nLine:=1
For nX := 1 To nUsado
	If !Empty(aCols[1,nX])
		oGrid:SetValue(aHeader[nX,2] ,aCols[1,nX])
	EndIf
Next nY

If nTamCols>1
	aColsModel := {}
	nTamCols := Len(aCols)
	For nX := 2 To nTamCols
		aAdd( aColsModel, {0,aCols[nX]})
	Next nX
EndIf

RestArea(aArea)
Return aColsModel

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³OMS010GdPr  ³ Autor ³Vendas & CRM           ³ Data ³ 09/03/12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³ Validacao de Ativacao das Opcoes                           	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Logico                                                      	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oModel														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function OMS010GdPr(oMdl)
Local lOS01Acol	:= ExistBlock("OS01Acol")
Local nOper		:= oMdl:GetOperation()
Local nPosItem	:= aScan(oMdl:aHeader,{|x| AllTrim(x[2]) == "DA1_ITEM"})

If lOS01Acol
	ExecBlock("OS01Acol",.F., .F.)
EndIf

Pergunte("OMS010",.F.)

If mv_par01 == 1 .AND. SuperGetMV("MV_TPEFETP",,"1") == "2" .And.  nOper <> MODEL_OPERATION_INSERT .And. ;
	nOper <> 6 .And. !Empty(DA0->DA0_CODPUB)

	oMdl:SetNoInsertLine(.T.)
	oMdl:SetNoDeleteLine(.T.)

EndIf

//Carrega um array com os itens que foram posicionados na alteração.
If mv_par01 == 1 .AND. nOper == MODEL_OPERATION_UPDATE .AND. !IsBlind() .AND. oMdl:nLine <> Nil
	If Ascan(aPrdAlt, oMdl:aCols[oMdl:nLine][nPosItem]) == 0 //Carrega apenas se ainda não estiver no array.
		aAdd(aPrdAlt, oMdl:aCols[oMdl:nLine][nPosItem])
	EndIf
EndIf

Return .T.

/*/{Protheus.doc} OMS010VlAc

Validacao de Ativacao das Opcoes

@param oModel, fwFormModel, objeto fwFormModel contendo a Tabela de Preco
@return logico,

@author Vendas & CRM
@since 08/03/2012
@version 1.0

/*/
Function OMS010VlAc(oModel)
Local lRet 		 := .T.
Local lPainel	 := SuperGetMV("MV_LJGEPRE",.F.,.F.)     // somente :inclui,altera,exclui tabela de preco se Painel de Gestao estiver Desabilitado.
Local nOpc		 := oModel:GetOperation()
Local aCols	 	 := {}
Local nX		 := 0
Local nY		 := 0
Local oMdlDA1	 := oModel:GetModel("DA1DETAIL")
Local aSaveLines := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Painel de Gestão : inclui,altera,exclui tabela de preco se Painel de Gestao estiver Desabilitado.		 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lPainel .and. nOpc<>MODEL_OPERATION_VIEW
	MsgInfo(STR0028)
	lRet := .F.
Endif

If nOpc==MODEL_OPERATION_DELETE .AND. !Os010CanDel(DA0->DA0_CODTAB)
	lRet := .F.
	Help(" ",1,"NODELETA")
EndIf

Pergunte("OMS010",.F.)

If (nOpc==MODEL_OPERATION_UPDATE .Or. nOpc==MODEL_OPERATION_VIEW) .AND. mv_par01 == 2
	If Empty(mv_par02)
		Help("",1,"OMSA010PRD1")
		lRet := .F.
	Else
		DbSelectArea("SB1")
		DbSetOrder(1)
		If !MSSeek(XFilial("SB1")+mv_par02)
			Help("",1,"OMSA010PRD1")
			lRet := .F.
		Else
			DbSelectArea("DA1")
			DBSetOrder(2)
			MsSeek(XFilial("DA1")+mv_par02)
		EndIf
	EndIf
EndIf

If lRet .And. (!FindFunction("isSrv64") .Or. !IsSrv64())
	lRet := VldQtdReg(nOpc, DA0->DA0_CODTAB)
EndIf

//Se deixar ativar. Inicia chamada para Integracao
If lRet .AND. mv_par01 == 1 .AND. (nOpc == MODEL_OPERATION_INSERT .OR. nOpc == MODEL_OPERATION_UPDATE .OR. nOpc == MODEL_OPERATION_DELETE)
	OMSA010Int( 1, nOpc, aIntDA0, aoIntDA1 )
EndIf

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} OMS010CarGD
Carga do Grid para a geração da Tabela de preço via MVC

@param oMd1, Modeldef,

@author Vendas & CRM
@since 08/03/12
@version 1.0
/*/
//-------------------------------------------------------------------
Static Function OMS010CarGD(oMdl)
Local aCols 	:= {}
Local lGrade	:= MaGrade()

// carrega os produtos conforme filtro definido no grupo de perguntas OMS10A
aCols := OMS010GdLo(oMdl,lGrade)

Return aCols

/*/{Protheus.doc} OMS010Load
Carga do Grid Quando utiliza Grade de Produtos

@param oMdlDA1, fwFormModel, objeto fwFormModel da tabela de preco
@return array, Os dados da tabela de preco

@author Vendas & CRM
@since  16/04/12
@version 1.0
/*/
Static Function OMS010Load(oMdlDA1)
Local aArea   		:= GetArea()
Local aAreaDA0		:= DA0->(GetArea())
Local aAreaDA1		:= DA1->(GetArea())
Local aAreaTrb		:= {}
Local aAux			:= {}
Local aColsBkp		:= {}
Local aColsGrid		:= {}
Local aNoFields		:= {}
Local aRecno		:= {}
Local bAction1		:= {|| Oms010aRec(@aRecNo) }
Local bAction2		:= {|| .T. }
Local bCond			:= {|| .T. }
Local bMontCols		:= NIL
Local bWhile		:= {|| !Eof()}
Local bWhileComp	:= NIL
Local cKeyComp		:= ""
Local cKeyDA1		:= ""
Local cProdRef		:= ""
Local cQuery		:= ""
Local lGrade		:= MaGrade()
Local lQuery		:= .F.
Local lReferencia	:= .F.
Local nOpc			:= oMdlDA1:GetOperation()
Local nOrderComp	:= 0
Local nOrderDA1		:= 0
Local nPos			:= 0
Local nPosRECWT		:= 0
Local nTamCols		:= 0
Local nTamHeader	:= 0
Local nX			:= 1
Local nY			:= 1
Local oModel 		:= Nil
Local oMdlDA0 		:= Nil
Local cCodTab		:= ""
Local nPosTab		:= 0

If lGrade
	oGrade := MsMatGrade():New("oGrade",,"DA1_PRCVEN","OMSASomG()","Positivo().And.OMSACalV()",,{{"DA1_PRCVEN",.T.,,.T.},;
																								{"DA1_VLRDES",.T.,,.T.},;
																								{"DA1_PERDES",.T.,,.T.}})
EndIf

Private aCols		:= {}
Private aHeader	:= {}


Pergunte("OMS010",.F.)

#IFDEF TOP
	dbSelectArea("DA1")
	dbSetOrder(3)

	If TcSrvType() <> "AS/400"
		bMontCols := {|aCols,aHeader| MontaCols(aCols,aHeader,.F.,@aRecno,oMdlDA1)}

		lQuery    := .T.
		cQuery := "SELECT DA1.*,DA1.R_E_C_N_O_ DA1RECNO, B1_DESC, B1_PRV1 FROM "
		cQuery += RetSqlName("DA1")+ " DA1 "
		cQuery += "LEFT JOIN " +RetSqlName("SB1")+ " SB1  "
		cQuery += "  ON SB1.B1_FILIAL  = '"+xFilial("SB1")+"'"
		cQuery += "  AND SB1.B1_COD     = DA1.DA1_CODPRO"
		cQuery += "  AND SB1.D_E_L_E_T_ = ' ' "
		cQuery += "WHERE DA1.DA1_FILIAL = '"+xFilial("DA1")+"'"
		cQuery += "  AND DA1.DA1_CODTAB = '"+DA0->DA0_CODTAB+"'"
		cQuery += "  AND DA1.D_E_L_E_T_ = ' ' "
		cQuery += "ORDER BY "+SqlOrder(DA1->(IndexKey()))
		bWhile := { || !Eof() }

		cQuery := ChangeQuery(cQuery)

		dbSelectArea("DA1")
		dbCloseArea()
	Else
#ENDIF
		nOrderDA1 := 3
		cKeyDA1   := xFilial("DA1")+DA0->DA0_CODTAB
		bWhile    := {|| DA1->DA1_FILIAL+DA1->DA1_CODTAB }

#IFDEF TOP
	Endif
#ENDIF

// Por Tabela
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ATENCAO!!!Se for PYME retira o campo DA1_REFGRD da GetDados.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If __lPyme
	aNoFields := {"DA1_CODTAB","DA1_DESTAB","DA1_REFGRD"}
Else
	aNoFields := {"DA1_CODTAB","DA1_DESTAB"}
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Montagem do aHeader e aCols                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³FillGetDados( nOpcx, cAlias, nOrder, cSeekKey, bSeekWhile, uSeekFor, aNoFields, aYesFields, lOnlyYes,       ³
//³				  cQuery, bMountFile, lInclui )                                                                ³
//³nOpcx			- Opcao (inclusao, exclusao, etc).                                                         ³
//³cAlias		- Alias da tabela referente aos itens                                                          ³
//³nOrder		- Ordem do SINDEX                                                                              ³
//³cSeekKey		- Chave de pesquisa                                                                            ³
//³bSeekWhile	- Loop na tabela cAlias                                                                        ³
//³uSeekFor		- Valida cada registro da tabela cAlias (retornar .T. para considerar e .F. para desconsiderar ³
//³				  o registro)                                                                                  ³
//³aNoFields	- Array com nome dos campos que serao excluidos na montagem do aHeader                         ³
//³aYesFields	- Array com nome dos campos que serao incluidos na montagem do aHeader                         ³
//³lOnlyYes		- Flag indicando se considera somente os campos declarados no aYesFields + campos do usuario   ³
//³cQuery		- Query para filtro da tabela cAlias (se for TOP e cQuery estiver preenchido, desconsidera     ³
//³	           parametros cSeekKey e bSeekWhiele)                                                              ³
//³bMountCols	- Preenchimento do aCols pelo usuario (aHeader e aCols ja estarao criados)                     ³
//³lInclui		- Se inclusao passar .T. para qua aCols seja incializada com 1 linha em branco                 ³
//³aHeaderAux	-                                                                                              ³
//³aColsAux		-                                                                                              ³
//³bAfterCols	- Bloco executado apos inclusao de cada linha no aCols                                         ³
//³bBeforeCols	- Bloco executado antes da inclusao de cada linha no aCols                                     ³
//³bAfterHeader -                                                                                              ³
//³cAliasQry	- Alias para a Query                                                                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
FillGetDados(nOPc,"DA1",nOrderDA1,cKeyDA1,bWhile,{{bCond,bAction1,bAction2}},aNoFields,/*aYesFields*/,/*lOnlyYes*/,cQuery,bMontCols,.F.,,,,,,"DA1")

If lGrade
	aCols := aColsGrade(oGrade,aCols,aHeader,"DA1_CODPRO","DA1_ITEM","DA1_ITEMGR",aScan(aHeader,{|x| AllTrim(x[2]) == "DA1_DESCRI"}))
EndIf

If ExistBlock("OS01Acol")
	ExecBlock("OS01Acol",.F., .F.)
EndIf

// Posicionamento se faz necessario devido 
// aos inicicializadores padrão dos campos da tabela DA1
// que são chamados pela funcao CRIAVAR
dbSelectArea("DA1")
dbSetOrder(1)
dbSeek(xFilial("DA1")+DA0->DA0_CODTAB)

nTamHeader	:= Len(aHeader)
nPosRECWT	:= Ascan(aHeader,{|x| AllTrim(x[2]) == "DA1_REC_WT"})
nPosTab		:= Ascan(aHeader,{|x| AllTrim(x[2]) == "DA1_CODTAB"})
oModel 		:= oMdlDA1:GetModel()
oMdlDA0		:= oModel:GetModel("DA0MASTER")
cCodTab		:= oMdlDA0:GetValue("DA0_CODTAB")

For nX := 1 To Len(aCols)
	Aadd(aColsBkp,Array(nTamHeader+1))
	nTamCols += 1

	For nY := 1 To nTamHeader 
		If aHeader[nY,2] == "DA1_CODTAB"
			aColsBkp[nTamCols,nY] := cCodTab
		Else
			aColsBkp[nTamCols,nY] := aCols[nX,nY]
		EndIf	
	Next nY
	
	aColsBkp[nTamCols,nTamHeader+1] := .F.
	
	// se for uma opracao de inclusão ou copia, 
	// o recno(aColsGrid[n][1]) deve ser zero. Já que se trata de um novo registro
	If nOpc == MODEL_OPERATION_INSERT
		AAdd(aColsGrid,{0,aColsBkp[nX]})	
	Else
		AAdd(aColsGrid,{aCols[nX,nPosRECWT],aColsBkp[nX]})
	EndIf
Next nX

RestArea(aAreaDA1) 
RestArea(aAreaDA0)
RestArea(aArea)

Return aColsGrid

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³OMS010LinOk ³ Autor ³Vendas & CRM           ³ Data ³ 09/03/12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³ Validacao de Linha do Grid                                 	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Logico                                                      	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oModel														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function OMS010LinOk(oModel)
Local lRet  	:= .T.
Local aArea 	:= GetArea()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se estiver sendo executado a partir do loja, nao permite³
//³cadastrar preco zerado                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCenVenda
	If !oModel:IsDeleted() .AND. oModel:GetValue("DA1_PRCVEN") <= 0
		lRet := .F.
		Help('',1,'OBRIGAT',,STR0024 + oModel:GetValue("DA1_ITEM"),1,0)
	EndIf
EndIf
//-------------------------------------------------------------------------------
// Validação para nao permitir cadastrar os itens da tabela sem produto ou grupo
// informado.
//-------------------------------------------------------------------------------
If MV_PAR01==1 .AND. !oModel:IsDeleted() .AND. (Empty(oModel:GetValue("DA1_CODPRO"));
			.AND. Empty(oModel:GetValue("DA1_GRUPO")) .AND. Empty(oModel:GetValue("DA1_REFGRD")))
	Help('',1,'OBRIGAT',,STR0029 + oModel:GetValue("DA1_ITEM"),1,0) //"Não é permitido registar artigos com código de produto, garde de produto, ou grupo nulos. Corrija o elemento. "
	lRet := .F.
EndIf

If lRet
	If ExistBlock("OM010LOK")
		lRet := ExecBlock("OM010LOK",.F.,.F.)
	Endif
Endif

RestArea(aArea)
Return lRet

//-------------------------------------------------------------------------------
/*/{Protheus.doc} OMS010GetOk
Funcao para chamar a validação do formulario

@return logico

@author Vendas & CRM
@since 18/03/2015
@version 1.0
/*/
//-------------------------------------------------------------------------------
Static Function OMS010GetOk(oMdl)
	Local lRet := .F.

	If Type("lAutoOMS010") <> "U" .And. lAutoOMS010
		lRet := OMS010TudOk( oMdl )
	Else
		MsgRun( STR0037, STR0025, {|| lRet := OMS010TudOk( oMdl ) } ) // "Validando Tabela de Preço" #### 'Aguarde...'
	EndIf

Return lRet

//-------------------------------------------------------------------------------
/*/{Protheus.doc} OMS010TudOk
TudoOk do Model
@author Vendas & CRM
@since 09/03/12
@version 1.0
@param oModel, objeto, objeto Model das tabelas DA0 e DA1
@return Logico, verdadeiro se foi validado 100%
@example
(examples)
@see (links_or_references)
/*/
Function OMS010TudOk(oModel)
Local lRet			:= .T.
Local aArea			:= GetArea()
Local nX			:= 0
Local nY 			:= 0
Local nTipo			:= 0
Local nOpc			:= 0
Local nPosCodPro	:= 0
Local nPosItem		:= 0
Local nLin			:= 0
Local nPosScan		:= 0
Local nPosGrdUpd	:= 0
Local aColsDA1		:= {}
Local aColsGrd		:= {}
Local lGrade		:= MaGrade()
Local lIntPOS 		:= (SuperGetMV("MV_LJSYNT",,"0") == "1") //³Tratamento Integracao POS - Synthesis  ³
Local lEComm		:= SuperGetMV("MV_LJECOMM",,.F.) 
Local nStartLin		:= 1
Local nLenDA1Grd	:= 0
Local oMdl2DA1		:= Nil
Local lExecAuto		:= IsBlind()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada para validacao da confirmacao da tabela de preco       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet
	If ExistBlock("OM010TOK")
		lRet := ExecBlock("OM010TOK",.F.,.F.,{oModel})
	Endif
Endif

If lRet
	oMdlDA1	:= oModel:GetModel("DA1DETAIL")
	nOpc		:= oModel:GetOperation()
	nUsado		:= Len(oMdlDA1:aHeader)
	aColsDA1	:= oMdlDA1:aCols
	
	Pergunte("OMS010",.F.)
	nTipo := mv_par01
	
	//Sem grade ou atualizacao por produto
	If (nTipo==2 .AND. nOpc == MODEL_OPERATION_UPDATE).OR. !lGrade
		oMdl2DA1 := oMdlDA1 
	Else
		oMdl2DA1 := oModel:GetModel("DA1DETAIL2")
	EndIf

	nPosCodPro	:= Ascan(oMdl2DA1:aHeader,{|x| AllTrim(x[2]) == "DA1_CODPRO"})
	nPosItem	:= Ascan(oMdl2DA1:aHeader,{|x| AllTrim(x[2]) == "DA1_ITEM"})
	nPosGrdUpd	:= Ascan(oMdl2DA1:aHeader,{|x| AllTrim(x[2]) == "DA1_GRDUPD"})

	//atualizacao tabela
	If nOpc == MODEL_OPERATION_INSERT .OR. nOpc == MODEL_OPERATION_UPDATE .OR. nOpc == MODEL_OPERATION_DELETE
		If lGrade .AND. (nOpc == MODEL_OPERATION_INSERT .OR. (nTipo == 1 .AND. nOpc == MODEL_OPERATION_UPDATE))

			If Type("oGrade") <> "O" // Instancia o objeto se necessário 
				oGrade := MsMatGrade():New("oGrade",,"DA1_PRCVEN","OMSASomG()","Positivo().And.OMSACalV()",,{{"DA1_PRCVEN",.T.,,.T.},;
				                                                                                             {"DA1_VLRDES",.T.,,.T.},;
				                                                                                             {"DA1_PERDES",.T.,,.T.}})
			EndIf

			aColsGrd := aGradeCols(oGrade,oMdlDA1:aCols,oMdlDA1:aHeader,"DA1_CODPRO","DA1_ITEMGR","DA1_PRCVEN","DA1_ITEM")

			//Ordena o array da grade
			aSort(aColsGrd,,,{|x,y| x[nPosItem] < y[nPosItem] })

			//Quando usar grade explode os itens para gravação
			For nX := 1 To Len(aColsGrd)
				
				If lExecAuto .OR. nOpc <> MODEL_OPERATION_UPDATE .OR. aScan(aPrdAlt,aColsGrd[nX][nPosItem]) <> 0 //Atualiza apenas itens posicionados na alteração.

					nPosScan	:= aScan(oMdl2DA1:aCols,{|x| x[2] == aColsGrd[nX,nPosItem] .And. x[5] == aColsGrd[nX,nPosCodPro]}, nStartLin)
					
					//Guarda a posicao da ultima linha pesquisada no aCols
					If nPosScan > 0 
						nStartLin := nPosScan
					Else
						nStartLin := 1
						nPosScan  := aScan(oMdl2DA1:aCols,{|x| x[2] == aColsGrd[nX,nPosItem] .And. x[5] == aColsGrd[nX,nPosCodPro]}, nStartLin)
					EndIf
						
					If nPosScan > 0 .And. oMdl2DA1:GoLine(nPosScan) > 0 .And. !oMdl2DA1:IsDeleted() 				
						If !aColsGrd[nX,Len(aColsGrd[nX])]
							For nY := 1 To Len(oMdl2DA1:aHeader)
								If oMdl2DA1:aHeader[nY,10] <> "V" .And. oMdl2DA1:GetValueByPos(nY) <> aColsGrd[nX,nY]						
									oMdl2DA1:LdValueByPos(nY,aColsGrd[nX,nY])
								ElseIf oMdl2DA1:aHeader[nY,2] == "DA1_GRDUPD"
									oMdl2DA1:aCols[nPosScan,nPosGrdUpd] := .T.
								EndIf
							Next nY
						EndIf
					Else	
						If !aColsGrd[nX,Len(aColsGrd[nX])]
							If nOpc == MODEL_OPERATION_INSERT
								If nX == 1 .AND. (Trim(oMdl2DA1:GetValue("DA1_CODPRO"))=="" .OR. Trim(oMdl2DA1:GetValue("DA1_REFGRD"))=="")
									nLin := 1
								Else
									nLin := oMdl2DA1:AddLine()
								EndIf
								oMdl2DA1:GoLine(nLin)
							Else
								//Verificar se o Numero de linha do Acols é maior que o do Model para incluir nova linha							
								nLin := oMdl2DA1:AddLine()
								oMdl2DA1:GoLine(nLin)
							EndIf
							For nY := 1 To Len(oMdl2DA1:aHeader)
								If oMdl2DA1:aHeader[nY,10] <> "V" .And. oMdl2DA1:GetValueByPos(nY) <> aColsGrd[nX,nY]
									oMdl2DA1:LdValueByPos(nY,aColsGrd[nX,nY])
								ElseIf oMdl2DA1:aHeader[nY,2] == "DA1_GRDUPD"
									oMdl2DA1:aCols[nLin,nPosGrdUpd] := .T.
								EndIf						
							Next nY
						EndIf
					EndIf
				
				EndIf

			Next nX
			
			If nPosGrdUpd > 0
				nLenDA1Grd := oMdl2DA1:Length()			
				For nX := 1  To nLenDA1Grd
					If !oMdl2DA1:aCols[nX,nPosGrdUpd] .AND. (lExecAuto .OR. nOpc <> MODEL_OPERATION_UPDATE .OR. aScan(aPrdAlt,oMdl2DA1:aCols[nX][nPosItem]) <> 0)
						oMdl2DA1:GoLine(nX)
						oMdl2DA1:DeleteLine()	
					EndIf
				Next nX
			EndIf
			
		EndIf	
	EndIf
	
	For nX := 1 To oMdl2DA1:Length()
 		If oMdl2DA1:IsInserted(nX) .OR. oMdl2DA1:IsUpdated(nX)
			If oMdl2DA1:GetValue("DA1_INDLOT",nX)<> StrZero(oMdl2DA1:GetValue("DA1_QTDLOT",nX),18,2)
				oMdl2DA1:GoLine( nX )
				oMdl2DA1:SetValue("DA1_INDLOT",StrZero(oMdl2DA1:GetValue("DA1_QTDLOT"),18,2))	
			EndIf
		EndIf
 	Next nX	
EndIF

If lIntPOS .AND. nOpc == MODEL_OPERATION_UPDATE .And. DA0->(ColumnPos("DA0_POSFLG") > 0) .And. DA0->(FieldPos("DA0_POSDTE") > 0) .And. (DA0->DA0_POSFLG == "1")
   oMdl:GetModel("DA0MASTER"):SetValue("DA0_POSDTE",CtoD(""))
Endif 

If lEComm .AND. (nOpc <> MODEL_OPERATION_DELETE) .AND. oModel:GetModel("DA0MASTER"):HasField("DA0_ECFLAG") .AND. !Empty(oModel:GetModel("DA0MASTER"):GetValue("DA0_ECFLAG"))
	 oModel:GetModel("DA0MASTER"):SetValue("DA0_ECDTEX","")
	 oModel:GetModel("DA0MASTER"):SetValue("DA0_ECSEQ","")
EndIf

aPrdAlt := {}
aSize(aPrdAlt,0)

RestArea(aArea)

Return lRet
//-------------------------------------------------------------------
/*/{Protheus.doc} MenuDef

Utilizacao de menu Funcional

Parametros do array aRotina:
	1. Nome a aparecer no cabecalho
	2. Nome da Rotina associada
	3. Reservado
	4. Tipo de Transao a ser efetuada:
	    1 - Pesquisa e Posiciona em um Banco de Dados
	    2 - Simplesmente Mostra os Campos
	    3 - Inclui registros no Bancos de Dados
	    4 - Altera o registro corrente
	    5 - Remove o registro corrente do Banco de Dados
	5. Nivel de acesso
	6. Habilita Menu Funcional

@author Marco Bianchi
@since 01/09/2006
@version 1.0
@return aRotina, opções da mbrowse

/*/
Static Function MenuDef()

Private aRotina := {}

	aRotina :=		{{ OemToAnsi(STR0001),"AxPesqui"			,0,1,32,.F.},;							//"Pesquisar"
					{OemToAnsi(STR0002),"Oms010Vis"				,0,MODEL_OPERATION_VIEW		,32,NIL},;	//"Visualizar"
					{ OemToAnsi(STR0003),"Oms010Inc"			,0,MODEL_OPERATION_INSERT	,32,NIL},;	//"Incluir"
					{ OemToAnsi(STR0004),"Oms010Alt"			,0,MODEL_OPERATION_UPDATE	,32,NIL},;	//"Alterar"
					{ OemToAnsi(STR0005),"VIEWDEF.OMSA010"		,0,MODEL_OPERATION_DELETE	,32,NIL},;	//"Excluir"
					{ OemToAnsi(STR0012),"Oms010Cpy"			,0,9							,32,NIL},;  //"Copiar"
					{ OemToAnsi(STR0013),"Oms010Ger"	    	,0,3							,32,NIL},;  //"Gerar"
					{ OemToAnsi(STR0007),"Oms010Rej"			,0,5							,32,NIL}}   //"Reajuste"


If ExistBlock("OM010MNU")
	ExecBlock("OM010MNU",.F.,.F.)
EndIf

aRotina:= CRMXINCROT( "DA0", aRotina )

Return(aRotina)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010Tab ³ Autor ³ Henry Fila            ³ Data ³ 01/04/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina de Manutencao da Tabela de Preco                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010Tab()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Arquivo                                       ³±±
±±³          ³ExpN2: Numero do Registro                                     ³±±
±±³          ³ExpN3: Opcao do aRotina                                       ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Tab(cAlias,nReg,nOpc,lConsulta,lCopia,cCodProd)

Local aArea     := GetArea()
Local aPosObj   := {}
Local aObjects  := {}
Local aSize     := {}
Local aInfo     := {}
Local aButtons  := { { "PESQUISA"   , { || GdSeek(oGetDad,OemtoAnsi(STR0014),,,.T.) }, OemtoAnsi(STR0014), OemtoAnsi(STR0019) } } //"Busca Produto"
Local aRecno    := {}
Local aButtonUsr:= {}
Local nOrderDA1 := 3
Local nOpcA     := 0
Local nSaveSx8  := GetSx8Len()
Local nI        := 0
Local bSavKey   := SetKey(VK_F12,Nil)
Local bWhile    := {|| !Eof()}
Local cKeyDA1   := ""
Local cProduto  := ""
Local cDescricao:= ""
Local cQuery    := ""
Local lAltera   := nOpc==4              // Somente a Alteracao pode ser feita atraves do F12 por produto
Local lContinua := .T.
Local lQuery    := .F.
Local lMemo     := .F.
Local nTipo	    := 0
Local bCond     := {|| !lCopia }
Local bAction1  := {|| Oms010aRec(@aRecNo) }
Local bAction2  := {|| .T. }
Local aNoFields := {}
Local oDlg
Local oGetD
Local aColsBkp    := {}
Local nOrderComp  := 0
Local cKeyComp    := ""
Local lReferencia := .F.
LOcal lGrade      := MaGrade()
Local bMontCols   := Nil
Local aIntDA0     := {}
Local aoIntDA1	:= {}
Local lPainel	:= SuperGetMV("MV_LJGEPRE",.F.,.F.)    // somente :inclui,altera,exclui tabela de preco se Painel de Gestao estiver Desabilitado.
Local lOS01Acol	:= ExistBlock("OS01Acol")
Local aColsBack := {}
Private aHeader := {}
Private aCols   := {}
Private aTELA[0,0],aGETS[0]
Private oGrade := MsMatGrade():New("oGrade",,"DA1_PRCVEN","OMSASomG()","Positivo().And.OMSACalV()",,{{"DA1_PRCVEN",.T.,,.T.},;
																							{"DA1_VLRDES",.T.,,.T.},;
																							{"DA1_PERDES",.T.,,.T.}})
Private oGetDad

DEFAULT INCLUI    := .F.
DEFAULT lConsulta := .F.
DEFAULT lCopia    := .F.
DEFAULT cCodProd  := ""

lGrade := lGrade .And. (INCLUI .Or. nTipo == 1)

Pergunte("OMS010",.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Painel de Gestão : inclui,altera,exclui tabela de preco se Painel de Gestao estiver Desabilitado.		 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
IF lPainel .and. nOpc<>2
	MsgInfo(STR0028)
	Return(nOpcA)
Endif

OMSA010Int( 1, nOpc, aIntDA0, aoIntDA1 )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se outro programa estiver consultando a tabela de precos a visualizacao podera ser feita atraves do produto³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ValType(lConsulta) == "L"
	If lConsulta
		If !lAltera
			lAltera := .T.
		Endif
		If nOpc == 2 .And. IsInCallStack("TKTabela")
			MV_PAR01 := 2
			MV_PAR02 := cCodProd
		EndIf
	Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Inclui botoes de usuario  na enchoicebar                                ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("OS010BTN")
	aButtonUsr := ExecBlock("OS010BTN",.F.,.F.)
	If ValType(aButtonUsr) == "A"
		For nI   := 1  To  Len(aButtonUsr)
			Aadd(aButtons,aClone(aButtonUsr[nI]))
		Next nI
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Inicializa os parametros da rotina                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCopia
	MV_PAR01 := 1
	nTipo    := 1
Endif

Do Case
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Manutencao por Tabela                                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case MV_PAR01 == 1 .Or. INCLUI

	If nOpc == 5
		lContinua := Os010CanDel(DA0->DA0_CODTAB)
	Endif

	If lContinua

		MV_PAR01 := 1
		nTipo    := 1
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Inicializa as variaveis da Enchoice                                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If INCLUI .Or. lCopia
			RegToMemory( "DA0", .T., .F. )
		EndIf
		If !INCLUI .Or. lCopia

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se eh alteracao ou exclusao                                    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

			If aRotina[nOpc,4] == 4 .Or. aRotina[nOpc,4] == 5
				lContinua :=  SoftLock("DA0")
			Endif

			If lCopia .Or. lContinua
				If !lCopia
					RegToMemory( "DA0", .F., .F. )
				EndIf
				
				#IFDEF TOP
				
					dbSelectArea("DA1")
					dbSetOrder(3)
					If TcSrvType() <> "AS/400" .And. !lMemo
			
						bMontCols := {|aCols,aHeader| MontaCols(aCols,aHeader,lCopia,@aRecno)}

						lQuery    := .T.
						cQuery := "SELECT DA1.*,DA1.R_E_C_N_O_ DA1RECNO, B1_DESC, B1_PRV1 FROM "
						cQuery += RetSqlName("DA1")+ " DA1 "
						cQuery += "LEFT JOIN " +RetSqlName("SB1")+ " SB1  "
						cQuery += "  ON SB1.B1_FILIAL  = '"+xFilial("SB1")+"'"
						cQuery += "  AND SB1.B1_COD     = DA1.DA1_CODPRO"
						cQuery += "  AND SB1.D_E_L_E_T_ = ' ' "
						cQuery += "WHERE DA1.DA1_FILIAL = '"+xFilial("DA1")+"'"
						cQuery += "  AND DA1.DA1_CODTAB = '"+DA0->DA0_CODTAB+"'"
						cQuery += "  AND DA1.D_E_L_E_T_ = ' ' "
						cQuery += "ORDER BY "+SqlOrder(DA1->(IndexKey()))
						bWhile := { || !Eof() }

						cQuery := ChangeQuery(cQuery)

						dbSelectArea("DA1")
						dbCloseArea()

					Else
				#ENDIF
						nOrderDA1 := 3
						cKeyDA1   := xFilial("DA1")+DA0->DA0_CODTAB
						bWhile    := {|| DA1->DA1_FILIAL+DA1->DA1_CODTAB }

				#IFDEF TOP
					Endif
				#ENDIF
			
			Else
				lContinua := .F.
			EndIf
		EndIf
	Else
		Help(" ",1,"NODELETA")
	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Manutencao por Produto                                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case MV_PAR01 == 2

	cProduto   := MV_PAR02
	lReferencia:= MatGrdPrrf(@cProduto,.T.)
	cDescricao := MaGetDescGrd(cProduto)

    If Empty(cDescricao)
		SB1->(dbSetOrder(1))
		If SB1->(MsSeek(xFilial("SB1")+cProduto))
			cDescricao := SB1->B1_DESC
		EndIf
    EndIf

	dbSelectArea("DA1")
	dbSetOrder(2)
	cKeyDA1   := xFilial("DA1")+cProduto
	bWhile    := {|| DA1->DA1_FILIAL+DA1->DA1_CODPRO }
	nOrderDA1 := 2

EndCase
If lContinua

	If mv_par01 == 2 .And. (!Inclui .Or. !lCopia)		// Por Produto
		aNoFields := {"DA1_CODPRO","DA1_DESCRI","DA1_GRUPO","DA1_REFGRD"}
	Else						// Por Tabela
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ATENCAO!!!Se for PYME retira o campo DA1_REFGRD da GetDados.³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If __lPyme
			aNoFields := {"DA1_CODTAB","DA1_DESTAB","DA1_REFGRD"}
        Else
			aNoFields := {"DA1_CODTAB","DA1_DESTAB"}
        EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aHeader e aCols                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³FillGetDados( nOpcx, cAlias, nOrder, cSeekKey, bSeekWhile, uSeekFor, aNoFields, aYesFields, lOnlyYes,       ³
	//³				  cQuery, bMountFile, lInclui )                                                                ³
	//³nOpcx			- Opcao (inclusao, exclusao, etc).                                                         ³
	//³cAlias		- Alias da tabela referente aos itens                                                          ³
	//³nOrder		- Ordem do SINDEX                                                                              ³
	//³cSeekKey		- Chave de pesquisa                                                                            ³
	//³bSeekWhile	- Loop na tabela cAlias                                                                        ³
	//³uSeekFor		- Valida cada registro da tabela cAlias (retornar .T. para considerar e .F. para desconsiderar ³
	//³				  o registro)                                                                                  ³
	//³aNoFields	- Array com nome dos campos que serao excluidos na montagem do aHeader                         ³
	//³aYesFields	- Array com nome dos campos que serao incluidos na montagem do aHeader                         ³
	//³lOnlyYes		- Flag indicando se considera somente os campos declarados no aYesFields + campos do usuario   ³
	//³cQuery		- Query para filtro da tabela cAlias (se for TOP e cQuery estiver preenchido, desconsidera     ³
	//³	           parametros cSeekKey e bSeekWhiele)                                                              ³
	//³bMountCols	- Preenchimento do aCols pelo usuario (aHeader e aCols ja estarao criados)                     ³
	//³lInclui		- Se inclusao passar .T. para qua aCols seja incializada com 1 linha em branco                 ³
	//³aHeaderAux	-                                                                                              ³
	//³aColsAux		-                                                                                              ³
	//³bAfterCols	- Bloco executado apos inclusao de cada linha no aCols                                         ³
	//³bBeforeCols	- Bloco executado antes da inclusao de cada linha no aCols                                     ³
	//³bAfterHeader -                                                                                              ³
	//³cAliasQry	- Alias para a Query                                                                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	FillGetDados(nOPc,"DA1",nOrderDA1,cKeyDA1,bWhile,{{bCond,bAction1,bAction2}},aNoFields,/*aYesFields*/,/*lOnlyYes*/,cQuery,bMontCols,Inclui,,,,,,"DA1")
	If lGrade
		aCols := aColsGrade(oGrade,aCols,aHeader,"DA1_CODPRO","DA1_ITEM","DA1_ITEMGR",aScan(aHeader,{|x| AllTrim(x[2]) == "DA1_DESCRI"}))
	EndIf
	If mv_par01 == 1 .Or. Inclui .Or. lCopia
		aCols[1,Ascan(aHeader,{|x| AllTrim(x[2]) == "DA1_ITEM"})] := StrZero(1,Len(DA1->DA1_ITEM)) //Preenche o Item
	EndIf
	If mv_par01 == 2  .And. MaGrade()
		cProdRef    := MV_PAR02
		lReferencia := MatGrdPrrf(@cProdRef,.T.)
		cProdRef    := Padr(cProdRef,Len(DA1->DA1_REFGRD))
		aAreaTrb    := GetArea()
		If lReferencia
			If (len(aCols) == 0 ) .Or. (Len(aCols) > 0 .And. MaConsRefG() )
				If Empty(aCols[Len(aCols),ascan(aHeader,{|x| Alltrim(x[2])=="DA1_CODTAB"})])
					aCols:={}
				Endif
				aColsBkp 	:= aClone(aCols)
				aCols    	:= {}

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ATENCAO!!! A Ordem 4 do SIX da tabela DA1 nao foi criada para os paises diferentes do Brasil ³
				//³com isso o Indice 6 do Brasil e o indice 5 para outros paises.                               ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
                nOrderComp	:= IIf(cPaisLoc == "BRA", 6 , 5 )

				cKeyComp	:= xFilial("DA1")+cProdRef
				bWhileComp	:= {|| DA1->DA1_FILIAL+DA1->DA1_REFGRD }
				aHeader		:= {}
				FillGetDados(nOPc,"DA1",nOrderComp,cKeyComp,bWhileComp,{{bCond,bAction1,bAction2}},aNoFields,/*aYesFields*/,/*lOnlyYes*/,cQuery,/*bMontCols*/,.F.,,,,,,"DA1")
				aEval(aColsBkp, {|z,w| Aadd(aCols, z)})
				aCols       := aSort(aCols,,,{|x,y| x[ascan(aHeader,{|x| Alltrim(x[2])=="DA1_CODTAB"})]+x[ascan(aHeader,{|x| Alltrim(x[2])=="DA1_ITEM"})] < y[ascan(aHeader,{|x| Alltrim(x[2])=="DA1_CODTAB"})]+y[ascan(aHeader,{|x| Alltrim(x[2])=="DA1_ITEM"})] })
			Endif
		Endif
		RestArea(aAreaTrb)
	EndIf
	If MV_PAR01==2
		aHeader[Ascan(aHeader,{|x| AllTrim(x[2]) == "DA1_CODTAB"}),6] := "Oms010Vld()"
	EndIf

	If lQuery
		dbSelectArea("DA1")
		dbCloseArea()
		ChkFile("DA1",.F.)
	EndIf

	If lOS01Acol
		ExecBlock("OS01Acol",.F., .F.)
	EndIf

	aColsBack := aClone(aCols)

	dbSelectArea("DA0")
	Do Case
	Case MV_PAR01 == 1
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Faz o calculo automatico de dimensoes de objetos     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aSize := MsAdvSize()
		AAdd( aObjects, { 100, 100, .T., .T. } )
		AAdd( aObjects, { 200, 200, .T., .T. } )
		aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 5, 5 }
		aPosObj 	:= MsObjSize( aInfo, aObjects,.T.)

		DA1->(dbGoto(0))

		DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 To aSize[6],aSize[5] of oMainWnd PIXEL
		EnChoice( "DA0", nReg, nOpc,,,,,aPosObj[1], , 3, , , , , ,.T. )
		oGetD := MsGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpc,"Oms010LOk()",Iif(lCopia,"Oms010TCOk()","Oms010TOk()"),"+DA1_ITEM",.T.,,1,,MAXGETDAD)
		oGetDad := oGetD
		If SuperGetMV("MV_TPEFETP",,"1") == "2" .And. !Inclui .And. !lCopia .And. !Empty(DA0->DA0_CODPUB)
			oGetDad:oBrowse:bAdd    	:= { || .f. } // Nao Permite a inclusao de Linhas
			oGetDad:oBrowse:bDelete 	:= { || .f. } // Nao Permite a deletar Linhas
		EndIf

		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpcA := 1,If(oGetd:TudoOk(),If(!Obrigatorio(aGets,aTela),nOpcA := 0,oDlg:End()),nOpcA := 0)},{||oDlg:End()},,aButtons )
	Case MV_PAR01 == 2
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Faz o calculo automatico de dimensoes de objetos     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aSize := MsAdvSize()
		AAdd( aObjects, { 100, 011, .T., .F. } )
		AAdd( aObjects, { 300, 200, .T., .T. } )
		aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ],2,2}
		aPosObj := MsObjSize( aInfo, aObjects)

		DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 To aSize[6],aSize[5] of oMainWnd PIXEL
		@ aPosObj[1,1],aPosObj[1,2]+000 SAY RetTitle("DA1_CODPRO") SIZE 035,009 OF oDlg PIXEL	//"Produto"
		@ aPosObj[1,1],aPosObj[1,2]+035 MSGET oGet1 VAR cProduto	PICTURE "@!" WHEN .F.	SIZE 085,009 OF oDlg PIXEL
		@ aPosObj[1,1],aPosObj[1,2]+125 MSGET oGet2 VAR cDescricao	PICTURE "@!" WHEN .F.	SIZE 380,009 OF oDlg PIXEL
		dbSelectArea("DA1")
		oGetD := MsGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpc,"Oms010LOk()","Oms010TOk()",,.T.,,,,MAXGETDAD)
		oGetDad := oGetD
		ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{|| nOpcA := 1, If(oGetd:TudoOk(),oDlg:End(),nOpcA := 0)},{||oDlg:End()},,aButtons)
	EndCase
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Rotina de Gravacao da Tabela de preco                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nOpcA == 1 .And. nOpc <> 2
		If lGrade
			aCols := aGradeCols(oGrade,aCols,aHeader,"DA1_CODPRO","DA1_ITEMGR","DA1_PRCVEN","DA1_ITEM")
		EndIf
		Oms010Grv(nOpc-2,nTipo,cProduto,aRecno,lCopia,aColsBack)
		While (GetSx8Len() > nSaveSx8 )
			ConfirmSx8()
		EndDo
		EvalTrigger()

		OMSA010Int( 2, nOpc, aIntDA0, aoIntDA1 )

	Else
		If nOpc <> 2
			While (GetSx8Len() > nSaveSx8 )
				RollBackSx8()
			Enddo
		Endif
	EndIf
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Restaura a entrada da Rotina                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

MsUnLockAll()
FreeUsedCode()
SetKey(VK_F12,bSavKey)
RestArea(aArea)
Return(nOpcA)


/*/{Protheus.doc} Oms010For
Rotina de geracao de tabela a partit do cadastro de produtos

@param cAlias, caracter, alias da tabela corrente
@param nReg, numerico, numero do registro da tabela corrente
@param nOpc, numero, numero da operação selecionada

@return nulo

@author Henry Fila
@since 01/04/2001
@version 1.0
/*/
Function Oms010For(cAlias,nReg,nOpc)
Local aArea			:= GetArea()
Local aButtons		:= {}
Local aButtonUsr	:= {}
Local aCampos		:= {}
Local aObjects		:= {}
Local aPosObj		:= {}
Local aRecno		:= {}
Local aSize			:= {}
Local bSavKey		:= SetKey(VK_F12,Nil)
Local cAliasSB1		:= "SB1"
Local cArqInd		:= ""
Local cCondicao		:= ""
Local cItem			:= Replicate("0",Len(DA1->DA1_ITEM))
Local cProduto		:= ""
Local lExcLine		:= ExistBlock("OS010LCO")
Local lGrade		:= MaGrade()
Local lOs010Col		:= ExistBlock("OS010COL")
Local lQuery		:= .F.
Local nI			:= 0
Local nIndex		:= 0
Local nOpcA			:= 0
Local nSaveSx8		:= GetSx8Len()
Local nTamCols		:= 0
Local nUsado		:= 0
Local nX			:= 0
Local oDlg
Local oGetD

Private aCols   := {}
Private aHeader := {}
Private aTELA[0,0],aGETS[0]
Private oGetDad
Private oGrade := MsMatGrade():New("oGrade",,"DA1_PRCVEN",,"Positivo()",,{{"DA1_PRCVEN",.T.,,.T.},{"DA1_VLRDES",.T.,,.T.},{"DA1_PERDES",.T.,,.T.}})

INCLUI := .T.
ALTERA := .F.

If ExistBlock("OS010BTN")
	aButtonUsr := ExecBlock("OS010BTN",.F.,.F.)
	If ValType(aButtonUsr) == "A"
		For nI   := 1  To  Len(aButtonUsr)
			Aadd(aButtons,aClone(aButtonUsr[nI]))
		Next nI
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Inicializa os parametros da rotina                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis de parametrizacao de lancamentos    ³
//³                                                      ³
//³ MV_PAR01 Produto inicial?                            ³
//³ MV_PAR02 Produto final  ?                            ³
//³ MV_PAR03 Grupo inicial  ?                            ³
//³ MV_PAR04 Grupo final    ?                            ³
//³ MV_PAR05 Tipo inicial   ?                            ³
//³ MV_PAR06 Tipo final     ?                            ³
//³ MV_PAR07 Tabela Inicial ?                            ³
//³ MV_PAR08 Tabela final   ?                            ³
//³ MV_PAR09 Fator          ?                            ³
//³ MV_PAR10 Numero decimais?                            ³
//³ MV_PAR11 Pedido em Carteira? Sim/Nao                 ³
//³ MV_PAR12 Reaplicar fator?                            ³
//³ MV_PAR13 Planilha       ?                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If Pergunte("OMS10A",.T.)

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Inicializa as variaveis da Enchoice                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	RegToMemory( "DA0", .T., .F. )

	aCampos := {"DA1_CODTAB","DA1_DESTAB"}
	If lGrade
		aCols := aColsGrade(oGrade,aCols,aHeader,"DA1_CODPRO","DA1_ITEM","DA1_ITEMGR",aScan(aHeader,{|x| AllTrim(x[2]) == "DA1_DESCRI"}))
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array aHeader.                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("DA1")
	While !Eof() .And. SX3->X3_ARQUIVO == "DA1"
		If Ascan(aCampos,AllTrim(SX3->X3_CAMPO)) == 0 .And. X3Uso(SX3->X3_USADO) .And. cNivel >= SX3->X3_NIVEL
			Aadd(aHeader, {   AllTrim(X3Titulo()),;
				SX3->X3_CAMPO,;
				SX3->X3_PICTURE,;
				SX3->X3_TAMANHO,;
				SX3->X3_DECIMAL,;
				SX3->X3_VALID,;
				SX3->X3_USADO,;
				SX3->X3_TIPO,;
				SX3->X3_ARQUIVO,;
				SX3->X3_CONTEXT } )
			nUsado++
		EndIf
		dbSelectArea("SX3")
		dbSkip()
	EndDo

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array aCols.                                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	dbSelectArea("SB1")
	dbSetOrder(1)

	#IFDEF TOP

		If TcSrvType() <> "AS/400"
			lQuery    := .T.
			cAliasSB1 := "QRYSB1"

			cQuery := "SELECT B1_COD,B1_DESC,B1_PRV1,B1_MSBLQL "
			cQuery += "FROM "+RetSqlName("SB1")+ " SB1 "
			cQuery += "WHERE "
			cQuery += "B1_FILIAL ='"+xFilial("SB1")+"' AND "
			cQuery += "B1_COD >= '"+mv_par01+"' AND "
			cQuery += "B1_COD <= '"+mv_par02+"' AND "
			cQuery += "B1_GRUPO >= '"+mv_par03+"' AND "
			cQuery += "B1_GRUPO <= '"+mv_par04+"' AND "
			cQuery += "B1_TIPO >= '"+mv_par05+"' AND "
			cQuery += "B1_TIPO <= '"+mv_par06+"' AND "
			cQuery += "SB1.D_E_L_E_T_ = ' '"
			cQuery += "ORDER BY "+SqlOrder(SB1->(IndexKey()))

			If ExistBlock("OM010FIL")
				cQuery := ExecBlock("OM010FIL",.F.,.F.,{cQuery})
			Endif

			cQuery := ChangeQuery(cQuery)
			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSB1,.T.,.T.)

			TcSetField(cAliasSB1,"B1_PRV1","N",TamSx3("B1_PRV1")[1],TamSx3("B1_PRV1")[2])
		Else
	#ENDIF
    		cAliasSB1 := "SB1"
			cArqInd   := CriaTrab(,.F.)

    		cCondicao := 'B1_FILIAL == "'+xFilial("SB1")+'" .And.'
    		cCondicao += 'B1_COD >= "'+mv_par01+'" .And. B1_COD <= "'+mv_par02+'" .And. '
    		cCondicao += 'B1_GRUPO >= "'+mv_par03+'" .And. B1_GRUPO <= "'+mv_par04+'" .And. '
    		cCondicao += 'B1_TIPO >= "'+mv_par05+'" .And. B1_TIPO <= "'+mv_par06+'" '

		    If ExistBlock("OM010FIL")
		        cCondicao := ExecBlock("OM010FIL",.F.,.F.,{cCondicao})
		    Endif

			IndRegua(cAliasSB1,cArqInd,IndexKey(),,cCondicao)

			nIndex := RetIndex("SB1")
			#IFNDEF TOP
				dbSetIndex(cArqInd+OrdBagExt())
			#ENDIF
			dbSetOrder(nIndex+1)
			dbGotop()

	#IFDEF TOP
		Endif
	#ENDIF

	While (cAliasSB1)->(!Eof())

		If RegistroOk(cAliasSB1,.F.,(CALIASSB1)->B1_MSBLQL)

	   		Aadd(aCols,Array(nUsado+1))
	   		nTamCols := Len(aCols)
			cItem := Soma1(cItem,Len(DA1->DA1_ITEM))

			For nX := 1 To nUsado

				If ( aHeader[nX,10] !=  "V" )

					Do Case
						Case Alltrim(aHeader[nX,2]) == "DA1_ITEM"
							aCOLS[nTamCols,nX] := cItem
						Case Alltrim(aHeader[nX,2]) == "DA1_CODPRO"
							aCOLS[nTamCols,nX] := (cAliasSB1)->B1_COD
						Case Alltrim(aHeader[nX,2]) == "DA1_DATVIG"
							aCOLS[nTamCols,nX] := mv_par07
						Case Alltrim(aHeader[nX,2]) == "DA1_PRCVEN"
							aCOLS[nTamCols,nX] := (cAliasSB1)->B1_PRV1
						OtherWise
							aCols[nTamCols,nX] := Criavar(aHeader[nX,2],.T.)
					EndCAse
				Else

	    			Do Case
						Case  Alltrim(aHeader[nX,2]) == "DA1_DESCRI"
							aCOLS[nTamCols,nX] := (cAliasSB1)->B1_DESC
						Case Alltrim(aHeader[nX,2]) == "DA1_PRCBAS"
							aCOLS[nTamCols,nX] := (cAliasSB1)->B1_PRV1
						OtherWise
							aCOLS[nTamCols,nX] := CriaVar(aHeader[nX,2],.T.)
					EndCase

				EndIf

			Next nX
			aCols[nTamCols,nUsado+1] := .F.
			IF lGrade
				oGrade:MontaGrade(nTamCols,(cAliasSB1)->B1_COD,.T.,,.F.)
			Endif

			If lExcLine
				aCols[nTamCols] := ExecBlock("OS010LCO",.F.,.F.,{aHeader,aCols[nTamCols]})
			Endif

			If lOs010Col
				aCols := ExecBlock("OS010COL",.F.,.F.,{aHeader,aCols})
			Endif
		EndIf
		dbSelectArea(cAliasSB1)
		dbSkip()
	EndDo

	If Empty(aCols)
		Aadd(aCols,Array(nUsado+1))

		For nX := 1 To nUsado
			If AllTrim(aHeader[nX,2]) == "DA1_ITEM"
				aCOLS[nTamCols,nX] := StrZero(1,Len(DA1->DA1_ITEM))
			Else
				aCOLS[nTamCols,nX] := CriaVar(aHeader[nX,2],.T.)
			EndIf
		Next nX
		aCols[nTamCols,nUsado+1] := .F.
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz o calculo automatico de dimensoes de objetos     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aSize := MsAdvSize()
	AAdd( aObjects, { 100, 100, .T., .T. } )
	AAdd( aObjects, { 200, 200, .T., .T. } )
	aInfo := { aSize[ 1 ], aSize[ 2 ], aSize[ 3 ], aSize[ 4 ], 5, 5 }
	aPosObj := MsObjSize( aInfo, aObjects,.T.)

	DEFINE MSDIALOG oDlg TITLE cCadastro From aSize[7],0 To aSize[6],aSize[5] of oMainWnd PIXEL
	EnChoice( "DA0", nReg, nOpc,,,,,aPosObj[1], , 3, , , , , ,.T. )
	oGetD := MsGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpc,"Oms010LOk()","Oms010TOk()","+DA1_ITEM",.T.,,1,,MAXGETDAD)
	oGetDad := oGetD
	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||nOpcA := 1,If(oGetd:TudoOk(),If(!Obrigatorio(aGets,aTela),nOpcA := 0,oDlg:End()),nOpcA := 0)},{||oDlg:End()},,aButtons )

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Rotina de Gravaca da Tabela de preco                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nOpcA == 1 .And. nOpc <> 2
		If lGrade
			aCols := aGradeCols(oGrade,aCols,aHeader,"DA1_CODPRO","DA1_ITEMGR","DA1_PRCVEN","DA1_ITEM")
		EndIf
		Oms010Grv(nOpc-2,1,,aRecno,.F., aClone(aCols) )
		While ( GetSx8Len() > nSaveSx8 )
			ConfirmSx8()
		EndDo
		EvalTrigger()
	Else
		If nOpc <> 2
			While ( GetSx8Len() > nSaveSx8 )
				RollBackSx8()
			EndDo
		Endif
	EndIf
	
	If lQuery
		dbSelectArea(cAliasSB1)
		dbCloseArea()
		dbselectArea("DA0")
	Else
		dbSelectArea("SB1")
		dbClearFilter()
		RetIndex("SB1")
		Ferase(cArqInd+OrdBagExt())
		dbselectArea("DA0")
	Endif
	
	MsUnLockAll()
	FreeUsedCode()
	SetKey(VK_F12,bSavKey)
	RestArea(aArea)

Endif

If Inclui
	Inclui := !Inclui
Endif

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010Grv ³ Autor ³ Henry Fila            ³ Data ³ 01/04/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina de Gravacao da Tabela de Preco                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010Grv                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Opcao da Gravacao sendo:                               ³±±
±±³          ³       [1] Inclusao                                           ³±±
±±³          ³       [2] Alteracao                                          ³±±
±±³          ³       [3] Exclusao                                           ³±±
±±³          ³ExpN2: Tipo de Gravacao sendo:                                ³±±
±±³          ³       [1] Tabela                                             ³±±
±±³          ³       [2] Produto                                            ³±±
±±³          ³ExpC3: Codigo do Produto para gravacao por produto            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Oms010Grv(nOpcao,nTipo,cProduto,aRecno,lCopia,aColsBack)

Local aArea      := GetArea()
Local aTabDel    := {}
Local aRegNo     := {}
Local aUsrMemo   := If( ExistBlock( "OM010MEM" ), ExecBlock( "OM010MEM", .F.,.F. ), {} )
Local aMemoDA0   := {}
Local aMemoDA1   := {}
Local lGravou    := .F.
Local lTravou    := .T.
Local lEntryDA1  := ExistBlock("OM010DA1")
Local lEntryEnd  := ExistBlock("OS010END")
Local lEntryGrv  := ExistBlock("OS010GRV")
Local nX         := 0
Local nY         := 0
Local nCntfor    := 0
Local nUsado     := Len(aHeader)
Local nPosTabela := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_CODTAB"})
Local nPItem     := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_ITEM"})
Local nPrcBase   := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_PRCBAS"})
Local nPrcVend   := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_PRCVEN"})
Local nAtivo     := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_ATIVO"})
Local nFaixa     := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_QTDLOT"})
Local nVigencia  := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_DATVIG"})
Local nLoop      := 0
Local bCampo     := {|nCPO| Field(nCPO) }
Local cItem      := Repl("0",Len(DA1->DA1_ITEM))
Local lReferencia:= .F.
Local lContinua  := .T.
Local cProdRef   := ""
Local cProcesCab := "019"
Local cProcesIte := "020"
Local cChaveCab  :=	""
Local cChaveIte  := ""
Local cTabelaCab := "DA0"
Local cTabelaIte := "DA1"
Local nLenBack   := Len(aColsBack)
Local lOS010MAN  := .F.
Local lEComm	 := SuperGetMV("MV_LJECOMM",,.F.)
Local lUpdEComm	 := .F. //Atualização e-commerce ?

Default lCopia   := .F.

CursorWait()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Limpa buffer                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aUltResult := Nil

// Se existe o ponto de entrada OS010MAN
lOS010MAN := ExistBlock( "OS010MAN")

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ordena o aCols pela ordem de itens³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nTipo == 1
	aSort(aCols,,,{|x,y|x[1] <= y[1]})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega campos memo de usuario mas se nao for copia          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ValType( aUsrMemo ) == "A" .And. Len( aUsrMemo ) > 0 .And. nOpcao <> 4
	For nLoop := 1 to Len( aUsrMemo )
		If aUsrMemo[ nLoop, 1 ] == "DA0"
			AAdd( aMemoDA0, { aUsrMemo[ nLoop, 2 ], aUsrMemo[ nLoop, 3 ] } )
		ElseIf aUsrMemo[ nLoop, 1 ] == "DA1"
			AAdd( aMemoDA1, { aUsrMemo[ nLoop, 2 ], aUsrMemo[ nLoop, 3 ] } )
		Endif
	Next nLoop
EndIf

Do Case
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualizacao por Tabela                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case nTipo == 1 .And. nOpcao <> 3
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Antes de iniciar o processo de alteração verifica se todos os itens foram apagados,³
	//³ caso afirmativo analisa se a tabela esta sendo utilidada.                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
   If nOpcao == 2 .And. aScan(aCols, { |x| x[nUsado + 1] == .F. }) == 0
		lContinua := Os010CanDel(M->DA0_CODTAB)
		If !lContinua
			Help(" ",1,"NODELETA")
		EndIf
	Endif

   If lContinua

		//
		//Efetua a gravacao do cabecalho da tabela de preco (Tabela DA0)
		//
		Begin Transaction

			If lOS010MAN
				ExecBlock( "OS010MAN", .F., .F. )
			EndIf

			dbSelectArea("DA0")
			dbSetOrder(1)
			If MsSeek(xFilial("DA0")+M->DA0_CODTAB)
				RecLock("DA0",.F.)
			Else
				RecLock("DA0",.T.)
			EndIf

			If lEcomm .AND. !lInsert 
				lUpdEComm := .T. 
			EndIf

			For nCntFor := 1 TO FCount()
				FieldPut(nCntFor,M->&(EVAL(bCampo,nCntFor)))
			Next nCntFor

			If lUpdEComm .AND. !Empty(DA0_ECDTEX)  .AND. !Empty(DA0_ECSEQ)
				FieldPut(FieldPos("DA0_ECDTEX"),"")      
				FieldPut(FieldPos("DA0_ECSEQ"),"")
			EndIf

			lUpdEComm := lEcomm .AND. !lInsert
			DA0->DA0_FILIAL := xFilial("DA0")

			For nLoop := 1 To Len( aMemoDA0 )
				MSMM( DA0->( FieldGet( FieldPos(aMemoDA0[nLoop,1] ) ) ),,, M->&( aMemoDA0[nLoop,2] ),1,,,"DA0",aMemoDA0[nLoop,1])
			Next nLoop

			MsUnLock()

			DbSelectArea("DA1")
			dbSetOrder(1)
			//
			//Efetua a gravacao dos itens da tabela de preco (Tabela DA1)
			//
			For nX := 1 To Len(aCols)

				If lOS010MAN
					ExecBlock( "OS010MAN", .F., .F. )
				EndIf

				// Se o item da tabela foi excluida
				If (aCols[nX,nUsado+1] )
					// Posicao pelo recno no array aCols
					If !Empty(aCols[nX,nUsado])
						DbGoto(aCols[nX,nUsado])
						RecLock("DA1")
						If  lUpdEcomm .And. !Empty(DA1->DA1_ECDTEX) .AND. !Empty(DA1->DA1_ECSEQ)
							REPLACE DA1->DA1_ECDTEX WITH ""
							REPLACE DA1->DA1_ECSEQ WITH ""
						EndIf
							DA1->(DbDelete())
							For nLoop := 1 To Len( aMemoDA1)
								MSMM( DA1->( FieldGet( FieldPos( aMemoDA1[ nLoop, 1 ] ) ) ),,,,2)
							Next nLoop
						MsUnLock()
					EndIf
				Else
					If Empty(aCols[nX,nUsado]) .OR. lCopia // é um novo item na tabela de preco ou copia de tabela de preco
						RecLock("DA1",.T.)
					Else // senao é um item existente na tabela de preco
						DbGoto(aCols[nX,nUsado])
						RecLock("DA1")
					EndIf

					If !(Empty(aCols[nX,nUsado]) .OR. lCopia) .AND. lUpdEComm .And. ;
							!Empty(DA1->DA1_ECDTEX) .AND. !Empty(DA1->DA1_ECSEQ) .AND.;
						    ( (aCols[nX,nPrcVend] <> DA1->DA1_PRCVEN) .OR. ;
			   			     ( aCols[nX,nAtivo] <> DA1->DA1_ATIVO ) .OR. ;
			   			     (aCols[nX,nVigencia] <> DA1->DA1_DATVIG ) )
								REPLACE DA1->DA1_ECDTEX WITH ""
								REPLACE DA1->DA1_ECSEQ WITH ""
					EndIf

					For nY := 1 to Len(aHeader)
						If aHeader[nY,10] <> "V"
							DA1->(FieldPut(FieldPos(aHeader[nY,2]),aCols[nX,nY]))
						EndIf
					Next nY
					DA1->DA1_FILIAL := xFilial("DA1")
					DA1->DA1_CODTAB := DA0->DA0_CODTAB
					DA1->DA1_INDLOT := StrZero(DA1->DA1_QTDLOT,18,2)

					For nLoop := 1 To Len( aMemoDA1 )
						MSMM( DA1->( FieldGet( FieldPos( aMemoDA1[nLoop,1] ) ) ),,,GDFieldGet( aMemoDA1[nLoop,2], nX ),1,,,"DA1",aMemoDA1[nLoop,1])
					Next nLoop

					MsUnLock()

					If lEntryDA1
						ExecBlock("OM010DA1",.F.,.F.,{nTipo,nOpcao})
					Endif
					lGravou := .T.

				EndIf

				If lEntryEnd
					ExecBlock("OS010END",.F.,.F.,{nTipo,nOpcao})
				Endif

				If lAmbOffLn
					If nOpcao == 1
			 			//Insere o registro na integracao
		   	   			cChaveIte:= xFilial("DA1") + DA1->DA1_CODTAB + DA1->DA1_CODPRO + DA1->DA1_INDLOT + DA1->DA1_ITEM
			   			Om010IteOk(cProcesIte, cChaveIte, cTabelaIte, aCols[nX,nUsado + 1], aCols[nX,nUsado] == 0)
			   		ElseIf (aCols[nX,Len(aCols[nX])] .OR. nX > nLenBack) .OR. ;
			   				( nX <= nLenBack .AND. ((aCols[nX,nPrcBase] <> aColsBack[nX,nPrcBase]) .OR. (aCols[nX,nPrcVend] <> aColsBack[nX,nPrcVend]) .OR. ;
			   				( aCols[nX,nAtivo] <> aColsBack[nX,nAtivo]) .OR. (aCols[nX,nFaixa] <> aColsBack[nX,nFaixa]) .OR. (aCols[nX,nVigencia] <> aColsBack[nX,nVigencia])) )
			   			//No caso de alteracao trata apenas o registro que sofreu alguma alteracao
			   			cChaveIte:= xFilial("DA1") + DA1->DA1_CODTAB + DA1->DA1_CODPRO + DA1->DA1_INDLOT + DA1->DA1_ITEM
			   		EndIf
			   	EndIf

			Next nX

			//Insere o registro na integracao
			cChaveCab:= xFilial("DA0") + DA0->DA0_CODTAB
			Om010CabOk(cProcesCab, cChaveCab, cTabelaCab)

		End Transaction

	EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Exclusao por Tabela                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Case  nTipo == 1 .And. nOpcao == 3
	lUpdEComm := lEcomm
	Begin Transaction

		If ExistBlock( "OS010EXT" )
			ExecBlock( "OS010EXT", .F., .F. )
		EndIf

		dbSelectArea("DA1")
		dbSetOrder(1)
		MsSeek(xFilial("DA1")+M->DA0_CODTAB)
		nX := 1
		While ( !Eof() .And. xFilial("DA1") == DA1->DA1_FILIAL .And. M->DA0_CODTAB == DA1->DA1_CODTAB )

			RecLock("DA1")
				If lUpdEComm  .AND. !Empty(DA1->DA1_ECDTEX) .AND.  !Empty(DA1->DA1_ECSEQ)
					DA1->DA1_ECDTEX := "" 
					DA1->DA1_ECSEQ := ""
				EndIf
				dbDelete()

				//Insere o registro na integracao
				cChaveIte:= xFilial("DA1") + DA1->DA1_CODTAB + DA1->DA1_CODPRO + DA1->DA1_INDLOT + DA1->DA1_ITEM
				Om010IteOk(cProcesIte, cChaveIte, cTabelaIte, aCols[nX,nUsado + 1], aCols[nX,nUsado] == 0)

				For nLoop := 1 To Len( aMemoDA1 )
					MSMM( DA1->( FieldGet( FieldPos( aMemoDA1[ nLoop, 1 ] ) ) ),,,,2)
				Next nLoop

			MsUnLock()

			If lEntryDA1
				ExecBlock("OM010DA1",.F.,.F.,{nTipo,nOpcao})
			Endif

			dbSelectArea("DA1")
			dbSkip()

			nX++

		EndDo

		dbSelectArea("DA0")
		dbSetOrder(1)
		If MsSeek(xFilial("DA0")+M->DA0_CODTAB)
			RecLock("DA0",.F.)
			If lEcomm .AND. !Empty(DA0->DA0_ECFLAG)
				FieldPut(FieldPos("DA0_ECDTEX"),"")      
				FieldPut(FieldPos("DA0_ECSEQ"),"") 
				FieldPut(FieldPos("DA0_ECFLAG"),"2")
			EndIf 

				dbDelete()

				//Insere o registro na integracao
				cChaveCab:= xFilial("DA0") + DA0->DA0_CODTAB
				Om010CabOk(cProcesCab, cChaveCab, cTabelaCab)

				For nLoop := 1 To Len( aMemoDA0 )
					MSMM( DA0->( FieldGet( FieldPos( aMemoDA0[ nLoop, 1 ] ) ) ),,,,2)
				Next nLoop
			MsUnLock()
		EndIf
	End Transaction

	If lEntryEnd
		ExecBlock("OS010END",.F.,.F.,{nTipo,nOpcao})
	Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualizacao por Produto                                      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

Case  nTipo == 2 .And. nOpcao <> 3
	cProdRef	:= cProduto
	lReferencia	:= MatGrdPrRf(@cProdRef,.T.)
	lUpdEComm	:= lEcomm
	Begin Transaction

		If ExistBlock( "OS010MNP" )
			ExecBlock("OS010MNP",.f.,.f., cProduto )
		EndIf

		For nX := 1 To Len(aCols)

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Grava DA1                                                    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			lTravou := .F.
			If nX <= Len(aRecNo)
				dbSelectArea("DA1")
				dbGoto(aRecNo[nX])
				RecLock("DA1")
				lTravou := .T.
			EndIf

			If ( !aCols[nX,nUsado+1] )
				If !lTravou
					RecLock("DA1",.T.)
				EndIf

				If !(Empty(aCols[nX,nUsado]) .OR. lCopia) .AND. lUpdEComm .And.;
					!Empty(DA1->DA1_ECDTEX) .AND. !Empty(DA1->DA1_ECSEQ) .AND.;
					    ( (aCols[nX,nPrcVend] <> DA1->DA1_PRCVEN) .OR. ;
		   			     ( aCols[nX,nAtivo] <> DA1->DA1_ATIVO ) .OR. ;
		   			     (aCols[nX,nVigencia] <> DA1->DA1_DATVIG ) )
		   			     
						 REPLACE DA1->DA1_ECDTEX WITH ""
						 REPLACE DA1->DA1_ECSEQ WITH ""
				EndIf

				For nY := 1 To nUsado
					If ( aHeader[nY,10] != "V" )
						DA1->(FieldPut(FieldPos(aHeader[nY,2]),aCols[nX,nY]))
					EndIf
				Next nY
				DA1->DA1_FILIAL := xFilial("DA1")
				DA1->DA1_INDLOT := StrZero(DA1->DA1_QTDLOT,18,2)
				DA1->DA1_CODPRO := cProduto
				MsUnlock()

				If lEntryDA1
					ExecBlock("OM010DA1",.F.,.F.,{nTipo,nOpcao})
				Endif

			Else
				If lTravou
					dbSelectArea("DA1")
					dbSetOrder(2)
					MsSeek(xFilial("DA1")+cProduto+aCols[nX,nPosTabela]+aCols[nX,nPItem])

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Se delecao armazena para verificar se deleta cabecalho       ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If Ascan(aTabDel,aCols[nX,nPosTabela]) == 0
						Aadd(aTabDel,aCols[nX,nPosTabela])
					Endif

					RecLock("DA1",.F.)
					If lUpdEComm .AND. !Empty(DA1->DA1_ECDTEX) .AND. !Empty(DA1->DA1_ECSEQ) 
						DA1->DA1_ECDTEX := ""
						DA1->DA1_ECSEQ := ""
					EndIf
						dbDelete()
					MsUnlock()
				Endif
			Endif

		Next nX


		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Analisa se deleta cabecalho de acordo com os deletados       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nY := 1 to Len(aTabDel)
			DA1->(dbSetOrder(3))
			If !DA1->(MsSeek(xFilial("DA1")+aTabDel[nY]))
				DA0->(DBSetOrder(1))
				If DA0->(MsSeek(xFilial("DA0")+aTabDel[nY]))
					RecLock("DA0",.F.)
					If lEcomm .AND. !Empty(DA0->DA0_ECFLAG)
						FieldPut(FieldPos("DA0_ECDTEX"),"")      
						FieldPut(FieldPos("DA0_ECSEQ"),"")
						FieldPut(FieldPos("DA0_ECFLAG"),"2")
					EndIf 
						dbDelete()
					MsUnlock()
				Endif
			Endif
		Next

		If lEntryEnd
			ExecBlock("OS010END",.F.,.F.,{nTipo,nOpcao})
		Endif

	End Transaction

EndCase

If lEntryGrv
	ExecBlock("OS010GRV",.F.,.F.,{nTipo,nOpcao})
Endif

CursorArrow()

Return(lGravou)

/*/{Protheus.doc} Oms010Calc
Rotina de calculo do fator de acrescimo/descrescimo
@author Henry Fila
@since 01/04/2001
@version 1.0
@return numerico, valor de fator de acrescimo/descrescimo
/*/

Function Oms010Calc()

Local aArea			:= GetArea()
Local cCampo		:= ReadVar()
Local nRetorno		:= 0
Local nPrecoOri		:= 0
Local nPosPreco		:= 0
Local nPosProd		:= 0
Local nPMoeda		:= 0
Local nPPrcTab		:= 0
Local nPVlrDes		:= 0
Local nPPerDes		:= 0
Local nPPrcBas		:= 0
Local nPreco		:= 0
Local nProd			:= 0
Local nMoeda		:= 0
Local nPrcTab		:= 0
Local nVlrDes		:= 0
Local nPerDes		:= 0
Local nPrcBas		:= 0
Local nBkp			:= 0
Local nAux			:= 0
Local oStruDA1
Local oModel
Local oModelDA1

oModel := FWModelActive()
oModelDA1 := oModel:GetModel("DA1DETAIL")

oStruDA1:= FWFormStruct(1,'DA1')
	
nPreco 	 := oModelDA1:GetValue("DA1_PRCVEN")
nProd 	 := oModelDA1:GetValue("DA1_CODPRO")
nMoeda   := oModelDA1:GetValue("DA1_MOEDA")
nPrcTab  := oModelDA1:GetValue("DA1_PRCBAS")
nVlrDes  := oModelDA1:GetValue("DA1_VLRDES")
nPerDes  := oModelDA1:GetValue("DA1_PERDES")
nPrcBas  := oModelDA1:GetValue("DA1_PRCBAS")

Do Case
Case cCampo == "M->DA1_VLRDES" .AND. !Empty(nPrcBas)

    If nMoeda <= MoedFin()

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Parametro que indica qual sera a moeda do preco base na tabela de precos³
		//³                             1-Moeda 1 (DEFAULT)                        ³
		//³                             2-Moeda da linha de itens da tabela        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SuperGetMv("MV_MPRCBAS",.F.,"1") == "1"
			nPrecoOri := xMoeda(nPrcTab,1,nMoeda)
		Else
			nPrecoOri := nPrcTab
		Endif

		If ( ( nPrecoOri - nVlrDes ) > 0 )
				nPreco := nPrecoOri - nVlrDes
				oModel:LoadValue("DA1DETAIL","DA1_PRCVEN",NoRound(nPreco, oStruDA1:GetProperty("DA1_PRCVEN",MODEL_FIELD_DECIMAL)))
				oModel:LoadValue("DA1DETAIL","DA1_PERDES",NoRound((nPreco/nPrecoOri),oStruDA1:GetProperty("DA1_PERDES",MODEL_FIELD_DECIMAL)))
			nRetorno := M->DA1_VLRDES
		Else
			nRetorno := 0
		EndIf
	Endif
Case cCampo =="M->DA1_PERDES" .AND. !Empty(nPrcBas)

	If nMoeda <= MoedFin()

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Parametro que indica qual sera a moeda do preco base na tabela de precos³
		//³                             1-Moeda 1 (DEFAULT)                        ³
		//³                             2-Moeda da linha de itens da tabela        ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If SuperGetMv("MV_MPRCBAS",.F.,"1") == "1"
			nPrecoOri := xMoeda(nPrcTab,1,nMoeda)
		Else
			nPrecoOri := nPrcTab
		Endif

		If ( nPrecoOri > 0 )
			oModel:LoadValue("DA1DETAIL","DA1_PRCVEN",NoRound(nPrecoOri * If(nPerDes == 0,1,nPerDes),oStruDA1:GetProperty("DA1_PRCVEN",MODEL_FIELD_DECIMAL)))
			nRetorno := FwFldGet("DA1_PERDES")
		Else
			nRetorno := 0
		EndIf
		If nPVlrDes<>0
			oModel:LoadValue("DA1DETAIL","DA1_VLRDES",0)
		EndIf
	Endif
Case cCampo =="M->DA1_MOEDA"
	If !IsIncallStack("FWMILEIMPORT")
		oModel:LoadValue("DA1DETAIL","DA1_PRCVEN",0)
		oModel:LoadValue("DA1DETAIL","DA1_VLRDES",0)
		oModel:LoadValue("DA1DETAIL","DA1_PERDES",0)
	Else
		nRetorno:= oModel:GetValue("DA1DETAIL","DA1_PRCVEN")
	EndIf
EndCase

Return(nRetorno)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010LOk ³ Autor ³ Henry Fila            ³ Data ³ 01/04/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina de Validacao da linha Ok                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010Lok())                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Lok()

Local aArea     := GetArea()
Local lRetorno  := .T.
Local nPosProd  := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_CODPRO"})
Local nPosGrupo := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_GRUPO"})
Local nPosFaixa := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_QTDLOT"})
Local nPosPrcVen:= aScan(aHeader,{|x| AllTrim(x[2])=="DA1_PRCVEN"})
Local nPosPrcDes:= aScan(aHeader,{|x| AllTrim(x[2])=="DA1_VLRDES"})
Local nPosFator := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_PERDES"})
Local nPosTab   := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_CODTAB"})
Local nPosUF    := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_ESTADO"})
Local nPosTpOpe := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_TPOPER"})
Local nPosDtVig := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_DATVIG"})
Local nPosRefGr := aScan(aHeader,{|x| AllTrim(x[2])=="DA1_REFGRD"})
Local nUsado    := Len(aHeader)
Local nX        := 0
Local lGrade    := MaGrade() .And. !Empty(nPosProd)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica os campos obrigatorios                                         ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !aCols[n,nUsado+1]
	Do Case
	Case nPosFaixa == 0 .Or. nPosPrcVen == 0
		lRetorno := .F.
		Help(" ",1,"OBRIGAT",,RetTitle("DA1_CODPRO")+","+RetTitle("DA1_QTDLOT")+","+RetTitle("DA1_PRCVEN"),4)
	Case (nPosProd > 0 .And. Empty(aCols[n,nPosProd]))
		If nPosRefGr >0
			If Empty(aCols[n,nPosRefGr])
				If nPosGrupo == 0
					lRetorno := .F.
					Help(" ",1,"OBRIGAT",,RetTitle("DA1_CODPRO"),4)
				ElseIf Empty(aCols[n,nPosGrupo])
					lRetorno := .F.
					Help(" ",1,"OBRIGAT",,RetTitle("DA1_CODPRO")+","+RetTitle("DA1_GRUPO"),4)
				EndIf
			Endif
		Else
			If nPosGrupo == 0
				lRetorno := .F.
				Help(" ",1,"OBRIGAT",,RetTitle("DA1_CODPRO"),4)
			ElseIf Empty(aCols[n,nPosGrupo])
				lRetorno := .F.
				Help(" ",1,"OBRIGAT",,RetTitle("DA1_CODPRO")+","+RetTitle("DA1_GRUPO"),4)
			EndIf
		Endif
	Case Empty(aCols[n,nPosFaixa])
		lRetorno := .F.
		Help(" ",1,"OBRIGAT",,RetTitle("DA1_QTDLOT"),4)
	Case nPosTab > 0
		If Empty(aCols[n,nPosTab])
			lRetorno := .F.
			Help(" ",1,"OBRIGAT",,RetTitle("DA1_CODTAB"),4)
		Endif
	Case lGrade .And. MatGrdPrrf(aCols[n,nPosProd])
		IF aCols[n,nPosPrcVen] == 0 .And. ;
		   aCols[n,nPosPrcDes] == 0 .And. ;
		   aCols[n,nPosFator] == 0
			lRetorno := .F.
			Help(" ",1,"OBRIGAT",,RetTitle("DA1_PRCVEN"),4)
		EndIf
	EndCase
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se nao ha valores duplicados                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRetorno
		If nPosTab == 0
			For nX := 1 To Len(aCols)
				If nX <> N .And. !aCols[nX,nUsado+1]
					If (nPosProd == 0 .Or. (aCols[nX,nPosProd] == aCols[N,nPosProd] .And. !Empty(aCols[N,nPosProd]))) .And.;
							aCols[nX,nPosFaixa] == aCols[N,nPosFaixa] .And.;
							IIf(nPosTpOpe<>0,aCols[nX,nPosTpOpe] == aCols[N,nPosTpOpe],.F.) .And.;
							IIf(nPosUf<>0,aCols[nX,nPosUf] == aCols[N,nPosUf],.F.) .And.;
							Iif(nPosDtVig<>0,aCols[nX,nPosDtVig] == aCols[N,nPosDtVig],.F.)
						lRetorno := .F.
						Help(" ",1,"JAGRAVADO")
					ElseIf nPosGrupo > 0
						If (aCols[nX,nPosGrupo] == aCols[N,nPosGrupo] .And. !Empty(aCols[N,nPosGrupo])) .And.;
								aCols[nX,nPosFaixa] == aCols[N,nPosFaixa] .And.;
								IIf(nPosTpOpe<>0,aCols[nX,nPosTpOpe] == aCols[N,nPosTpOpe],.F.) .And.;
								IIf(nPosUf<>0,aCols[nX,nPosUf] == aCols[N,nPosUf],.F.) .And.;
								Iif(nPosDtVig<>0,aCols[nX,nPosDtVig] == aCols[N,nPosDtVig],.F.) .Or. ;
								(nPosRefGr >0 .And. aCols[nX,nPosRefGr] == aCols[N,nPosRefGr] .And. !Empty(aCols[N,nPosRefGr])) .And.;
								aCols[nX,nPosFaixa] == aCols[N,nPosFaixa] .And.;
								IIf(nPosTpOpe<>0,aCols[nX,nPosTpOpe] == aCols[N,nPosTpOpe],.F.) .And.;
								IIf(nPosUf<>0,aCols[nX,nPosUf] == aCols[N,nPosUf],.F.) .And.;
								Iif(nPosDtVig<>0,aCols[nX,nPosDtVig] == aCols[N,nPosDtVig],.F.)
							lRetorno := .F.
							Help(" ",1,"JAGRAVADO")
						EndIf
					ElseIf nPosGrupo == 0
						If (nPosRefGr >0 .And. aCols[nX,nPosRefGr] == aCols[N,nPosRefGr] .And. !Empty(aCols[N,nPosRefGr])) .And.;
							aCols[nX,nPosFaixa] == aCols[N,nPosFaixa] .And.;
							IIf(nPosTpOpe<>0,aCols[nX,nPosTpOpe] == aCols[N,nPosTpOpe],.F.) .And.;
							IIf(nPosUf<>0,aCols[nX,nPosUf] == aCols[N,nPosUf],.F.) .And.;
							Iif(nPosDtVig<>0,aCols[nX,nPosDtVig] == aCols[N,nPosDtVig],.F.)
							lRetorno := .F.
							Help(" ",1,"JAGRAVADO")
						EndIf
					EndIf
				EndIf
			Next nX
		Else
			For nX := 1 To Len(aCols)
				If nX <> N .And. !aCols[nX,nUsado+1]
					If ( nPosProd==0 .Or. aCols[nX,nPosProd] == aCols[N,nPosProd]) .And.;
							aCols[nX,nPosFaixa] == aCols[N,nPosFaixa] .And.;
							aCols[nX,nPosTab] == aCols[N,nPosTab] .And.;
							IIf(nPosTpOpe<>0,aCols[nX,nPosTpOpe] == aCols[N,nPosTpOpe],.F.) .And.;
							IIf(nPosUf<>0,aCols[nX,nPosUf] == aCols[N,nPosUf],.F.) .And.;
							Iif(nPosDtVig<>0,aCols[nX,nPosDtVig] == aCols[N,nPosDtVig],.F.)
						lRetorno := .F.
						Help(" ",1,"JAGRAVADO")
					EndIf
				EndIf
			Next nX
		EndIf
	EndIf
EndIf

If lRetorno
	If ExistBlock("OM010LOK")
		lRetorno := ExecBlock("OM010LOK",.F.,.F.)
	Endif
Endif

RestArea(aArea)
Return(lRetorno)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010TOk ³ Autor ³ Henry Fila            ³ Data ³ 01/04/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina de Validacao da confirmacao da tabela                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010Tok())                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Tok()

Local lRet  	:= .T.
Local aArea 	:= GetArea()
Local aAreaDA0 	:= DA0->(GetArea())
Local nPosPreco	:= aScan(aHeader,{|x|AllTrim(x[2])=="DA1_PRCVEN"})
Local nPosItem	:= aScan(aHeader,{|x|AllTrim(x[2])=="DA1_ITEM"})
Local nX		:= 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se estiver sendo executado a partir do loja, nao permite³
//³cadastrar preco zerado                                  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCenVenda
	For nX := 1 to Len(aCols)
		If !aTail(aCols[nX]) .AND. aCols[nX,nPosPreco] <= 0
			lRet := .F.
			MsgStop(STR0024 + aCols[nX,nPosItem]) //"Não é permitido cadastrar produtos com preço de venda zerado. Corrija o item "
			Exit
		EndIf
	Next nX
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada para validacao da confirmacao da tabela de preco       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If ExistBlock("OM010TOK")
	lRet := ExecBlock("OM010TOK",.F.,.F.)
Endif

RestArea(aAreaDA0)
RestArea(aArea)

Return(lRet)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010TCOk³ Autor ³ Henry Fila            ³ Data ³ 01/04/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina de Validacao da confirmacao da copia da tabela         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010Tok())                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010TCok()

Local lRet  	:= .T.
Local aArea 	:= GetArea()
Local aAreaDA0	:= DA0->(GetArea())

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada para validacao da confirmacao da tabela de preco       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

DA0->(dbSetOrder(1))
If DA0->(MsSeek(xFilial("DA0")+M->DA0_CODTAB))
	lRet := .F.
	Help(" ",1,"JAGRAVADO")
Endif

If lRet
	If ExistBlock("OM010TOK")
		lRet := ExecBlock("OM010TOK",.F.,.F.)
	Endif
Endif

RestArea(aAreaDA0)
RestArea(aArea)

Return(lRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Oms010Rej  ³ Autor ³Eduardo Riera          ³ Data ³03.05.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Reajuste das tabelas de precos                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Arquivo                                     ³±±
±±³          ³ExpN2: Numero do Registro                                   ³±±
±±³          ³ExpN3: Opcao do aRotina                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Rej(cAlias,nReg,nOpc)

Local aArea := GetArea()
Local nOpcA := 0

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis de parametrizacao de lancamentos    ³
//³                                                      ³
//³ MV_PAR01 Produto inicial?                            ³
//³ MV_PAR02 Produto final  ?                            ³
//³ MV_PAR03 Grupo inicial  ?                            ³
//³ MV_PAR04 Grupo final    ?                            ³
//³ MV_PAR05 Tipo inicial   ?                            ³
//³ MV_PAR06 Tipo final     ?                            ³
//³ MV_PAR07 Tabela inicial ?                            ³
//³ MV_PAR08 Tabela final   ?                            ³
//³ MV_PAR09 Fator          ?                            ³
//³ MV_PAR10 Numero decimais?                            ³
//³ MV_PAR11 Pedido em Carteira? Sim/Nao                 ³
//³ MV_PAR12 Reaplicar fator?                            ³
//³ MV_PAR13 Planilha                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

SetKey(VK_F12,{|| Nil })

Pergunte("OMS011",.F.)
FormBatch(OemToAnsi(STR0008),{OemToAnsi(STR0009),OemToAnsi(STR0010)},;
				{{5,.T.,{|o| Pergunte("OMS011",.T.) }},;
				{1,.T.,{|o| nOpcA:=1,o:oWnd:End()}  },;
				{2,.T.,{|o| o:oWnd:End() }}})
If ( nOpcA == 1 )
	Begin Transaction
		Processa({|| Oms010Proc()})
	End Transaction	
EndIf

SetKey(VK_F12,{|| Pergunte("OMS010",.T.)})

RestArea(aArea)
Return(.F.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Oms010Proc ³ Autor ³Eduardo Riera          ³ Data ³03.05.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Processamento da tabela de preco                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Proc()

Local aArea     := GetArea()
Local aParam    := {}
Local aAtuPrV   := {}

Local cQuery    := ""
Local cArqInd   := ""
Local cAliasSC9	:= "SC9"
Local cCursor   := "DA1"
Local cCursorSC6:= "SC6"
Local cCursorSCK:= "SCK"
Local cUltProc  := ""

Local lQuery    := .F.
Local lContinua := .F.
Local lAtualiza := .F.
Local lReajSC9  := GetNewPar("MV_REAJSC9",.F.)
Local lOM010VLD := ExistBlock("OM010VLD")
Local nIndex    := 0
Local nLoop     := 0
Local nPPrUnit  := 0
Local nPPrcVen  := 0
Local nPValDesc := 0
Local nPDesc    := 0
Local nPValor   := 0
Local nQtdLib   := 0
Local nX        := 0

Local cPrdRefde := ""
Local cPrdRefAte:= ""
Local lAtual	:= .T.    
Local aTabEC  	:= {} //Array de tabelas e-commerce
Local lEComm	:= SuperGetMV("MV_LJECOMM",,.F.) //e-commerce?
Local aAreaDA0	:= {}

Local cFilialSB1 := xFilial("SB1")			//Filial da SB1
Local cFilialDA1 := xFilial("DA1")			//Filial da SB1
Local lOM010REJ	 := ExistBlock("OM010REJ")
Local lOM010ATUA := ExistBlock("OM010ATUA")
Local lOM010SC6	 := ExistBlock("OM010SC6")

PRIVATE aHeader := {}
PRIVATE aCols   := {}
PRIVATE N       := 1
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis de parametrizacao de lancamentos    ³
//³                                                      ³
//³ MV_PAR01 Produto inicial?                            ³
//³ MV_PAR02 Produto final  ?                            ³
//³ MV_PAR03 Grupo inicial  ?                            ³
//³ MV_PAR04 Grupo final    ?                            ³
//³ MV_PAR05 Tipo inicial   ?                            ³
//³ MV_PAR06 Tipo final     ?                            ³
//³ MV_PAR07 Tabela inicial ?                            ³
//³ MV_PAR08 Tabela final   ?                            ³
//³ MV_PAR09 Fator          ?                            ³
//³ MV_PAR10 Numero decimais?                            ³
//³ MV_PAR11 Pedido em Carteira? Sim/Nao                 ³
//³ MV_PAR12 Reaplicar fator?                            ³
//³ MV_PAR13 Planilha       ?                            ³
//³ MV_PAR14 Atualiza Preco Venda Produto ? Nao/Sim      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Salva parametros da rotina                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aParam := {}
For nLoop := 1 To 20
	AAdd( aParam, &( "MV_PAR" + StrZero( nLoop, 2 ) ) )
Next nLoop

If lOM010VLD
   lRet := ExecBlock("OM010VLD",.F.,.F.,{aParam})
   If ! lRet
      Return
   Endif
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Processa a atualizacao da tabela de preco             ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("DA1")
dbSetOrder(1)

#IFDEF TOP
	If TcSrvType()<>"AS/400"
		cCursor:= "Oms010Rej"
		lQuery := .T.
		cQuery := "SELECT DA1.* "
		cQuery += "FROM "+RetSqlName("DA1")+" DA1 "
		cQuery += "WHERE DA1.DA1_FILIAL='"+xFilial("DA1")+"' "
		cQuery += "AND ((DA1.DA1_CODPRO >= '"+MV_PAR01+"' "
		cQuery += "AND DA1.DA1_CODPRO <= '"+MV_PAR02+"' "
		cQuery += "AND DA1.DA1_GRUPO = '"+Space(Len(DA1->DA1_GRUPO))+"') "
		cQuery += "OR (DA1.DA1_CODPRO = '"+Space(Len(DA1->DA1_CODPRO))+"' "
		cQuery += "AND DA1.DA1_GRUPO >= '"+MV_PAR03+"' "
		cQuery += "AND DA1.DA1_GRUPO <= '"+MV_PAR04+"') "
		If MaGrade()
			cQuery += "OR (DA1.DA1_CODPRO = '"+Space(Len(DA1->DA1_CODPRO))+"' "
			cQuery += "AND DA1.DA1_GRUPO = '" +Space(Len(DA1->DA1_GRUPO))+"' "
			cQuery += "AND DA1.DA1_REFGRD >= '"+cPrdRefDe+"' "
			cQuery += "AND DA1.DA1_REFGRD <= '"+cPrdRefAte+"') "
		Endif
		cQuery += " ) "
		cQuery += "AND DA1.DA1_CODTAB >= '"+MV_PAR07+"'  "
		cQuery += "AND DA1.DA1_CODTAB <= '"+MV_PAR08+"'  "
		cQuery += "AND DA1.D_E_L_E_T_=' ' "
		cQuery += "ORDER BY "+SqlOrder(DA1->(IndexKey(2)))

		If lOM010REJ
			cQuery := ExecBlock("OM010REJ",.F.,.F.,{cQuery})
		Endif
		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursor,.T.,.T.)
	Else
#ENDIF
		cArqInd	:= CriaTrab(,.F.)
		cQuery := "DA1_FILIAL=='"+xFilial("DA1")+"' "
		cQuery += ".AND. ((DA1_CODPRO>='"+MV_PAR01+"' "
		cQuery += ".AND. DA1_CODPRO<='"+MV_PAR02+"'  "
		cQuery += ".AND. DA1_GRUPO=='"+Space(Len(DA1->DA1_GRUPO))+"')  "
		cQuery += ".OR. (DA1_CODPRO=='"+Space(Len(DA1->DA1_CODPRO))+"'  "
		cQuery += ".AND. DA1_GRUPO>='"+MV_PAR03+"' "
		cQuery += ".AND. DA1_GRUPO<='"+MV_PAR04+"') "
		cQuery += " ) "
		cQuery += ".AND. DA1_CODTAB>='"+MV_PAR07+"' "
		cQuery += ".AND. DA1_CODTAB<='"+MV_PAR08+"'"

		IndRegua("DA1",cArqInd,IndexKey(),,cQuery)
		nIndex := RetIndex("DA1")
		#IFNDEF TOP
			dbSetIndex(cArqInd+OrdBagExt())
		#ENDIF
		dbSetOrder(nIndex+1)
		dbGotop()
#IFDEF TOP
	EndIf
#ENDIF
ProcRegua(DA1->(LastRec()))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define variaveis de parametrizacao de lancamentos    ³
//³                                                      ³
//³ MV_PAR01 Produto inicial?                            ³
//³ MV_PAR02 Produto final  ?                            ³
//³ MV_PAR03 Grupo inicial  ?                            ³
//³ MV_PAR04 Grupo final    ?                            ³
//³ MV_PAR05 Tipo inicial   ?                            ³
//³ MV_PAR06 Tipo final     ?                            ³
//³ MV_PAR07 Tabela inicial ?                            ³
//³ MV_PAR08 Tabela final   ?                            ³
//³ MV_PAR09 Fator          ?                            ³
//³ MV_PAR10 Numero decimais?                            ³
//³ MV_PAR11 Pedido em Carteira? Sim/Nao                 ³
//³ MV_PAR12 Reaplicar fator?                            ³
//³ MV_PAR13 Planilha       ?                            ³
//³ MV_PAR14 Atualiza Preco Venda Produto ? Nao/Sim      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Salva parametros da rotina                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

aParam := {}
For nLoop := 1 To 20
	AAdd( aParam, &( "MV_PAR" + StrZero( nLoop, 2 ) ) )
Next nLoop

dbSelectArea("SB1")
dbSetOrder(1)
dbSelectArea(cCursor)
While ( !Eof() )
	lContinua := .F.
	If !Empty((cCursor)->DA1_CODPRO)
		If 	(cCursor)->DA1_CODPRO >= aParam[1] .And.;
			(cCursor)->DA1_CODPRO <= aParam[2] .And.;
			(cCursor)->DA1_CODTAB >= aParam[7] .And.;
			(cCursor)->DA1_CODTAB <= aPAram[8]

			If SB1->(MsSeek(cFilialSB1+(cCursor)->DA1_CODPRO))
				If 	SB1->B1_GRUPO >= aParam[3] .And. ;
					SB1->B1_GRUPO <= aParam[4] .And. ;
					SB1->B1_TIPO >= aParam[5] .And. ;
					SB1->B1_TIPO <= aParam[6]

					lContinua := .T.
				EndIf
			EndIf
		EndIf
	Else
		lContinua := .T.
	EndIf
	If lContinua
		If (cCursor)->DA1_CODTAB+(cCursor)->DA1_CODPRO+(cCursor)->DA1_GRUPO +(cCursor)->DA1_REFGRD == cUltProc
			lContinua := .F.
		EndIf
	EndIf
	If lContinua
		MaRejTabPrc((cCursor)->DA1_CODTAB,(cCursor)->DA1_CODPRO,aParam[9],aParam[10],aParam[12]==1, aParam[13], @aAtuPrV,(cCursor)->DA1_GRUPO,(cCursor)->DA1_REFGRD,cFilialDA1,cFilialSB1)
		lAtualiza := .T.
		If (lEComm) .and. aSCan(aTabEC, { |t| t == (cCursor)->DA1_CODTAB}) = 0
			aAdd(aTabEC, (cCursor)->DA1_CODTAB )
		EndIf
	EndIf
	cUltProc := (cCursor)->DA1_CODTAB+(cCursor)->DA1_CODPRO+(cCursor)->DA1_GRUPO+(cCursor)->DA1_REFGRD
	dbSelectArea(cCursor)
	dbSkip()
	IncProc(OemtoAnsi(STR0011))
EndDo
If lQuery
	dbSelectarea(cCursor)
	dbCloseArea()
	dbSelectArea("DA1")
Else
	dbSelectArea("DA1")
	RetIndex("DA1")
	Ferase(cArqInd+OrdBagExt())
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Processa a atualizacao das tabelas e-commerce           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lEComm .and. Len(aTabEC) > 0  
	aAreaDA0 := DA0->(GetArea())
	DA0->(DbSetOrder(1)) //DA0_FILIAL + DA0_CODTAB
	For nX := 1 to Len(aTabEC)
		If DA0->(DbSeek( xFilial("DA0") + aTabEC[nX])) .AND. !Empty(DA0->DA0_ECFLAG)
			RecLock("DA0", .F.)
			DA0->DA0_ECDTEX := ""
			DA0->DA0_ECSEQ := ""  		
			DA0->(MsUnLock())
		EndIf
	Next
	RestArea(aAreaDA0)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Atualiza Preco de Venda do Produto³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SB1")
dbSetOrder(1)
For nX := 1 To Len(aAtuPrV)
	If SB1->(MsSeek(cFilialSB1+aAtuPrV[nX,1]))
		RecLock("SB1",.F.)
		SB1->B1_PRV1 := aAtuPrV[nX,2]
		MsUnLock()
	EndIf
Next nX
aAtuPrV := {}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Processa a atualizacao dos pedidos de venda           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If aParam[11] == 1 .And. lAtualiza
	ProcRegua(SC6->(LastRec()))
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Montagem do aHeader para utilizacao da funcoes do PV  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aHeader := {}
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("SC6")
	While ( !Eof() .And. (SX3->X3_ARQUIVO == "SC6") )
		If ( X3USO(SX3->X3_USADO) .And.;
				!(	Trim(SX3->X3_CAMPO) == "C6_NUM" ) 	.And.;
				Trim(SX3->X3_CAMPO) <> "C6_QTDEMP" 	.And.;
				Trim(SX3->X3_CAMPO) <> "C6_QTDENT" 	.And.;
				cNivel >= SX3->X3_NIVEL )
			Aadd(aHeader,{ TRIM(X3Titulo()),;
				SX3->X3_CAMPO,;
				SX3->X3_PICTURE,;
				SX3->X3_TAMANHO,;
				SX3->X3_DECIMAL,;
				SX3->X3_VALID,;
				SX3->X3_USADO,;
				SX3->X3_TIPO,;
				SX3->X3_ARQUIVO,;
				SX3->X3_CONTEXT } )
		EndIf
		dbSelectArea("SX3")
		dbSkip()
	EndDo

	dbSelectArea("SC6")
	dbSetOrder(1)

	#IFDEF TOP	
		lQuery := .T.
		cCursorSC6 := "OMS010REJ"
		cQuery := "SELECT SC6.C6_NUM,C6_ITEM,SC6.C6_FILIAL,SC6.R_E_C_N_O_ SC6RECNO,SC5.R_E_C_N_O_ SC5RECNO "
		cQuery += "FROM "+RetSqlName("SC6")+" SC6, "
		cQuery += RetSqlName("SB1")+" SB1, "
		cQuery += RetSqlName("SC5")+" SC5  "
		cQuery += "WHERE SC6.C6_FILIAL='"+xFilial("SC6")+"' AND "
		cQuery += "SC6.C6_QTDVEN-SC6.C6_QTDENT>0 AND "
		cQuery += "SC6.C6_BLQ NOT IN ('R ') AND "
		cQuery += "SC6.C6_PRUNIT <> 0 AND "
		cQuery += "SC6.C6_PRODUTO>='"+aParam[01]+"' AND "
		cQuery += "SC6.C6_PRODUTO<='"+aParam[02]+"' AND "
		cQuery += "SC6.D_E_L_E_T_ = ' ' AND "
		cQuery += "SB1.B1_FILIAL='"+xFilial("SB1")+"' AND "
		cQuery += "SB1.B1_COD = SC6.C6_PRODUTO AND "
		cQuery += "SB1.B1_GRUPO>='"+aParam[03]+"' AND "
		cQuery += "SB1.B1_GRUPO<='"+aParam[04]+"' AND "
		cQuery += "SB1.B1_TIPO>='"+aParam[05]+"' AND "
		cQuery += "SB1.B1_TIPO<='"+aParam[06]+"' AND "
		cQuery += "SB1.D_E_L_E_T_ = ' ' AND "
		cQuery += "SC5.C5_FILIAL='"+xFilial("SC5")+"' AND "
		cQuery += "SC5.C5_NUM = SC6.C6_NUM AND "
		cQuery += "SC5.C5_TABELA>='"+aParam[07]+"' AND "
		cQuery += "SC5.C5_TABELA<='"+aParam[08]+"' AND "
		cQuery += "SC5.C5_TIPO NOT IN ('C','I','P') AND "
		cQuery += "SC5.D_E_L_E_T_ = ' ' "

		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursorSC6)
	
	#ELSE
		MsSeek(xFilial("SC6"))
	#ENDIF

	While !Eof() .And. xFilial("SC6") == (cCursorSC6)->C6_FILIAL
		lAtualiza := .F.
		If !lQuery
			If (cCursorSC6)->C6_BLQ <> 'R  ' .And.;
				(cCursorSC6)->C6_PRUNIT <> 0 .And.;
				(cCursorSC6)->C6_QTDVEN-(cCursorSC6)->C6_QTDENT > 0 .And.;
				(cCursorSC6)->C6_PRODUTO >= aParam[01] .And.;
				(cCursorSC6)->C6_PRODUTO <= aParam[02]
				SB1->(dbSetOrder(1))
				SB1->(MsSeek(xFilial("SB1")+(cCurSorSC6)->C6_PRODUTO))
				SC5->(dbSetOrder(1))
				SC5->(MsSeek(xFilial("SC5")+(cCurSorSC6)->C6_NUM))
				If !SC5->C5_TIPO $ "CIP" .And.;
					SB1->B1_GRUPO >= aParam[03] .And.;
					SB1->B1_GRUPO <= aParam[04] .And.;
					SB1->B1_TIPO >= aParam[05] .And.;
					SB1->B1_TIPO <= aParam[06] .And.;
					SC5->C5_TABELA >= aParam[07] .And.;
					SC5->C5_TABELA <= aParam[08]
					lAtualiza := .T.
				EndIf
			EndIf
		Else
			SC5->(MsGoto((cCursorSC6)->SC5RECNO))
			SC6->(MsGoto((cCursorSC6)->SC6RECNO))
			lAtualiza := .T.
		EndIf
	 	//Ponto de entrada para verificar se vai atualizar os preços dos pedidos em carteira. O ponto deve retornar .T. ou .F.
		//E vai atualizar ou nao as tabelas SC6 e SC9
		If lOM010ATUA
			lAtual := ExecBlock("OM010ATUA",.F.,.F.)
			If ValType(lAtual) <> "L"
				lAtual := .T.
			EndIf
		EndIf
	 	If lAtualiza .And. lAtual
	 		Begin Transaction
	 		If RecLock("SC5")
	 			RegToMemory("SC5",.F.,.F.)
	 			If RecLock("SC6")
	 				aCols := {}
	 				aadd(aCols,Array(Len(aHeader)+1))
	 				aCols[1,Len(aHeader)+1] := .F.
	 				For nLoop := 1 To Len(aHeader)
		 					Do Case
	 							Case AllTrim(aHeader[nLoop,2]) == "C6_PRUNIT"
	 								nPPrUnit := nLoop
	 							Case AllTrim(aHeader[nLoop,2]) == "C6_PRCVEN"
	 								nPPrcVen := nLoop
	 							Case AllTrim(aHeader[nLoop,2]) == "C6_VALDESC"
	 								nPValDesc := nLoop
	 							Case AllTrim(aHeader[nLoop,2]) == "C6_DESCONT"
		 							nPDesc := nLoop
	 							Case AllTrim(aHeader[nLoop,2]) == "C6_VALOR"
		 							nPValor:= nLoop
		 					EndCase
		 					If aHeader[nLoop,10] <> "V"
		 						aCols[1,nLoop] := SC6->(FieldGet(FieldPos(aHeader[nLoop,2])))
		 					Endif
	 					Next nLoop
	 				M->C6_PRUNIT := MaTabPrVen(SC5->C5_TABELA,SC6->C6_PRODUTO,1,SC5->C5_CLIENTE,SC5->C5_LOJACLI,SC5->C5_MOEDA,SC5->C5_EMISSAO)
					A410MultT("C6_PRUNIT",M->C6_PRUNIT)
	 				aCols[1,nPPrunit] := M->C6_PRUNIT
	 				SC6->C6_PRUNIT     := aCols[1,nPPrUnit]
	 				SC6->C6_PRCVEN     := aCols[1,nPPrcVen]
	 				SC6->C6_VALDESC    := aCols[1,nPValDesc]
	 				SC6->C6_DESCONT    := aCols[1,nPDesc]
	 				SC6->C6_VALOR      := aCols[1,nPValor]

					//ponto de entrada para atualizacoes feitas pelo usuario
					If lOM010SC6
						ExecBlock("OM010SC6",.F.,.F.)
					Endif

	 				If lReajSC9
	 					dbSelectArea("SC9")
						dbSetOrder(1)
						#IFDEF TOP
							cAliasSC9 := GetNextAlias()
							cQuery := "SELECT SUM(C9_QTDLIB) C9_QTDLIB "
							cQuery += "FROM "+RetSqlName("SC9")+" SC9 "
							cQuery += "WHERE SC9.C9_FILIAL='"+xFilial("SC9")+"' AND "
							cQuery += "SC9.C9_PEDIDO='" +(cCurSorSC6)->C6_NUM+"' AND "
							cQuery += "SC9.C9_ITEM='"   +(cCurSorSC6)->C6_ITEM+"' AND "
							cQuery += "SC9.C9_NFISCAL='"+Space(Len(SC9->C9_NFISCAL))+"' AND "
							cQuery += "SC9.D_E_L_E_T_=' ' "

							cQuery := ChangeQuery(cQuery)

							dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSC9,.T.,.T.)
							nQtdLib := (cAliasSC9)->C9_QTDLIB
							dbCloseArea()
							dbSelectArea("SC9")
						
						#ELSE
							cAliasSC9 := "SC9"
							If MsSeek(xFilial("SC9")+(cCurSorSC6)->C6_NUM+(cCurSorSC6)->C6_ITEM)
								While !Eof() .And. (cAliasSC9)->C9_FILIAL == xFilial("SC9") .And.;
									(cAliasSC9)->C9_PEDIDO == (cCurSorSC6)->C6_NUM .And.;
									(cAliasSC9)->C9_ITEM   == (cCurSorSC6)->C6_ITEM
									If Empty((cAliasSC9)->C9_NFISCAL)
										nQtdLib += (cAliasSC9)->C9_QTDLIB
									EndIf
									dbSelectArea("SC9")
									dbSkip()
								EndDo
						 	EndIf
						#ENDIF
						MaAvalSC6("SC6",2,"SC5",.T.,.F.)
						SC6->C6_QTDLIB	:= nQtdLib
						nQtdLib := 0
						MaAvalSC6("SC6",1,"SC5",.T.,.F.)
				 	EndIf
				EndIf
			EndIf
			End Transaction
	 	EndIf
		dbSelectArea(cCursorSC6)
		dbSkip()
		IncProc(OemtoAnsi(STR0014)+": "+(cCursorSC6)->C6_NUM) //"Pedido"
	EndDo
	If lQuery
		dbSelectArea(cCursorSC6)
		dbCloseArea()
		dbSelectArea("SC6")
	EndIf

	If .f.

		dbSelectArea("SCK")
		dbSetOrder(1)
		#IFDEF TOP
			lQuery := .T.
			cCursorSCK := "OMS010REJ"
			cQuery := "SELECT SCK.CK_NUM,SCK.CK_FILIAL,SCK.R_E_C_N_O_ SCKRECNO,SCJ.R_E_C_N_O_ SCJRECNO "
			cQuery += "FROM "+RetSqlName("SCK")+" SCK, "
			cQuery += RetSqlName("SB1")+" SB1, "
			cQuery += RetSqlName("SCJ")+" SCJ  "
			cQuery += "WHERE SCK.CK_FILIAL='"+xFilial("SCK")+"' AND "
			cQuery += "SCK.CK_PRUNIT <> 0 AND "
			cQuery += "SCK.CK_PRODUTO>='"+aParam[01]+"' AND "
			cQuery += "SCK.CK_PRODUTO<='"+aParam[02]+"' AND "
			cQuery += "SCK.D_E_L_E_T_ = ' ' AND "
			cQuery += "SB1.B1_FILIAL='"+xFilial("SB1")+"' AND "
			cQuery += "SB1.B1_COD = SCK.CK_PRODUTO AND "
			cQuery += "SB1.B1_GRUPO>='"+aParam[03]+"' AND "
			cQuery += "SB1.B1_GRUPO<='"+aParam[04]+"' AND "
			cQuery += "SB1.B1_TIPO>='"+aParam[05]+"' AND "
			cQuery += "SB1.B1_TIPO<='"+aParam[06]+"' AND "
			cQuery += "SB1.D_E_L_E_T_ = ' ' AND "
			cQuery += "SCJ.CJ_FILIAL='"+xFilial("SCJ")+"' AND "
			cQuery += "SC5.CJ_NUM = SCK.CK_NUM AND "
			cQuery += "SCJ.CJ_TABELA>='"+aParam[07]+"' AND "
			cQuery += "SCJ.CJ_TABELA<='"+aParam[08]+"' AND "
			cQuery += "SCJ.CJ_TIPO NOT IN ('B','E') AND "
			cQuery += "SCJ.D_E_L_E_T_ = ' ' "

			cQuery := ChangeQuery(cQuery)

			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cCursorSCK)
		#ELSE
			MsSeek(xFilial("SCJ"))
		#ENDIF

		While !Eof() .And. xFilial("SCJ") == (cCursorSCK)->CK_FILIAL

			lAtualiza := .F.
			If !lQuery
				If 	(cCursorSCK)->CK_PRUNIT <> 0 .And.;
					(cCursorSCK)->CK_QTDVEN > 0 .And.;
					(cCursorSCK)->CK_PRODUTO >= aParam[01] .And.;
					(cCursorSCK)->CK_PRODUTO <= aParam[02]

					SB1->(dbSetOrder(1))
					SB1->(MsSeek(xFilial("SB1")+(cCurSorSCK)->CK_PRODUTO))
					SCK->(dbSetOrder(1))
					SCK->(MsSeek(xFilial("SCK")+(cCurSorSCK)->CK_NUM))
					If !SCK->CK_TIPO $ "CIP" .And.;
						SB1->B1_GRUPO >= aParam[03] .And.;
						SB1->B1_GRUPO <= aParam[04] .And.;
						SB1->B1_TIPO >= aParam[05] .And.;
						SB1->B1_TIPO <= aParam[06] .And.;
						SCK->CK_TABELA >= aParam[07] .And.;
						SCK->CK_TABELA <= aParam[08]
						lAtualiza := .T.
					EndIf


				Endif
			Endif

			dbSelectArea(cCursorSCK)
			dbSkip()
			IncProc(OemtoAnsi(STR0014)+": "+(cCursorSCK)->CK_NUM) //"Pedido"

		Enddo

	Endif
EndIf
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaRejTabPrc³ Autor ³ Eduardo Riera         ³ Data ³07.05.00 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina de reajuste da tabela de preco                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1: Numerico (Preco de Venda)                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Tabela de Preco                                      ³±±
±±³          ³ExpC2: Codigo do Produto                                    ³±±
±±³          ³ExpN3: Fator                                                ³±±
±±³          ³ExpN4: Decimais a serem consideradas                        ³±±
±±³          ³ExpL5: Aplica fator no preco base para calculo              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MaRejTabPrc(cCodTab,cCodPro,nFator,nDecimais,lFator,cPlanilha,aAtuPrV,cGrupo,cCodRef,cFilialDA1,cFilialSB1)

Local aArea    := GetArea()
Local aAreaDA0 := DA0->(GetArea())
Local aAreaDA1 := DA1->(GetArea())
Local nBase    := 0
Local nPrcAnt  := 0
Local lPReaj   := ExistBlock("OS010REJ")
Local nFtAplic := 0
Local lEComm   := SuperGetMV("MV_LJECOMM",,.F.)


DEFAULT nDecimais := TamSx3("DA1_PRCVEN")[2]
DEFAULT lFator    := .F.
DEFAULT cPlanilha := ""
DEFAULT cGrupo    := ""
DEFAULT aAtuPrV   := {}

If !Empty(cPlanilha)
	Pergunte("MTC010",.F.)
Endif

If !Empty(cCodPro)
	dbSelectArea("DA1")
	dbSetOrder(1)
	dbSelectArea("SB1")
	dbSetOrder(1)
	If DA1->(MsSeek(cFilialDA1+cCodTab+cCodPro))

		While !Eof() .And. DA1->DA1_FILIAL == cFilialDA1 .And.;
			DA1->DA1_CODTAB == cCodTab .And. DA1->DA1_CODPRO == cCodPro

			nBase   := DA1->DA1_PRCVEN
			nPrcAnt := DA1->DA1_PRCVEN
			nFtAplic:= nFator

			If lFator
				If SB1->(MsSeek(cFilialSB1+cCodPro))
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Atualiza pela planilha de formacao de precos          ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If !Empty(cPlanilha)
					 	nBase := MaPrcPlan(cCodPro,cPlanilha,cCodTab,nBase)
					Else
						nBase := SB1->B1_PRV1
					EndIf

					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Atualiza Preco de Venda Produto³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If mv_par14 == 2 .And. nFtAplic > 0
						If Len(aAtuPrV) > 0 .And. aAtuPrV[Len(aAtuPrV)][1] <> cCodPro
							aAdd(aAtuPrV,{cCodPro,NoRound(nBase * nFtAplic,nDecimais)})
						ElseIf Len(aAtuPrV) == 0
							aAdd(aAtuPrV,{cCodPro,NoRound(nBase * nFtAplic,nDecimais)})
						EndIf
					EndIf
			   	EndIf
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Atualiza pela planilha de formacao de precos          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !Empty(cPlanilha)
					nBase := MaPrcPlan(cCodPro,cPlanilha,cCodTab,nBase)
				EndIf
			EndIf

			If DA1->DA1_PERDES > 0
				nFtAplic*= DA1->DA1_PERDES
			EndIf

	        RecLock("DA1")
			DA1->DA1_PRCVEN := If(nFtAplic > 0, NoRound(nBase * nFtAplic,nDecimais), nBase )
			If lEComm .AND. !Empty(DA1->DA1_ECDTEX) .AND. !Empty(DA1->DA1_ECSEQ)  
				DA1->DA1_ECDTEX := ""
				DA1->DA1_ECSEQ  := ""
			EndIf

	        MsUnLock()

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Ponto de entrada para atualizacao de precos           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lPReaj
				ExecBlock("OS010REJ",.F.,.F.,{nPrcAnt, DA1->DA1_PRCVEN})
			Endif

			dbSelectArea("DA1")
			dbSkip()
		EndDo

	EndIf
Elseif !Empty(cGrupo)
	dbSelectArea("DA1")
	dbSetOrder(4)
	If MsSeek(xFilial("DA1")+cCodTab+cGrupo)

		While !Eof() .And. DA1->DA1_FILIAL == xFilial("DA1") .And.;
			DA1->DA1_CODTAB == cCodTab .And. DA1->DA1_GRUPO == cGrupo

			Begin Transaction

			nBase   := DA1->DA1_PRCVEN
			nPrcAnt := DA1->DA1_PRCVEN
			nFtAplic:= nFator

			If DA1->DA1_PERDES > 0
				nFtAplic*= DA1->DA1_PERDES
			EndIf

	        RecLock("DA1")
			DA1->DA1_PRCVEN := If(nFtAplic > 0, NoRound(nBase * nFtAplic,nDecimais), nBase )
			If lEComm .AND. !Empty(DA1->DA1_ECDTEX) .AND. !Empty(DA1->DA1_ECSEQ)  
				DA1->DA1_ECDTEX := ""
				DA1->DA1_ECSEQ  := ""
			EndIf

	        MsUnLock()

			End Transaction

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Ponto de entrada para atualizacao de precos           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lPReaj
				ExecBlock("OS010REJ",.F.,.F.,{nPrcAnt, DA1->DA1_PRCVEN})
			Endif

			dbSelectArea("DA1")
			dbSkip()
		EndDo

	EndIf
Elseif !Empty(cCodRef)
	dbSelectArea("DA1")
	dbSetOrder(5)
	If MsSeek(xFilial("DA1")+cCodTab+cCodRef)

		While !Eof() .And. DA1->DA1_FILIAL == xFilial("DA1") .And.;
			DA1->DA1_CODTAB == cCodTab .And. DA1->DA1_REFGRD == cCodRef

			Begin Transaction

			nBase   := DA1->DA1_PRCVEN
			nPrcAnt := DA1->DA1_PRCVEN
			nFtAplic:= nFator

			If DA1->DA1_PERDES > 0
				nFtAplic*= DA1->DA1_PERDES
			EndIf

	        RecLock("DA1")
			DA1->DA1_PRCVEN := If(nFtAplic > 0, NoRound(nBase * nFtAplic,nDecimais), nBase )
	        MsUnLock()

			End Transaction

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Ponto de entrada para atualizacao de precos           ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lPReaj
				ExecBlock("OS010REJ",.F.,.F.,{nPrcAnt, DA1->DA1_PRCVEN})
			Endif

			dbSelectArea("DA1")
			dbSkip()
		EndDo

	EndIf
EndIf

If !Empty(cPlanilha)
	Pergunte("OMS010",.F.)
Endif

RestArea(aAreaDA1)
RestArea(aAreaDA0)
RestArea(aArea)
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaPrcPlan  ³ Autor ³Henry Fila             ³ Data ³03.05.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Busca preco de acordo com a planilha de precos              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpC1: Produto                                              ³±±
±±³          ³ExpC2: Planilha                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Preco                                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function MaPrcPlan(cProduto,cPlanilha,cCodTab,nPreco)

Local aArray := {}
Local nX     := 0
Local nPos   := 0

Private cArqMemo   := cPlanilha
Private lDirecao   := .T.
Private nQualCusto := 1
Private cProg      := "R430"
Default nPreco := 0

If !Empty(cPlanilha)
	SB1->(dbSetOrder(1))
	If SB1->(MsSeek(xFilial("SB1")+cProduto))
		cArqMemo := cPlanilha
		If SuperGetMV("MV_REVPLAN",.F.,.F.)
			aArray := MC010Form2("SB1",SB1->(Recno()),98)	//Revisao Planilhas - utiliza tabela SCO e o STANDARD.PDV
	    Else
			aArray := MC010Forma("SB1",SB1->(Recno()),98)	//Forma Preços - utiliza somente o arquivo STANDARD.PDV
		EndIf
	EndIf
EndIf

If ValType(aArray) <> "A"
	aArray := {}
Endif

For nX := 1 To Len(aArray)
	nPos := At("#"+cCodTab,aArray[nX,3])
	If nPos > 0
		nPreco := aArray[nX,6]
		Exit
	EndIf
Next nX

If nPos == 0
	For nX := 1 To Len(aArray)
		nPos  := At("@",aArray[nX,3])
		If nPos > 0
			nPreco := aArray[nX,6]
			Exit
		EndIf
	Next nX
Endif


Return(nPreco)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MATABPRVEN ³ Autor ³ Henry Fila            ³ Data ³ 20.04.00³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Funcao para trazer preco de venda de acordo com a qtde      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpN1: Numerico (Preco de Venda)                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Tabela de Preco                                      ³±±
±±³          ³ExpC2: Codigo do Produto                                    ³±±
±±³          ³ExpN3: Quantidade                                           ³±±
±±³          ³ExpC4: Cliente                                              ³±±
±±³          ³ExpC5: Loja                                                 ³±±
±±³          ³ExpN6: Moeda a ser retornada                                ³±±
±±³          ³ExpD7:                                                      ³±±
±±³          ³ExpN8: Tipo                                                 ³±±
±±³          ³       1 = Preco (Default)                                  ³±±
±±³          ³       2 = Fator de acrescimo ou desconto                   ³±±
±±³          ³ExpL9:                                                      ³±±
±±³          ³ExpL10:                                                     ³±±
±±³          ³ExpL11:Se o cliente deve ser tratado como um prospect       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ 04/12/06 ³ Conrado Q.    ³ - BOPS: 111439: Criado parâmetro para atu  ³±±
±±³          ³               ³ alização das variáveis estáticas.          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MaTabPrVen(cTabPreco,cProduto,nQtde,cCliente,cLoja,nMoeda,dDataVld,nTipo,lExec,lAtuEstado,lProspect)

Static cMvEstado
Static cMvNorte

Local aArea     := GetArea()
Local aAreaSB1  := SB1->(GetArea())
Local aStruDA1  := {}

Local cTpOper   := ""
Local cQuery    := ""
Local cAliasDA1 := "DA1"

Local nPrcVen   := 0
Local nResult   := 0
Local nMoedaTab := 1
Local nScan     := 0
Local nY        := 0
Local cMascara  := SuperGetMv("MV_MASCGRD")
Local nTamProd  := Len(SB1->B1_COD)
Local nFator    := 0

Local lUltResult:= .T.
Local lQuery    := .F.
Local nProcessa := 0
Local lGrade    := MaGrade()
Local lGradeReal:= .F.
Local lPrcDA1   := .F.
Local cProdRef  := cProduto
Local lSeekDa1  := .F.
Local lLjcnvB0	:= SuperGetMv("MV_LJCNVB0",,.F.)		// Retorna preço da SB0 na ausência do preço do Produto na DA0 e DA1
Local lPOS 		:= Iif(FindFunction("STFIsPOS"), STFIsPOS(), .F.) //E Totvs Pdv?
Local lOM010EST	:= Iif(cPaisLoc != "TRI" .AND. ExistBlock("OM010ESTE",.F.,.F.),.T.,.F.) // PE no qual, através de um retorno lógico, o cliente seleciona se o estado do cliente será o informado no A1_EST ou A1_ESTE. 
Local lSA1EstE	:= .F.
Local lQtdCliVaz:= (nQtde == 0 .And. Empty(cCliente)) 
Local cFilDA1	:= xFilial("DA1")

DEFAULT cMvEstado := GetMv("MV_ESTADO")
DEFAULT cMvNorte  := GetMv("MV_NORTE")
DEFAULT nMoeda    := 1
DEFAULT aUltResult:= {}
DEFAULT dDataVld  := dDataBase
DEFAULT nTipo     := 1
DEFAULT lExec     := .T.
DEFAULT lAtuEstado:= .F.
DEFAULT lProspect := .F.

If cEmpAnt <> __cEmpDA1
	__cEmpDA1 := cEmpAnt
	oQryDA1Tb1 := Nil
	oQryDA1Tb2 := Nil
	oQryDA1Tb3 := Nil
	oQryDA1Tb4 := Nil
	oQryDA1Gd1 := Nil
	oQryDA1Gd2 := Nil
EndIf

If lAtuEstado
	cMvEstado	:= GetMv("MV_ESTADO")
	cMvNorte	:= GetMv("MV_NORTE")
Endif

If lOM010EST
	lSA1EstE := Execblock("OM010ESTE",.F.,.F.)
	If Valtype(lSA1EstE) != 'L'
		lSA1EstE := .F.
	EndIf
EndIf

If lGrade .And.	MatGrdPrrf(@cProdRef,.T.)
	nTamProd	:= Len(cProdRef)
	lGradeReal	:= .T.
	cProdRef	:= Padr(cProdRef,Len(DA1->DA1_REFGRD))
Endif

If IsInCallStack("MATA410")
	dDataVld := M->C5_EMISSAO
EndIf

If ExistBlock("OM010PRC") .And. lExec
	nResult := ExecBlock("OM010PRC",.F.,.F.,{cTabPreco,cProduto,nQtde,cCliente,cLoja,nMoeda,dDataVld,nTipo})
Else

	nScan := aScan(aUltResult,{|x| x[1] == cTabPreco .And.;
									x[2] == cProduto .And.;
									x[3] == nQtde .And.;
									x[4] == cCliente .And.;
									x[5] == cLoja .And.;
									x[6] == nMoeda .And.;
									x[7] == cFilAnt .And.;
									x[10] == lProspect})

	If nScan == 0

		If !(Empty(cCliente) .And. nQtde == 0 )
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Se for prospect, pega a informação do mesmo.            ³
			//³Funcionalidade implantada para utilização do televendas,³
			//³já que ele suporta orçamento para prospect.             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lProspect
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Acho o tipo de operacao para busca do preco de venda³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("SUS")
				dbSetOrder(1)
				If MsSeek(xFilial("SUS")+cCliente+cLoja)
					Do Case
						Case SUS->US_EST == cMvEstado
							cTpOper := "1"
						Case SUS->US_EST != cMvEstado
							If (SUS->US_EST $ cMvNorte) .And. !(cMvEstado $ cMvNorte)
								cTpOper := "3"
							Else
								cTpOper := "2"
							EndIf
					EndCase
				EndIf
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Acho o tipo de operacao para busca do preco de venda³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("SA1")
				dbSetOrder(1)
				If MsSeek(xFilial("SA1")+cCliente+cLoja)
					Do Case
						Case SA1->A1_EST == cMvEstado
							cTpOper := "1"
						Case SA1->A1_EST != cMvEstado
							If (SA1->A1_EST $ cMvNorte) .And. !(cMvEstado $ cMvNorte)
								cTpOper := "3"
							Else
								cTpOper := "2"
							EndIf
					EndCase
				EndIf
			EndIf
		Endif

		dbSelectarea("DA1")
		dbSetOrder(1)
		
		#IFDEF TOP
			If TcSrvType() <> "AS/400"
				cAliasDA1 := GetNextAlias()
				aStruDA1  := DA1->(dbStruct())
				cQuery    := ""
				lQuery	  := .T.

				If lGradeReal
					cQuery += "SELECT * FROM ( "
				EndIf

				cQuery += "SELECT " 
				cQuery += " * "
				cQuery += "FROM "+RetSqlName("DA1")+ " DA1 "
				cQuery += "WHERE "
				cQuery += "( DA1.DA1_DATVIG <= ? OR DA1.DA1_DATVIG = '"+Dtos(Ctod("//"))+ "' ) "
				
				If !lQtdCliVaz
					cQuery += "AND ( DA1.DA1_TPOPER = ? OR DA1.DA1_TPOPER = '4' ) "
				Endif
				
				cQuery += "AND DA1.DA1_FILIAL = ? AND "
				cQuery +=     "DA1.DA1_CODTAB = ? AND "
				cQuery +=     "DA1.DA1_CODPRO = ? AND "
				cQuery +=     "DA1.DA1_QTDLOT >= ? AND "
				cQuery +=     "DA1.DA1_ATIVO = '1' AND  "
				cQuery +=     "DA1.D_E_L_E_T_ = ' ' "
				
				If lGradeReal
					cQuery += " UNION "
					cQuery += "SELECT * "
					cQuery += "FROM "+RetSqlName("DA1")+ " DA1 "
					cQuery += "WHERE "
					cQuery += "DA1.DA1_FILIAL = ? AND "
					cQuery += "DA1.DA1_CODTAB = ? AND "
					cQuery += "DA1.DA1_REFGRD = ? AND "
					cQuery += "DA1.DA1_QTDLOT >= ? AND "
					cQuery += "DA1.DA1_ATIVO = '1' AND  "
					cQuery += "( DA1.DA1_DATVIG <= ? OR DA1.DA1_DATVIG = '"+Dtos(Ctod("//"))+ "' ) AND "

					If !lQtdCliVaz
						cQuery += "( DA1.DA1_TPOPER = ? OR DA1.DA1_TPOPER = '4' ) AND "
					Endif

					cQuery += "DA1.D_E_L_E_T_ = ' ' "
					cQuery += "AND NOT EXISTS ( "
					cQuery += "SELECT DA1B.DA1_CODPRO  "
					cQuery += "FROM "+RetSqlName("DA1")+ " DA1B "
					cQuery += "WHERE "
					cQuery += "DA1B.DA1_FILIAL = ? AND "
					cQuery += "DA1B.DA1_CODTAB = ? AND "
					cQuery += "DA1B.DA1_CODPRO = ? AND "
					cQuery += "DA1B.DA1_QTDLOT >= ? AND "
					cQuery += "DA1B.DA1_ATIVO = '1' AND  "
					cQuery += "( DA1B.DA1_DATVIG <= ? OR DA1B.DA1_DATVIG = '"+Dtos(Ctod("//"))+ "' ) AND "

					If !lQtdCliVaz
						cQuery += "( DA1B.DA1_TPOPER = ? OR DA1B.DA1_TPOPER = '4' ) AND "
					Endif
					cQuery += "DA1B.D_E_L_E_T_ = ' ' ) "

					cQuery += " UNION "
					cQuery += "SELECT * "
					cQuery += "FROM "+RetSqlName("DA1")+ " DA1 "
					cQuery += "WHERE "
					cQuery += "DA1.DA1_FILIAL = ? AND "
					cQuery += "DA1.DA1_CODTAB = ? AND "
					cQuery += "DA1.DA1_CODPRO LIKE ? AND "
					cQuery += "DA1.DA1_QTDLOT >= ? AND "
					cQuery += "DA1.DA1_ATIVO = '1' AND  "
					cQuery += "( DA1.DA1_DATVIG <= ? OR DA1.DA1_DATVIG = '"+Dtos(Ctod("//"))+ "' ) AND "

					If !lQtdCliVaz
						cQuery += "( DA1.DA1_TPOPER = ? OR DA1.DA1_TPOPER = '4' ) AND "
					Endif

					cQuery += "DA1.D_E_L_E_T_ = ' ' "
					cQuery += "AND NOT EXISTS ( "
					cQuery += "SELECT DA1C.DA1_CODPRO  "
					cQuery += "FROM "+RetSqlName("DA1")+ " DA1C "
					cQuery += "WHERE "
					cQuery += "DA1C.DA1_FILIAL = ? AND "
					cQuery += "DA1C.DA1_CODTAB = ? AND "
					cQuery += "DA1C.DA1_REFGRD = ? AND "
					cQuery += "DA1C.DA1_QTDLOT >= ? AND "
					cQuery += "DA1C.DA1_ATIVO = '1' AND  "
					cQuery += "( DA1C.DA1_DATVIG <= ? OR DA1C.DA1_DATVIG = '"+Dtos(Ctod("//"))+ "' ) AND "

					If !lQtdCliVaz
						cQuery += "( DA1C.DA1_TPOPER = ? OR DA1C.DA1_TPOPER = '4' ) AND "
					Endif
					cQuery += "DA1C.D_E_L_E_T_ = ' ' ) ) QRYDAI "

				Endif

				If lQtdCliVaz
					cQuery += "ORDER BY DA1_DATVIG ,"+SqlOrder(DA1->(IndexKey()))
				Else
					cQuery += "ORDER BY DA1_QTDLOT ,DA1_DATVIG ,"+SqlOrder(DA1->(IndexKey()))
				EndIf

				If !lGradeReal		
					If oQryDA1Tb1 == Nil .And. lQtdCliVaz
						cQuery := ChangeQuery(cQuery)
						oQryDA1Tb1 := FWPreparedStatement():New(cQuery)
					EndIf
					
					If oQryDA1Tb2 == Nil .And. !lQtdCliVaz
						cQuery := ChangeQuery(cQuery)
						oQryDA1Tb2 := FWPreparedStatement():New(cQuery)
					EndIf		

					If lQtdCliVaz
						oQryDA1Tb1:SetString(1,	DtoS(dDataVld))
						oQryDA1Tb1:SetString(2,	cFilDA1)
						oQryDA1Tb1:SetString(3,	cTabPreco)
						oQryDA1Tb1:SetString(4,	cProduto)
						oQryDA1Tb1:SetNumeric(5, Str(nQtde,18,8))

						cQuery := oQryDA1Tb1:GetFixQuery()
					Else
						oQryDA1Tb2:SetString(1, DtoS(dDataVld))
						oQryDA1Tb2:SetString(2, cTpOper)
						oQryDA1Tb2:SetString(3, cFilDA1)
						oQryDA1Tb2:SetString(4, cTabPreco)
						oQryDA1Tb2:SetString(5, cProduto)
						oQryDA1Tb2:SetNumeric(6, Str(nQtde,18,8))

						cQuery := oQryDA1Tb2:GetFixQuery()
					EndIf
				Else
					If oQryDA1Gd1 == Nil .And. lQtdCliVaz
						cQuery := ChangeQuery(cQuery)
						oQryDA1Gd1 := FWPreparedStatement():New(cQuery)
					EndIf
					
					If oQryDA1Gd2 == Nil .And. !lQtdCliVaz
						cQuery := ChangeQuery(cQuery)
						oQryDA1Gd2 := FWPreparedStatement():New(cQuery)
					EndIf

					If lQtdCliVaz
						oQryDA1Gd1:SetString(1, DtoS(dDataVld))
						oQryDA1Gd1:SetString(2, cFilDA1)
						oQryDA1Gd1:SetString(3, cTabPreco)
						oQryDA1Gd1:SetString(4, cProduto)
						oQryDA1Gd1:SetNumeric(5, Str(nQtde,18,8))
						oQryDA1Gd1:SetString(6, cFilDA1)
						oQryDA1Gd1:SetString(7, cTabPreco)
						oQryDA1Gd1:SetString(8, cProdRef)
						oQryDA1Gd1:SetNumeric(9, Str(nQtde,18,8))
						oQryDA1Gd1:SetString(10, DtoS(dDataVld))
						oQryDA1Gd1:SetString(11, cFilDA1)
						oQryDA1Gd1:SetString(12, cTabPreco)
						oQryDA1Gd1:SetString(13, cProduto+"%")
						oQryDA1Gd1:SetNumeric(14, Str(nQtde,18,8))
						oQryDA1Gd1:SetString(15, DtoS(dDataVld))
						oQryDA1Gd1:SetString(16, cFilDA1)
						oQryDA1Gd1:SetString(17, cTabPreco)
						oQryDA1Gd1:SetString(18, cProduto+"%")
						oQryDA1Gd1:SetNumeric(19, Str(nQtde,18,8))
						oQryDA1Gd1:SetString(20, DtoS(dDataVld))
						oQryDA1Gd1:SetString(21, cFilDA1)
						oQryDA1Gd1:SetString(22, cTabPreco)
						oQryDA1Gd1:SetString(23, cProdRef)
						oQryDA1Gd1:SetNumeric(24, Str(nQtde,18,8))
						oQryDA1Gd1:SetString(25, DtoS(dDataVld))

						cQuery := oQryDA1Gd1:GetFixQuery()
					Else
						oQryDA1Gd2:SetString(1,	DtoS(dDataVld))
						oQryDA1Gd2:SetString(2,	cTpOper)
						oQryDA1Gd2:SetString(3,	cFilDA1)
						oQryDA1Gd2:SetString(4,	cTabPreco)
						oQryDA1Gd2:SetString(5,	cProduto)
						oQryDA1Gd2:SetNumeric(6, Str(nQtde,18,8))
						oQryDA1Gd2:SetString(7,	cFilDA1)
						oQryDA1Gd2:SetString(8,	cTabPreco)
						oQryDA1Gd2:SetString(9,	cProdRef)
						oQryDA1Gd2:SetNumeric(10, Str(nQtde,18,8))
						oQryDA1Gd2:SetString(11, DtoS(dDataVld))
						oQryDA1Gd2:SetString(12, cTpOper)
						oQryDA1Gd2:SetString(13, cFilDA1)
						oQryDA1Gd2:SetString(14, cTabPreco)
						oQryDA1Gd2:SetString(15, cProduto+"%")
						oQryDA1Gd2:SetNumeric(16, Str(nQtde,18,8))
						oQryDA1Gd2:SetString(17, DtoS(dDataVld))
						oQryDA1Gd2:SetString(18, cTpOper)
						oQryDA1Gd2:SetString(19, cFilDA1)
						oQryDA1Gd2:SetString(20, cTabPreco)
						oQryDA1Gd2:SetString(21, cProduto+"%")
						oQryDA1Gd2:SetNumeric(22, Str(nQtde,18,8))
						oQryDA1Gd2:SetString(23, DtoS(dDataVld))
						oQryDA1Gd2:SetString(24, cTpOper)
						oQryDA1Gd2:SetString(25, cFilDA1)
						oQryDA1Gd2:SetString(26, cTabPreco)
						oQryDA1Gd2:SetString(27, cProdRef)
						oQryDA1Gd2:SetNumeric(28, Str(nQtde,18,8))
						oQryDA1Gd2:SetString(29, DtoS(dDataVld))
						oQryDA1Gd2:SetString(30, cTpOper)

						cQuery := oQryDA1Gd2:GetFixQuery()				
					EndIf
				EndIf

				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasDA1,.T.,.T.)

				If (cAliasDA1)->(!Eof())
					nProcessa := 1
				Else
					SB1->(dbSetOrder(1))
					If SB1->(MsSeek(xFilial("SB1")+cProduto))
						cGrupo := SB1->B1_GRUPO
						If !Empty(cGrupo)
							(cAliasDA1)->(dbCloseArea())
							cAliasDA1 := GetNextAlias()

							cQuery := "SELECT * "
							cQuery += "FROM "+RetSqlName("DA1")+ " DA1 "
							cQuery += "WHERE "
							cQuery += "DA1_FILIAL = ? AND "
							cQuery += "DA1_CODTAB = ? AND "
							If cPaisLoc == "BRA"
								cQuery += "DA1_GRUPO = ? AND "
							EndIf
							cQuery += "DA1_QTDLOT >= ? AND "
							cQuery += "DA1_ATIVO = '1' AND  "
							cQuery += "( DA1_DATVIG <= ? OR DA1_DATVIG = '"+Dtos(Ctod("//"))+ "' ) AND "
							If !lQtdCliVaz
								cQuery += "( DA1_TPOPER = ? OR DA1_TPOPER = '4' ) AND "
							Endif
							cQuery += "DA1.D_E_L_E_T_ = ' ' "
							cQuery += "ORDER BY "+SqlOrder(DA1->(IndexKey()))

							If oQryDA1Tb3 == Nil .And. lQtdCliVaz
								cQuery := ChangeQuery(cQuery)
								oQryDA1Tb3 := FWPreparedStatement():New(cQuery)
							EndIf

							If oQryDA1Tb4 == Nil .And. !lQtdCliVaz
								cQuery := ChangeQuery(cQuery)
								oQryDA1Tb4 := FWPreparedStatement():New(cQuery)
							EndIf

							If lQtdCliVaz
								If cPaisLoc == "BRA"
									oQryDA1Tb3:SetString(1, cFilDA1)
									oQryDA1Tb3:SetString(2, cTabPreco)
									oQryDA1Tb3:SetString(3, cGrupo)
									oQryDA1Tb3:SetNumeric(4, Str(nQtde,18,8))
									oQryDA1Tb3:SetString(5, DtoS(dDataVld))
								Else
									oQryDA1Tb3:SetString(1, cFilDA1)
									oQryDA1Tb3:SetString(2, cTabPreco)
									oQryDA1Tb3:SetNumeric(3, Str(nQtde,18,8))
									oQryDA1Tb3:SetString(4, DtoS(dDataVld))
								EndIf
								cQuery := oQryDA1Tb3:GetFixQuery()
							ELse
								If cPaisLoc == "BRA"
									oQryDA1Tb4:SetString(1, cFilDA1)
									oQryDA1Tb4:SetString(2, cTabPreco)
									oQryDA1Tb4:SetString(3, cGrupo)
									oQryDA1Tb4:SetNumeric(4, Str(nQtde,18,8))
									oQryDA1Tb4:SetString(5, DtoS(dDataVld))
									oQryDA1Tb4:SetString(6, cTpOper)
								Else
									oQryDA1Tb4:SetString(1, cFilDA1)
									oQryDA1Tb4:SetString(2, cTabPreco)
									oQryDA1Tb4:SetNumeric(3, Str(nQtde,18,8))
									oQryDA1Tb4:SetString(4, DtoS(dDataVld))
									oQryDA1Tb4:SetString(5, cTpOper)
								EndIf
								cQuery := oQryDA1Tb4:GetFixQuery()
							EndIf

							dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasDA1,.T.,.T.)

							If (cAliasDA1)->(!Eof())
								nProcessa := 2
							EndIf
						EndIf
					EndIf
				Endif
				For nY := 1 To Len(aStruDA1)
					If aStruDA1[nY,2]<>"C"
						TcSetField(cAliasDA1,aStruDA1[nY,1],aStruDA1[nY,2],aStruDA1[nY,3],aStruDA1[nY,4])
					EndIf
				Next nY
			Else
		#ENDIF
				lSeekDA1:= aPesqDA1(cTabPreco,cProduto)
				If lSeekDA1
					nProcessa := 1
				Else
					SB1->(dbSetOrder(1))
					If SB1->(MsSeek(xFilial("SB1")+cProduto))
						cGrupo := SB1->B1_GRUPO
						If !Empty(cGrupo)
							dbSelectarea("DA1")
							dbSetOrder(4)
							If MsSeek(cFilDA1+ cTabPreco + cGrupo)
								nProcessa := 2
							EndIf
						EndIF
					Endif
				EndIf
		
		#IFDEF TOP
			EndIf
		#ENDIF

		If nProcessa > 0

			If nQtde == 0 .And. Empty(cCliente)
				dbSelectArea(cAliasDA1)
				While (cAliasDA1)->(!Eof())
					nPrcVen   := (cAliasDA1)->DA1_PRCVEN
					nMoedaTab := (cAliasDA1)->DA1_MOEDA
					nFator    := (cAliasDA1)->DA1_PERDES

					lPrcDA1   := .T.
					dbSelectArea(cAliasDA1)
					dbSkip()
				Enddo
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Busco o preco e analiso a qtde de acordo com a faixa³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea(cAliasDA1)
				While (cAliasDA1)->(!Eof()) .And. (cAliasDA1)->DA1_FILIAL == cFilDA1 .And.;
									(cAliasDA1)->DA1_CODTAB == cTabPreco .And.;
									If(nProcessa==1,Left((cAliasDA1)->DA1_CODPRO,nTamProd)== cProduto .Or. (cAliasDA1)->DA1_CODPRO==cProduto .Or. (cAliasDA1)->DA1_REFGRD == cProdRef,(cAliasDA1)->DA1_GRUPO==cGrupo)

					If nQtde <= (cAliasDA1)->DA1_QTDLOT .And. (cAliasDA1)->DA1_ATIVO == "1"

						If Empty((cAliasDA1)->DA1_ESTADO) .And. ((cAliasDA1)->DA1_TPOPER == cTpOper .Or. (cAliasDA1)->DA1_TPOPER == "4")

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Verifica a vigencia do item                                   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

							nQtdLote := (cAliasDA1)->DA1_QTDLOT

							While (cAliasDA1)->(!Eof()) .And. (cAliasDA1)->DA1_FILIAL == cFilDA1 .And.;
																(cAliasDA1)->DA1_CODTAB == cTabPreco .And.;
																If(nProcessa==1,Left((cAliasDA1)->DA1_CODPRO,nTamProd)== cProduto .Or. (cAliasDA1)->DA1_CODPRO==cProduto .Or. (cAliasDA1)->DA1_REFGRD == cProdRef ,(cAliasDA1)->DA1_GRUPO==cGrupo) .And.;
																(cAliasDA1)->DA1_QTDLOT == nQtdLote .And.;
																(cAliasDA1)->DA1_DATVIG <= dDataVld
								If nQtde <= (cAliasDA1)->DA1_QTDLOT .And. (cAliasDA1)->DA1_ATIVO == "1" .And.;
									((!Empty((cAliasDA1)->DA1_ESTADO) .And. ( If(lProspect, SUS->US_EST, If(lSA1EstE, SA1->A1_ESTE, SA1->A1_EST)) == (cAliasDA1)->DA1_ESTADO )).Or.(Empty((cAliasDA1)->DA1_ESTADO) .And. ((cAliasDA1)->DA1_TPOPER == cTpOper .Or. (cAliasDA1)->DA1_TPOPER == "4")))
									nPrcVen   := (cAliasDA1)->DA1_PRCVEN
									nMoedaTab := (cAliasDA1)->DA1_MOEDA
									nFator    := (cAliasDA1)->DA1_PERDES

									lPrcDA1   := .T.
								EndIf

								dbSelectArea(cAliasDA1)
								dbSkip()
							Enddo
							If lPrcDA1
								Exit
							Endif

						ElseIf !Empty((cAliasDA1)->DA1_ESTADO) .And. ( If(lProspect, SUS->US_EST, If(lSA1EstE, SA1->A1_ESTE, SA1->A1_EST)) == (cAliasDA1)->DA1_ESTADO )

							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Verifica a vigencia do item                                   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

							nQtdLote := (cAliasDA1)->DA1_QTDLOT

							While (cAliasDA1)->(!Eof()) .And. (cAliasDA1)->DA1_FILIAL == cFilDA1 .And.;
																	(cAliasDA1)->DA1_CODTAB == cTabPreco .And.;
																	If(nProcessa==1,Left((cAliasDA1)->DA1_CODPRO,nTamProd)== cProduto .Or. (cAliasDA1)->DA1_CODPRO==cProduto .Or. (cAliasDA1)->DA1_REFGRD == cProdRef,(cAliasDA1)->DA1_GRUPO==cGrupo) .And.;
																	(cAliasDA1)->DA1_QTDLOT == nQtdLote .And.;
																	(cAliasDA1)->DA1_DATVIG <= dDataVld
								If nQtde <= (cAliasDA1)->DA1_QTDLOT .And. (cAliasDA1)->DA1_ATIVO == "1" .And.;
									((!Empty((cAliasDA1)->DA1_ESTADO) .And. ( If(lProspect, SUS->US_EST, If(lSA1EstE, SA1->A1_ESTE, SA1->A1_EST)) == (cAliasDA1)->DA1_ESTADO )).Or.(Empty((cAliasDA1)->DA1_ESTADO) .And. ((cAliasDA1)->DA1_TPOPER == cTpOper .Or. (cAliasDA1)->DA1_TPOPER == "4")))


									nPrcVen   := (cAliasDA1)->DA1_PRCVEN
									nMoedaTab := (cAliasDA1)->DA1_MOEDA
									nFator    := (cAliasDA1)->DA1_PERDES

									lPrcDA1   := .T.

								Endif

								dbSelectArea(cAliasDA1)
								dbSkip()
							Enddo
							If lPrcDA1
								Exit
							Endif

						EndIf
					EndIf
					dbSelectArea(cAliasDA1)
					dbSkip()
				Enddo

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Somente atualiza com o SB1 caso nao tenha achado nenhuma tabela    ³
				//³caso contrario retornara o preco zerado                            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

				If nTipo == 1
					If nPrcVen == 0 .And. !lPrcDA1
						If lLjcnvB0 .AND. nModulo == 12
							DbSelectArea("SB0")
							DbSetOrder(1)
							If DbSeek(xFilial("SB0")+cProduto)
								nPrcVen := SB0->B0_PRV1
							EndIf
						// No FrontLoja, é obrigatório ler o SBI
						ElseIf nModulo == 23 .And. !lPos
							DbSelectArea("SBI")
							SBI->(DbSetOrder(1))
							If SBI->(DbSeek(xFilial("SBI")+cProduto))
								nPrcVen := SBI->BI_PRV
							EndIf
						Else
							DbSelectArea("SB1")
							SB1->(DbSetOrder(1))
							If SB1->(MsSeek(xFilial("SB1")+cProduto))
								nPrcVen := SB1->B1_PRV1
							EndIf
						EndIf
						lUltResult := .F.
					Endif
				Endif

			EndIf
		Else
			If nTipo == 1
				If nPrcVen == 0 .And. !lPrcDA1
					If lLjcnvB0 .AND. nModulo == 12
						DbSelectArea("SB0")
						DbSetOrder(1)
						If DbSeek(xFilial("SB0")+cProduto)
							nPrcVen := SB0->B0_PRV1
						EndIf
					// No FrontLoja, é obrigatório ler o SBI
					ElseIf nModulo == 23 .AND. !lPOS
						DbSelectArea("SBI")
						DbSetOrder(1)
						If DbSeek(xFilial("SBI")+cProduto)
							nPrcVen := SBI->BI_PRV
						EndIf
					Else
						DbSelectArea("SB1")
						DbSetOrder(1)
						If MsSeek(xFilial("SB1")+cProduto)
							nPrcVen := SB1->B1_PRV1
						EndIf
					EndIf
				EndIf
			Endif
			lUltResult := .F.
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Se o tipo for para trazer preco converte para a moeda    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

		nFator := Iif( nFator == 0, 1, nFator )

		If nTipo == 1
			nResult := xMoeda(nPrcVen,nMoedaTab,nMoeda,,TamSx3("D2_PRCVEN")[2])
		Else
			nResult	:= nFator
		Endif


		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Guarda os ultimos resultados                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lUltResult
			aadd(aUltResult,{cTabPreco,cProduto,nQtde,cCliente,cLoja,nMoeda,cFilAnt,nResult,nFator,lProspect})
			If Len(aUltResult) > MAXSAVERESULT
				aUltResult := aDel(aUltResult,1)
				aUltResult := aSize(aUltResult,MAXSAVERESULT)
			EndIf
		EndIf
	Else

		If nTipo == 1
			nResult := aUltResult[nScan,8]
		Else
			nResult := aUltResult[nScan,9]
		Endif
	EndIf
Endif

If lQuery
	dbSelectArea(cAliasDA1)
	dbCloseArea()
	dbSelectArea("DA1")
Endif

RestArea(aAreaSB1)
RestArea(aArea)
Return(nResult)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³MaVldTabPrc³ Autor ³Eduardo Riera          ³ Data ³03.05.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao da tabela de precos                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Tabela valida                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Tabela de Preco                                      ³±±
±±³          ³ExpC2: Condicao de Pagamento                                ³±±
±±³          ³ExpN3: Help                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function MaVldTabPrc(cCodTab,cCondPag,cHelp,dDataVld)

Local aArea		:= GetArea()
Local lValido	:= .T.
Local lTabLoja	:= cPaisLoc != "BRA" .And. nModulo == 12
Local lCenVenda	:= .F.

DEFAULT dDataVld := dDataBase

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se o cenario de vendas estiver integrado com o sigaloja,   ³
//³nao eh necessario validar a tabela seguindo o padrao antigo³
//³de numeracao de tabela de preco do loja, ex: 1,2,3,4,etc.  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nModulo == 12 .OR. nModulo == 23
	lCenVenda	:= SuperGetMv("MV_LJCNVDA",,.F.)
	lTabLoja	:= !lCenVenda .AND. cPaisLoc != "BRA" .And. nModulo == 12
	If lCenVenda
		//Abandona a funcao caso conteudo do parametro "MV_LJRETVL" for diferente de 3, pois nao precisa verificar se tabela de preco estah vigente neste momento
		If SuperGetMV("MV_LJRETVL",,"3") <> "3" //3=Considera tabela de preco configurada no parametro MV_TABPAD
			Return .T.
		EndIf
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica a vigencia da tabela de precos                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("DA0")
dbSetOrder(1)
If MsSeek(xFilial("DA0")+cCodTab)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifico se a tabela de preço está ativa e depois faço a validação da  ³
	//³ vigencia da tabela de preço, conforme o tipo de hora.                  ³
	//³ DA0_TPHORA = (1-Unico ou 2-Recorrente)                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (DA0->DA0_ATIVO == "2") .Or.;
		(DA0->DA0_TPHORA == "1" .And. !(SubtHoras(dDataVld,Time(),If(Empty(DA0->DA0_DATATE),dDataVld,DA0->DA0_DATATE),DA0->DA0_HORATE) >= 0 .And.;
		SubtHoras(DA0->DA0_DATDE,DA0->DA0_HORADE,dDataVld,Time()) >= 0)) .Or.;
		(DA0->DA0_TPHORA == "2" .And. !(dDataVld >= DA0->DA0_DATDE .And. dDataVld <= If(Empty(DA0->DA0_DATATE),dDataVld,DA0->DA0_DATATE) .And.;
		(SubStr(Time(),1,5) >= DA0->DA0_HORADE .And. SubStr(Time(),1,5) <= DA0->DA0_HORATE)))
		If ExistBlock("OM010VIG")
			lValido := ExecBlock("OM010VIG",.F.,.F.,cCodTab)
		Else
			If Empty(cHelp)
				If DA0->DA0_ATIVO == "2"
					Help(" ",1,"OMSTABPRC4")   		//"Tabela de preço inativa"
				Else
					Help(" ",1,"OMSTABPRC1")   		//"Tabela de preço fora da vigência"
				EndIf
			Else
				cHelp := "OMSTABPRC1"
			EndIf
			lValido := .F.
		Endif
	Else
		If !Empty(cCondPag) .And. !Empty(DA0->DA0_CONDPG) .And. cCondPag <> DA0->DA0_CONDPG
			If Empty(cHelp)
				Help(" ",1,"OMSTABPRC2")  	//"Condição de pagamento inválida para esta tabela de preços"
			Else
				cHelp := "OMSTABPRC2"
			EndIf
			lValido := .F.
		EndIf
	EndIf
ElseIf !lTabLoja
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se a tabela nao esta em branco e nao e' tabela 1              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !Empty(cCodTab) .And. cCodTab <> PadR( "1", Len( DA0->DA0_CODTAB ) )
		If Empty(cHelp)
			Help(" ",1,"REGNOIS")
		Else
			cHelp := "REGNOIS"
		EndIf
		lValido := .F.
	EndIf
EndIf
RestArea(aArea)
Return(lValido)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Oms010Leg  ³ Autor ³Henry Fila             ³ Data ³30.02.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Legenda das tabelas                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Leg()

Local aLegenda := { { "BR_VERMELHO"  , OemToAnsi( STR0016 ) },;
					{ "BR_VERDE"    , OemToAnsi( STR0017) },;
					{ "BR_LARANJA"  , OemToAnsi( STR0018) } }

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para alterar cores da legenda    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("OM010LEG")
	aLegenda := ExecBlock("OM010LEG",.F.,.F.,aLegenda)
Endif

BrwLegenda( cCadastro, OemToAnsi( "Status" ), aLegenda  ) //"Somente faturada e nao acertada"

return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Oms010Hora ³ Autor ³Henry Fila             ³ Data ³30.02.02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao das horas no cabecalho da tabela de precos        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³.T. ou .F.                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Hora()

Local lRet := .T.

If !Empty( M->DA0_DATATE ) .And. ( M->DA0_DATDE == M->DA0_DATATE ) .And.;
    !Empty(M->DA0_HORATE)

	If M->DA0_HORATE < M->DA0_HORADE
		Help(" ",1,"OMS010HORA")
		lRet := .F.
	Endif
Endif

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MaReleTabPrcºAutor  ³Marcelo Kotaki    º Data ³  11/26/02   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Essa funcao limpa o conteudo do array com os precos da      º±±
±±º          ³ultima tabela de preco                                      º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP6                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function MaReleTabPrc()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Limpa buffer                                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aUltResult := Nil

Return(.T.)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Os010CanDel³ Autor ³Henry Fila             ³ Data ³07.04.03 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Verifica se a tabela de precos pode ser excluida            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³.T. (pode ser excluida) ou .F. (nao pode                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1 : Codigo da tabela                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Os010CanDel(cCodTab)


Local cAliasACO := "ACO"
Local cAliasACQ := "ACQ"
Local cAliasACT := "ACT"
Local cAliasADA := "ADAAUX"
Local cAliasAB3 := "AB3"
Local cAliasAAT := "AAT"

Local lRet      := .T.
#IFDEF TOP
	Local cQuery    := ""
#ENDIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se a tabela foi gerada por publicação de preços     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If SuperGetMV("MV_TPEFETP",,"1") == "2" .And.!Empty(DA0->DA0_CODPUB)
	lRet := .F.
EndIf

#IFDEF TOP

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica regras de desconto                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet
		cAliasACO := "QRYACO"
		cQuery    := "SELECT COUNT(*) QTDREC FROM "
		cQuery    += RetSqlName("ACO")+ " ACO "
		cQuery    += " WHERE "
		cQuery    += "( ACO_FILIAL ='"+xFilial("ACO")+"' AND "
		cQuery    += "ACO_CODTAB = '"+cCodTab+"' AND "
		cQuery    += "ACO.D_E_L_E_T_ = ' ' ) "

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasACO,.T.,.T.)

		If (cAliasACO)->QTDREC > 0
			lRet := .F.
		Endif

		(cAliasACO)->(dbCloseArea())
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica regras de bonificacao                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	If lRet

		cAliasACQ := "QRYACQ"

		cQuery    := "SELECT COUNT(*) QTDREC FROM "
		cQuery    += RetSqlName("ACQ")+ " ACQ "
		cQuery    += " WHERE "
		cQuery    += "( ACQ_FILIAL ='"+xFilial("ACQ")+"' AND "
		cQuery    += "ACQ_CODTAB = '"+cCodTab+"' AND "
		cQuery    += "ACQ.D_E_L_E_T_ = ' ' ) "

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasACQ,.T.,.T.)

		If (cAliasACQ)->QTDREC > 0
			lRet := .F.
		Endif

		(cAliasACQ)->(dbCloseArea())

	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica regras de negocio                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet

		cAliasACT := "QRYACT"

		cQuery    := "SELECT COUNT(*) QTDREC FROM "
		cQuery    += RetSqlName("ACT")+ " ACT "
		cQuery    += " WHERE "
		cQuery    += "( ACT_FILIAL ='"+xFilial("ACT")+"' AND "
		cQuery    += "ACT_CODTAB = '"+cCodTab+"' AND "
		cQuery    += "ACT.D_E_L_E_T_ = ' ' ) "

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasACT,.T.,.T.)

		If (cAliasACT)->QTDREC > 0
			lRet := .F.
		Endif

		(cAliasACT)->(dbCloseArea())

	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se esta associado a um contrato parceria            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet
		cQuery := "SELECT ADA_TABELA"
		cQuery += "	FROM " + RetSQLName("ADA") + " ADA "
		cQuery += "	WHERE "
		cQuery += "	ADA.ADA_TABELA = '" + cCodTab + "' AND "
		cQuery += "	ADA.D_E_L_E_T_ = ''"

		cQuery := ChangeQuery( cQuery )
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasADA,.T.,.T.)

		If (cAliasADA)->(!EOF())
			lRet := .F.
		EndIf
		(cAliasADA)->(DbCloseArea())
	EndIf

	If lRet
		cAliasAB3 := "QRYAB3"
		cQuery    := "SELECT COUNT(*) QTDREC FROM "
		cQuery    += RetSqlName("AB3")+ " AB3 "
		cQuery    += " WHERE "
		cQuery    += "( AB3_FILIAL ='"+xFilial("AB3")+"' AND "
		cQuery    += "AB3_TABELA = '"+cCodTab+"' AND "
		cQuery    += "AB3.D_E_L_E_T_ = ' ' ) "

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasAB3,.T.,.T.)

		If (cAliasAB3)->QTDREC > 0
			lRet := .F.
		Endif

		(cAliasAB3)->(dbCloseArea())
	EndIf

	If lRet
		cAliasAAT := "QRYAAT"
		cQuery    := "SELECT COUNT(*) QTDREC FROM "
		cQuery    += RetSqlName("AAT")+ " AAT "
		cQuery    += " WHERE "
		cQuery    += "AAT_FILIAL ='"+xFilial("AAT")+"' AND "
		cQuery    += "AAT_TABELA = '"+cCodTab+"' AND "
		cQuery    += "AAT.D_E_L_E_T_ = ' ' "

		cQuery := ChangeQuery(cQuery)
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasAAT,.T.,.T.)

		If (cAliasAAT)->QTDREC > 0
			lRet := .F.
		Endif

		(cAliasAAT)->(dbCloseArea())
	EndIf

#ELSE

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica regras de desconto                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	If lRet
		(cAliasACO)->(dbSetOrder(1))
		(cAliasACO)->(MsSeek(xFilial("ACO")))

		While (cAliasACO)->(!Eof()) .And. (cAliasACO)->ACO_FILIAL == xFilial("ACO") .And. lRet


			If (cAliasACO)->ACO_CODTAB == cCodTab
				lRet := .F.
			Endif

			ACO->(dbSkip())

		EndDo
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica regras de bonificacao                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet

		(cAliasACQ)->(dbSetOrder(1))
		(cAliasACQ)->(MsSeek(xFilial("ACQ")))

		While (cAliasACQ)->(!Eof()) .And. (cAliasACQ)->ACQ_FILIAL == xFilial("ACQ") .And. lRet


			If (cAliasACQ)->ACQ_CODTAB == cCodTab
				lRet := .F.
			Endif

			ACQ->(dbSkip())

		EndDo

	Endif

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica regras de negocio                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet

		(cAliasACT)->(dbSetOrder(1))
		(cAliasACT)->(MsSeek(xFilial("ACT")))

		While (cAliasACT)->(!Eof()) .And. (cAliasACT)->ACT_FILIAL == xFilial("ACT") .And. lRet


			If (cAliasACT)->ACT_CODTAB == cCodTab
				lRet := .F.
			Endif

			ACT->(dbSkip())

		EndDo

	Endif

#ENDIF

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se a tabela foi usada em algum pedido de vendas³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet
	lRet := !Os010PVAssoc(cCodTab)
EndIf

If lRet
	If ExistBlock("OS010DEL")
		lRet := ExecBlock("OS010DEL",.F.,.F.,{cCodTab})
	Endif
Endif

Return(lRet)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010Vld ³ Autor ³ Henry Fila            ³ Data ³ 01/04/2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Validacao da tabela quando for por produto                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010Vld()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Vld()

Local aArea      := GetArea()
Local aAreaDA1   := DA1->(GetArea())
Local aAreaDA0   := DA0->(GetArea())
Local aItens     := {}
Local cItem      := ""
Local nX         := 0
Local nPosCod    := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_CODTAB"})
Local nPosTabela := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_DESTAB"})
Local nPosItem   := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_ITEM"})
Local nPosPrc    := Ascan(aHeader,{|x| Alltrim(x[2]) == "DA1_PRCBAS"})
Local lRet       := .T.

SB1->(dbSetOrder(1))
If SB1->(MsSeek(xFilial("SB1")+mv_par02))
	aCols[n,nPosPrc] := SB1->B1_PRV1
Endif

DA0->(dbsetOrder(1))
If DA0->(MsSeek(xFilial("DA0")+M->DA1_CODTAB))
	aCols[n,nPosTabela] := DA0->DA0_DESCRI

	DA1->(dbSetORder(3))
	DA1->(MsSeek(xFilial("DA1")+M->DA1_CODTAB+"ZZZZ",.T.))
	dbSkip(-1)
	cItem := Soma1(DA1->DA1_ITEM)

	If aScan(aCols,{|x| Upper(Alltrim(x[nPosCod])) == M->DA1_CODTAB})	> 0

		For nX := 1 to Len(aCols)
			If !aCols[nX,Len(aHeader)+1]
				If aCols[nX,nPosCod] == M->DA1_CODTAB .And. n <> nX

					DA1->(dbSetORder(3))
					If !DA1->(MsSeek(xFilial("DA1")+M->DA1_CODTAB+aCols[nX,nPosItem],.T.))
						cItem := Soma1(cItem)
					Endif
				Endif
			Endif
		Next nX

	Endif

	aCols[n,nPosItem] := cItem

Else
	Help(" ",1,"REGNOIS")
	lRet := .F.
Endif

RestArea(aAreaDA0)
RestArea(aAreaDA1)
RestArea(aArea)

Return(lRet)


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Oms010PFor³ Autor ³ Henry Fila            ³ Data ³17/09/2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³ Prepara a funcao de copia para evitar que seja chamada a   ³±±
±±³          ³ janela de filiais                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do cabecalho do pedido de venda                ³±±
±±³          ³ExpN2: Recno do cabecalho do pedido de venda                ³±±
±±³          ³ExpN3: Opcao do arotina                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function Oms010PFor(cAlias,nReg,nOpc)

Local aRotBkp := aClone(aRotina)

aRotina := {{ OemToAnsi(STR0013),"Oms010For",0,3,32}}

Oms010For(calias,nReg,1)

aRotina := aClone(aRotBkp)

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010Cpy ³ Autor ³ Eduardo Riera         ³ Data ³ 23/05/2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina de Copia da tabela de preco                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010Tab()                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias do Arquivo                                       ³±±
±±³          ³ExpN2: Numero do Registro                                     ³±±
±±³          ³ExpN3: Opcao do aRotina                                       ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010Cpy(cAlias,nReg,nOpc)
Local cTitle := ""

Default nOpc := 0

If Type("aRotina") == "A" .and. nOpc>0 .and. len(aRotina)>= nOpc
	cTitle := aRotina[nOpc,1]
EndIf
lCopia := .T.
FWExecView(cTitle , 'OMSA010', OP_COPIA,, { || .T. } )
lCopia := .F.
return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³Oms010aRec³ Autor ³ Marco Bianchi         ³ Data ³ 13/12/2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Rotina para preencher array aRecno que sera utilizado nas     ³±±
±±³          ³opcoes diferentes de inclisao e copia.                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³Oms010aRec()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1: Array a ser preenchido                                 ³±±
±±³          ³ExpL2: identifica se esta executando query                    ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais/Distribuicao/Logistica                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Atualizacoes sofridas desde a Construcao Inicial.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Programador  ³ Data   ³ BOPS ³  Motivo da Alteracao                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³              ³        ³      ³                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Oms010aRec(aRecNo)

aAdd(aRecno,DA1->( Recno() ))

Return (.T.)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³OMS010VlRfºAutor  ³Patricia D. Aguiar  º Data ³  29/03/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida a digitacao da referencia de Grade                   º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function OMS010VlRf()

Local lRetorno 	  := .T.
Local cProdRef 	  := &(ReadVar())
Local lGrade   	  := MaGrade()
Local lReferencia := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se produto eh referencia de grade                            ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lGrade // utilização de grade ativa
	lReferencia:=MatGrdPrrf(@cProdRef)
	If !lReferencia //
		Help(" ",1,"REFGRADE")
		lRetorno:=.F.
	Endif
Else
	Help(" ",1,"NOGRADE")
	lRetorno := .f.
Endif
Return(lRetorno)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³aPesqDA1  ºAutor  ³Patricia Duca Aguiarº Data ³  03/04/07   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao genérica para pesquisa no arquivo DA1(tabela de pre-)º±±
±±º          ³co, que deve considerar codigo do produto ou Referencia de  º±±
±±º          ³grade                                                       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ ExpC1 - Codigo da Tabela de preço                          º±±
±±º          ³ ExpC2 - Codigo do Produto                                  º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function aPesqDA1(cTabela,cProduto)

Local cProdRef    := cProduto
Local lRet        := .F.
Local lReferencia := .F.

cProduto:= Pad(cProduto,Len(DA1->DA1_CODPRO))
lReferencia := MatGrdPrRf(@cProdRef,.T.)
If Alltrim(cProduto)== Alltrim(cProdRef) .And. lReferencia
	dbSelectarea("DA1")
	dbSetOrder(5)
	If MsSeek(xFilial("DA1")+cTabela+Pad(cProdRef,len(DA1->DA1_REFGRD)),.F.)
		lRet := .T.
	Else
		dbSelectarea("DA1")
		dbSetOrder(1)
		DbSeek(xFilial("DA1")+cTabela+cProduto,.T.)
		If !EOF()
			lRet:=.T.
		Endif
	Endif
Else
	dbSelectarea("DA1")
	dbSetOrder(1)
	If MsSeek(xFilial("DA1")+cTabela+cProduto,.F.)
		lRet := .T.
	Else
		If MaGrade() .And. lReferencia
			dbSelectarea("DA1")
			dbSetOrder(5)
			If MsSeek(xFilial("DA1")+cTabela+Pad(cProdRef,len(DA1->DA1_REFGRD)),.F.)
				lRet := .T.
			Endif
		Endif
	Endif
Endif
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³MontaCols ³ Autor ³ Vendas & CRM          ³ Data ³ 02/10/08 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrio ³Montagem do aCols (a montagem do aHeader e feita automatica-³±±
±±³          ³mente pela funcao FILLGETDADOS) na alteracao.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³MontaCols()                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametro ³                                                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ OMSA010                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function MontaCols(aCols,aHeader,lCopia,aRecno,oMdlDA1)

Local aArea    	:= GetArea()
Local aAreaDA0 	:= DA0->(GetArea())
Local aAreaDA1 	:= DA1->(GetArea())
Local aCampos  	:= {}
Local cAliasDA1	:= GetNextAlias()
Local cQuery   	:= ""
Local aStruDA1 	:= {}
Local nCntFor  	:= 0
Local nUsado   	:= Len(aHeader)
Local nX       	:= 0
Local lOM010COL	:= ExistBlock("OM010COL")
Local nPosRec	:= 0
Local cField 	:= ""
Local aRecAux	:= {}
Local nTamCols	:= 0
Local nTamDescr := TamSX3("DA1_DESCRI")[1]

If ExistBlock("OM010CPO")
	aCampos := ExecBlock("OM010CPO",.F.,.F.)
Endif

nPosRec := aScan( aHeader,{|x| AllTrim(x[2]) == "DA1_REC_WT" } )
If nPosRec > 0
	aRecAux := aClone(aHeader[nPosRec])
	aHeader := aClone( oMdlDA1:aHeader ) 
	aAdd( aHeader, aRecAux )
	nUsado  := Len(aHeader)
EndIf

dbSelectArea("DA1")
dbSetOrder(3)

aStruDA1  := DA1->(dbStruct()) 

cQuery := "SELECT DA1.*,DA1.R_E_C_N_O_ DA1RECNO, B1_DESC, B1_PRV1 FROM "
cQuery += RetSqlName("DA1")+ " DA1 "
cQuery += "LEFT JOIN " +RetSqlName("SB1")+ " SB1  "
cQuery += "  ON SB1.B1_FILIAL  = '"+xFilial("SB1")+"'"
cQuery += "  AND SB1.B1_COD     = DA1.DA1_CODPRO"
cQuery += "  AND SB1.D_E_L_E_T_ = ' ' "
cQuery += "WHERE DA1.DA1_FILIAL = '"+xFilial("DA1")+"'"
cQuery += "  AND DA1.DA1_CODTAB = '"+DA0->DA0_CODTAB+"'"
cQuery += "  AND DA1.D_E_L_E_T_ = ' ' "
cQuery += "ORDER BY "+SqlOrder(DA1->(IndexKey()))
 
If ExistBlock("OM010QRY")
	cQuery := ExecBlock("OM010QRY",.F.,.F.,{cQuery})
Endif

cQuery := ChangeQuery(cQuery)

dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasDA1,.T.,.T.)


For nCntFor := 1 To Len(aStruDA1)
	If ( aStruDA1[nCntFor,2]<>"C" )
		TcSetField(cAliasDA1,aStruDA1[nCntFor,1],aStruDA1[nCntFor,2],aStruDA1[nCntFor,3],aStruDA1[nCntFor,4])
	EndIf
Next nCntFor
TcSetField(cAliasDA1,"B1_PRV1","N",TamSX3("B1_PRV1")[1],TamSX3("B1_PRV1")[2])

While (cAliasDA1)->(!Eof())
	
	aAdd(aCols,Array(nUsado+1))
	nTamCols += 1
	
	If !lCopia
		aadd(aRecno,(cAliasDA1)->DA1RECNO)
	Endif

	For nX := 1 To nUsado
		cField := AllTrim(aHeader[nX,2]) 
		If ( aHeader[nX,10] !=  "V" )   
			If aHeader[nX,8] <> "M"
				aCols[nTamCols,nX] := (cAliasDA1)->(FieldGet(FieldPos(cField)))
			Else
				DA1->(dbGoTo((cAliasDA1)->DA1RECNO))
				aCols[nTamCols,nX] := DA1->(FieldGet(FieldPos(cField)))
			EndIf
		ElseIf cField == "DA1_ALI_WT"
			aCols[nTamCols,nX] := "DA1"
		ElseIf cField == "DA1_REC_WT"
			aCols[nTamCols,nX] := (cAliasDA1)->DA1RECNO
		ElseIf cField == "DA1_DESCRI" 
			aCols[nTamCols,nX] := SubStr((cAliasDA1)->B1_DESC,1,nTamDescr) 
		ElseIf cField == "DA1_PRCBAS" 
			aCols[nTamCols,nX] := (cAliasDA1)->B1_PRV1
		ElseIf cField == "DA1_USERGI"
			aCols[nTamCols,nX] := (cAliasDA1)->DA1_USERGI
		ElseIf cField == "DA1_USERGA"
			aCols[nTamCols,nX] := (cAliasDA1)->DA1_USERGA
		ElseIf cField == "DA1_MSEXP"
			aCols[nTamCols,nX] := (cAliasDA1)->DA1_MSEXP
		ElseIf lOM010COL .And. !Empty(Ascan(aCampos,AllTrim(cField)))
			aCols[nTamCols,nX] := ExecBlock("OM010COL",.F.,.F.,{cAliasDA1,AllTrim(cField)}) 
		ElseIf cField !=  "DA1_DESTAB"
			aCols[nTamCols,nX] := CriaVar(cField,.T.,,.F.)     
		EndIf    
	Next nX
	aCols[nTamCols,nUsado+1] := .F.    
	(cAliasDA1)->(DBSkip())    
EndDo 
  
dbSelectArea(cAliasDA1)    
dbCloseArea()
ChkFile("DA1",.F.)  
dbSelectArea("DA0")

RestArea(aAreaDA1)
RestArea(aAreaDA0)
RestArea(aArea)

Return Nil

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³OMSA010Grd³Autor  ³Alexandre Inacio Lemes ³ Data ³22/10/2008 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Valida a digitacao de produtos de grade                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T. se Valido ou .F. se Invalido                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³Pergunte OMS010 da Tabela de Precos Faturamento OMSA010.PRX  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function OMSA010Grd()

Local aArea	      := GetArea()
Local lReferencia := .F.
Local lRet 		  := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se a grade esta ativa e se o produto digitado e uma referencia     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If MaGrade() .And. !Empty(&(ReadVar()))
	cProdRef := &(ReadVar())
	lReferencia := MatGrdPrrf(@cProdRef)

	If lReferencia
		lRet := .T.
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se o Produto nao for um produto de grade executa a validacao no SB1 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea("SB1")
		dbSetOrder(1)
		If !dbSeek(xFilial("SB1")+cProdRef,.F.)
			Help("  ",1,"REGNOIS")
			lRet := .F.
		EndIf
	EndIf
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Se o Produto nao for um produto de grade executa a validacao no SB1     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	lRet := ExistCpo("SB1")
EndIf

RestArea(aArea)

Return(lRet)

/*ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funo    ³OMSAGrPrd ³Autor  ³Rodrigo T. Silva 		³ Data ³11/11/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³Interface de Grade de Produtos - Tabela de Precos			   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³OMSA010													   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function OMSAGrPrd()
Local lRet			:= .T.
Local nITEMGR		:= 0
Local nDESPRO		:= 0
Local nDESCON		:= 0
Local nPVENDA		:= 0
Local nFATOR		:= 0
Local lGrade		:= .F.
Local cProduto		:= ""
Local lReferencia	:= .F.
Local oMdl
Local oMdlDA1

oMdl := FWModelActive()
oMdlDA1 := oMdl:GetModel("DA1DETAIL")
cProduto := FwFldGet("DA1_CODPRO")
lGrade  := oMdlDA1:HasField("DA1_ITEMGR") .AND. MaGrade()
lReferencia := MatGrdPrrf(@cProduto)

If lGrade
	If Type("oGrade") <> "O" // Instancia o objeto se necessário 
		oGrade := MsMatGrade():New("oGrade",,"DA1_PRCVEN","OMSASomG()","Positivo().And.OMSACalV()",,{{"DA1_PRCVEN",.T.,,.T.},;
																								{"DA1_VLRDES",.T.,,.T.},;
																								{"DA1_PERDES",.T.,,.T.}})
	EndIf
	oGrade:MontaGrade(oMdlDA1:GetLine(),cProduto,.T.,,lReferencia)
EndIf

If lReferencia
	If oMdlDA1:HasField("DA1_ITEMGR")
		FwFldPut("DA1_ITEMGR", "01")
	EndIf
	FwFldPut("DA1_DESCRI", oGrade:GetDescProd(cProduto))
	FwFldPut("DA1_VLRDES", 0)
	oMdlDA1:LoadValue("DA1_PRCVEN", 0)
	FwFldPut("DA1_PERDES", 0)		
ElseIf (lRet := ExistCpo("SB1",cProduto))
	FwFldPut("DA1_DESCRI",SubStr(Posicione("SB1",1,xFilial("SB1")+FwFldGet("DA1_CODPRO"),"B1_DESC"),1,TamSX3("DA1_DESCRI")[1]))
	If oMdlDA1:HasField("DA1_ITEMGR")
		FwFldPut("DA1_ITEMGR",CriaVar("DA1_ITEMGR"))
	EndIf
EndIf

Return lRet

/*/{Protheus.doc} Oms010Grd
Se a Grade estiver ativa, efetua a entrada de dados na coluna preco de venda.
@author Rodrigo T. Silva
@since 11/11/2009 
@version 1.0
@return Logico, ${return_description}
/*/

Function Oms010Grd()

Local cCampo		:= Substr(ReadVar(),4)
Local cProduto		:= ""
Local lGrade		:= .F.
Local lRet			:= .T.
Local nAux
Local nCODPRO		:= 0
Local oGetMdl
Local oModel
Local oView

//Ativa o Model para a Tabela de Preço com MVC
oModel := FWModelActive()
oModel := oModel:GetModel("DA1DETAIL")
nCODPRO := aScan(oModel:aHeader,{|x| AllTrim(x[2]) == "DA1_CODPRO"})

If nCODPRO > 0
	cProduto := oModel:GetValue("DA1_CODPRO")	
		
ElseIf mv_par01 == 2 .And.!Empty(mv_par02)
	cProduto := mv_par02	
Else
	cProduto := DA1->DA1_CODPRO	
Endif

lGrade := MaGrade() .And. !Empty(nCODPRO)

If lGrade .And. MatGrdPrrf(@cProduto)
	If !IsInCallStack("FwFldPut")
		oGrade:cProdRef := cProduto
		oGrade:lShowGrd := .T.
		oGrade:nPosLinO := n
		oGrade:Show(cCampo)

		oModel := FWModelActive()
		oModel := oModel:GetModel("DA1DETAIL")
		FwFldPut(cCampo,oGrade:SomaGrade(cCampo,n))
	
	EndIf
	
ElseIf cCampo # "DA1_PRCVEN"
	nAux := Oms010Calc()
	If oModel:GetValue(cCampo) <> nAux
		oModel:SetValue(cCampo,nAux)
	EndIf
ElseIf cCampo == "DA1_PRCVEN" .And. SuperGetMV("MV_TPEFETP",,"1") == "2" .And. !Inclui .And. !Empty(DA0->DA0_CODPUB)
	lRet := .F.
EndIf
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ OMSACalV ºAutor  ³Andre Anjos         º Data ³  17/11/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Calcula os valores dos campos para grade simulando a execu º±±
±±º          ³ cao dos gatilhos.                                          º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ OMSA010                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function OMSACalV()
Local lRet    := .T.
Local nColuna := aScan(aHeader,{|x| AllTrim(x[2]) == AllTrim(Substr(Readvar(),4))})
Local nPRV1   := Posicione("SB1",1,xFilial("SB1")+oGrade:GetNameProd(,n,nColuna),"B1_PRV1")
Local nValDig := &(ReadVar())

If oGrade:cCpo # "DA1_PRCVEN" .And. Empty(nPRV1)
	&(ReadVar()) := 0
Else
	Do Case
		Case oGrade:cCpo == "DA1_VLRDES"
			oGrade:aColsGrade[oGrade:nPosLinO,n,nColuna,oGrade:GetFieldGrdPos("DA1_PRCVEN")] := nPRV1 - nValDig
			oGrade:aColsGrade[oGrade:nPosLinO,n,nColuna,oGrade:GetFieldGrdPos("DA1_PERDES")] := (nPRV1 - nValDig) / nPRV1
		Case oGrade:cCpo == "DA1_PERDES"
			oGrade:aColsGrade[oGrade:nPosLinO,n,nColuna,oGrade:GetFieldGrdPos("DA1_PRCVEN")] := nPRV1 * nValDig
	EndCase
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ OMSASomG ºAutor  ³Andre Anjos		 º Data ³  17/11/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Soma grades para atualizar campos no aCols                 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ OMSA010                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function OMSASomG()
Local lRet 		:= .T.
Local nPRCVEN 	:= aScan(oGrade:aHeadAux, {|x| AllTrim(x[2]) == "DA1_PRCVEN"})
Local nVLRDES 	:= aScan(oGrade:aHeadAux, {|x| AllTrim(x[2]) == "DA1_VLRDES"})
Local nPERDES 	:= aScan(oGrade:aHeadAux, {|x| AllTrim(x[2]) == "DA1_PERDES"})

oGrade:lShowMsgDiff := .F.
Do Case
	Case oGrade:cCpo == "DA1_PRCVEN"
		oGrade:aColsAux[oGrade:nPosLinO,nVLRDES] := 0
		oGrade:aColsAux[oGrade:nPosLinO,nPERDES] := 0
		oGrade:ZeraGrade("DA1_VLRDES")
		oGrade:ZeraGrade("DA1_PERDES")
	Case oGrade:cCpo == "DA1_VLRDES"
		oGrade:aColsAux[oGrade:nPosLinO,nPRCVEN] := oGrade:SomaGrade("DA1_PRCVEN",oGrade:nPosLinO)
		oGrade:aColsAux[oGrade:nPosLinO,nPERDES] := oGrade:SomaGrade("DA1_PERDES",oGrade:nPosLinO)
	Case oGrade:cCpo == "DA1_PERDES"
		oGrade:aColsAux[oGrade:nPosLinO,nPERDES] := oGrade:SomaGrade("DA1_PERDES",oGrade:nPosLinO)
		oGrade:aColsAux[oGrade:nPosLinO,nPRCVEN] := oGrade:SomaGrade("DA1_PRCVEN",oGrade:nPosLinO)
		oGrade:aColsAux[oGrade:nPosLinO,nVLRDES] := 0
		oGrade:ZeraGrade("DA1_VLRDES")
EndCase
oGrade:lShowMsgDiff := .T.

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Os010PVAssoc ³ Autor ³ Vendas CRM            ³ Data ³01.03.10 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³Verifica se a tabela de precos está associada	                ³±±
±±³			 ³a um pedido de venda 								            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³.T. (tem PV associado) ou .F. (nao tem PV)                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1 : Codigo da tabela                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function Os010PVAssoc(cCodTab)

Local aArea		:= GetArea()
Local aAreaSC5	:= SC5->(GetArea())
Local lRet      := .F.
Local cArqInd	:= ""
Local cCond		:= ""
Local nIndex	:= 0
Local cQuery    := ""
Local cAliasSC5 := "SC5"

#IFDEF TOP
	If TcSrvType() <> "AS/400"
		cAliasSC5 := GetNextAlias()

		cQuery    := "SELECT COUNT(*) QTDREC FROM "
		cQuery    += RetSqlName("SC5")+ " SC5 "
		cQuery    += " WHERE C5_TABELA = '"+cCodTab+"' "
		If !Empty(xFilial("DA0"))
			cQuery	  += " AND C5_FILIAL = '"+xFilial("SC5")+"' "
		EndIf
		cQuery	  += " AND D_E_L_E_T_ = '' "

		cQuery := ChangeQuery(cQuery)
		DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSC5,.T.,.T.)

		If (cAliasSC5)->QTDREC > 0
			lRet := .T.
		Endif

		(cAliasSC5)->(dbCloseArea())
	Else
#ENDIF
		cArqInd	:= CriaTrab(,.F.)

		cCond	:= 'C5_FILIAL == "' + xFilial("SC5") + '" .AND. C5_TABELA == "' + cCodTab + '" '

		IndRegua("SC5",cArqInd,"C5_FILIAL+C5_TABELA",,cCond)
		DbSelectArea("SC5")
		nIndex := RetIndex("SC5")
		DbSetIndex(cArqInd+OrdBagExt())
		DbSetOrder(nIndex+1)
		DbGoTop()

		While SC5->(!Eof())

			If SC5->C5_TABELA == cCodTab
				lRet := .T.
				Exit
			Endif

			SC5->(DbSkip())
		End

		dbSelectArea("SC5")
		dbClearFilter()
		RetIndex("SC5")
		Ferase(cArqInd+OrdBagExt())

#IFDEF TOP
	EndIf
#ENDIF

RestArea(aAreaSC5)
RestArea(aArea)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Função    ³OMSA010Int³ Autor ³ Vendas CRM            ³ Data ³ 15/09/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³ Realiza integracao com a criterium ou outra integracao       ³±±
±±³          ³que utiliza o framework do SIGALOJA de integracao.            ³±±
±±³          ³ Os parâmetro aIntDA0 e aoIntDA1 normalmente são vazios.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³OMSA010Int()                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Momento da chamada, sendo:                             ³±±
±±³          ³           1: Antes de qualquer alteração                     ³±±
±±³          ³           2: Depois das alterações                           ³±±
±±³          ³ExpN2: Opção da rotina                                        ³±±
±±³          ³ExpA3: Array contendo o número do registro e adaptador do DA0.³±±
±±³          ³ExpA4: Array contendo os números dos registros e adaptadores  ³±±
±±³          ³       do DA1.                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function OMSA010Int( nMomento, nOpc, aIntDA0, aoIntDA1 )
Local lIntegra 	:= SuperGetMv("MV_LJGRINT", .F., .F.)	// Se há integração ou não

If lIntegra
	If nMomento == 1
		MsgRun( STR0026, STR0025, {|| OMSA010IniInt( nOpc, aIntDA0, aoIntDA1 ) } ) // "Aguarde" "Anotando registros para integração"
	ElseIf nMomento == 2
		MsgRun( STR0027, STR0025, {|| OMSA010FimInt( nOpc, aIntDA0, aoIntDA1 ) } ) // "Aguarde" "Executando integração"
	EndIf
EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Função    ³OMSA010IniInt³ Autor ³ Vendas CRM         ³ Data ³ 15/09/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³ Faz o cache dos itens antes de serem excluídos, possibilitan-³±±
±±³          ³do o envio dos mesmos, mesmo após de serem apagados.          ³±±
±±³          ³ Os parâmetro aIntDA0 e aoIntDA1 normalmente são vazios.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³OMSA010IniInt()                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Opção da rotina                                        ³±±
±±³          ³ExpA2: Array contendo o número do registro e adaptador do DA0.³±±
±±³          ³ExpA3: Array contendo os números dos registros e adaptadores  ³±±
±±³          ³       do DA1.                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function OMSA010IniInt( nOpc, aIntDA0, aoIntDA1 )
Local oFactory		:= LJCAdapXmlEnvFactory():New()
Local oTempIntDA1	:= Nil
Local cChave		:= ""

// Se houver integração e não for inclusão, anota todos os registros para exclusão, caso algum seja excluído
If nOpc != 3
	aIntDA0 :=	{ DA0->(Recno()), oFactory:Create( "DA0" ) }
	cChave 	:= xFilial( "DA0" ) + DA0->DA0_CODTAB
	aIntDA0[2]:Inserir( "DA0", cChave, "1", "5" )
	aIntDA0[2]:Gerar()
	
	aoIntDA1 := {}
	DbSelectArea( "DA1" )
	DbSetOrder( 1 )
	DbSeek( xFilial( "DA1" ) + DA0->DA0_CODTAB )
	// Interage com todos os registros relacionados
	While	xFilial( "DA1" )	== DA0->DA0_FILIAL	.And.;
			DA1->DA1_CODTAB		== DA0->DA0_CODTAB
		cChave := xFilial( "DA1" ) + DA1->DA1_CODTAB + DA1->DA1_ITEM
		oTempIntDA1 := oFactory:Create( "DA1" )
		oTempIntDA1:Inserir( "DA1", cChave, "3", "5" )
		oTempIntDA1:Gerar()
		aAdd( aoIntDA1, { DA1->( Recno() ), oTempIntDA1 } )
		DA1->( DbSkip() )
	End
EndIf
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Função    ³OMSA010FimInt³ Autor ³ Vendas CRM         ³ Data ³ 15/09/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³ Envia os itens apagados e todos os outros itens.             ³±±
±±³          ³ Os parâmetro aIntDA0 e aoIntDA1 normalmente são vazios.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³OMSA010FimInt()                                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: Opção da rotina                                        ³±±
±±³          ³ExpA2: Array contendo o número do registro e adaptador do DA0.³±±
±±³          ³ExpA3: Array contendo os números dos registros e adaptadores  ³±±
±±³          ³       do DA1.                                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function OMSA010FimInt( nOpc, aIntDA0, aoIntDA1 )
Local oFactory		:= LJCAdapXmlEnvFactory():New( )	// Cria a fabrica de Adaptadores de envio
Local cChave		:= ""
Local oTempIntDA1	:= Nil
Local nCount		:= 0								// Contador temporário

	// Verifica se houve algum registro apagado, e gera a integração desse registro
If nOpc != 3
		// Procura pelo registro do cabeçalho
	DA0->(DbGoTo( aIntDA0[1] ) )

		// Se não encontrar, significa que o cabeçalho foi apagado, então envia somente a exclusão do cabeçalho
	If DA0->( DELETED() )
		aIntDA0[2]:Finalizar()
	Else
		For nCount := 1 To Len( aoIntDA1 )
			DA1->( DbGoTo( aoIntDA1[nCount,1] ) )

			If DA1->( DELETED() )
				aoIntDA1[nCount,2]:Finalizar()
			EndIf
		Next
	EndIf
EndIf

	// Independente de ter registros apagados ou não, gera quando não for exclusão, todos os outros registros
If nOpc != 5
	aIntDA0 := { DA0->( Recno() ), oFactory:Create( "DA0" ) }
	cChave 	:= xFilial( "DA0" ) + DA0->DA0_CODTAB
	aIntDA0[2]:Inserir( "DA0", cChave, "1", cValToChar( nOpc ) )
	aIntDA0[2]:Gerar()
	aIntDA0[2]:Finalizar()

	aoIntDA1 := {}
	DbSelectArea( "DA1" )
	DbSetOrder( 1 )
	DbSeek( xFilial( "DA1" ) + DA0->DA0_CODTAB )
	While	xFilial( "DA1" )	== DA0->DA0_FILIAL	.And.;
			DA1->DA1_CODTAB		== DA0->DA0_CODTAB
		cChave := xFilial( "DA1" ) + DA1->DA1_CODTAB + DA1->DA1_ITEM
		oTempIntDA1 := oFactory:Create( "DA1" )
		oTempIntDA1:Inserir( "DA1", cChave, "3", cValToChar( nOpc ) )
		oTempIntDA1:Gerar()
		oTempIntDA1:Finalizar()
		aAdd( aoIntDA1, { DA1->( Recno() ), oTempIntDA1 } )
		DA1->( DbSkip() )
	End
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Om010CabOk³ Autor ³ Venda e CRM			³ Data ³ 05/02/10 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Responsavel em enviar os dados para integracao off-line    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Tabelas DA0, ACQ	                                          ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Om010CabOk(cProcesCab, cChaveCab, cTabelaCab)

Local aArea 		:= GetArea()
Local cTipo 		:= ""											//Como os dados serao integrados no processo offline
Local oProcessOff 	:= Nil											//Objeto do tipo LJCProcessoOffLine

//Verifica se o ambiente esta em off-line
If lAmbOffLn
	//Instancia o objeto LJCProcessoOffLine
	oProcessOff := LJCProcessoOffLine():New(cProcesCab) // CODIGO DO PROCESSO DA0

	//Determina o tipo de operacao
	If INCLUI
		cTipo := "INSERT"
	ElseIf ALTERA
		cTipo := "UPDATE"
	Else
		cTipo := "DELETE"
		//Considera os registros deletados
		SET DELETED OFF
	EndIf

	If !Empty(cTipo)
		//Insere os dados do processo (registro da tabela) DA0
		oProcessOff:Inserir(cTabelaCab, cChaveCab, 1, cTipo)

		//Processa os dados
		oProcessOff:Processar()
	EndIf

	//Desconsidera os registros deletados
	SET DELETED ON
EndIf

RestArea(aArea)

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Om010IteOk³ Autor ³ Venda e CRM			³ Data ³ 05/02/10 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Responsavel em enviar os dados para integracao off-line	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Tabelas DA1, ACR		                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function Om010IteOk(cProcesIte, cChaveIte, cTabelaIte, lExcluido, lNovo)


Local cTipo 		:= ""											//Como os dados serao integrados no processo offline
Local oProcessOff 	:= Nil											//Objeto do tipo LJCProcessoOffLine

//Verifica se o ambiente esta em off-line
If lAmbOffLn
	//Instancia o objeto LJCProcessoOffLine
	oProcessOff := LJCProcessoOffLine():New(cProcesIte)

	//Determina o tipo de operacao
	If INCLUI
		cTipo := "INSERT"
	ElseIf ALTERA
		cTipo := "UPDATE"
	   	If lExcluido
	   	   	cTipo := "DELETE"

	   	   	//Considera os registros deletados
			SET DELETED OFF
    	ElseIf lNovo
	   	   	cTipo := "INSERT"
	    EndIf
	Else
		cTipo := "DELETE"

		//Considera os registros deletados
		SET DELETED OFF
	EndIf

	If !Empty(cTipo)
		//Insere os dados do processo (registro da tabela) item
		oProcessOff:Inserir(cTabelaIte, cChaveIte, 1, cTipo)

		//Processa os dados
		oProcessOff:Processar()
	EndIf

	//Desconsidera os registros deletados
	SET DELETED ON
EndIf

Return Nil

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Oms010AddC  ³ Autor ³Vendas & CRM           ³ Data ³ 30/03/12 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³ Adiciona o Campo na Estrutura                              	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ oModel                                                      	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Oms010AddC(oStru,cCampo)
Local aArea 	:= GetArea()
Local aAreaSX3 	:= SX3->(GetArea())

DbSelectArea("SX3")
DbSetOrder(2)
If DbSeek(cCampo) .AND. !X3USO(X3_USADO)

	oStru:AddField(;
	 X3Titulo(),; 		//CTITULO
	 X3Descric(),; 	//CTOOLTIP
	 X3Titulo(),;		//CIDFIELD
	 X3_TIPO,;			//cTIPO
	 X3_TAMANHO,;		//Tamanho
	 X3_DECIMAL,;		//Decimal
	 {|| .T.},;		//Valid
	 NIL,;				//WHEN
	 NIL,;				//AValues
	 NIL,;				//Obrigat
	 NIL,;		//Init
	 NIL,;				//KEY
	 NIL,;				//NOUPD
	 NIL,;				//LVIRTUAL
	 "")				//VIRTUAL

EndIf
Return

//-------------------------------------------------------------------
/*/{Protheus.doc} IntegDef
Funcao para processamento de mensagem unica.
@author Danilo Dias
@since 02/04/2012
@version 1.0
@param cXML, caracter, Variavel com conteudo xml para envio/recebimento.
@param nTypeTrans, numeric, Tipo de transacao. (Envio/Recebimento)
@param cTypeMessage, caracter, Tipo de mensagem. (Business Type, WhoIs, etc)
@return ${return}, ${return_description}
/*/
//-------------------------------------------------------------------
Static Function IntegDef( xEnt, nTypeTrans, cTypeMessage, cVersion, cTransaction, lJSon ) 

Local aRet	:= {}
Default lJSon := .F.

//Verifica se é uma carga inicial
If ( IsInCallStack( 'OMSM010' ) )
	If ( AcionaEAI( FWModelActive( oModelCarga ), @xEnt ) == 1 )
		aRet := { .T., xEnt }
	Else
		aRet := { .F., xEnt }
	EndIf
Else
	If lJSon
		//Mensagem JSON
		aRet := OMSI010O( xEnt, nTypeTrans, cTypeMessage )
	Else
		//Mensagem XML
		aRet := OMSI010( xEnt, nTypeTrans, cTypeMessage )
	Endif
EndIf

Return aRet


//-------------------------------------------------------------------
/*/{Protheus.doc} AcionaEAI
Funcao para acionamento manual do EAI para envio de mensagem unica.
@author Danilo Dias
@since 02/04/2012
@version 1.0
@param oModel, objeto, Model da rotina que deve acionar o EAI.
@param cXml, caracter, Passada por refer?cia, recebe o xml de envio.
@return ${return}, ${return_description}
/*/
//-------------------------------------------------------------------
Static Function AcionaEAI( oModel, cXml )

//Salva contexto
Local aArea		:= GetArea()
Local aAreaXX4	:= XX4->(GetArea())
Local nRet			:= 1	//Retorno da funcao
Local aRet			:= {}	//Retorno da funcao de integracao
Local lRet			:= .T.	//Indica o sucesso na execucao da funcao de integracao

Private nControl	:= 1	//Controla os itens em envios multiplos

Default cXml		:= ""	//Xml para envio atraves do EAI

//Repete o laço quantas vezes for necessário para enviar os dados da Tabela de Preços
While .T.
	aRet := OMSI010("", TRANS_SEND, 0)
	lRet := aRet[1]
	cXml := aRet[2]
	If lRet
		//Verifica se adapter esta configurado para envio
		If FWEAICanSend(EAI_MESSAGE_MVC, oModel) .And. ! IsInCallStack("OMSM010")
			//Verifica o tipo de mensagem
			If FWHasEAI(/*cFunction*/, /*lVerifySend*/, /*lVerifyRec*/, .T. /*lVerifyUMess*/ )
				//Mensagem unica
				lRet := FWEAIMake(EAI_MESSAGE_BUSINESS, cXml)
			Else
				//MVC
				lRet := FWEAIMake(EAI_MESSAGE_MVC, oModel)
			Endif
		EndIf
		//Se nao houver mais conteudo a enviar, encerra.
		If nControl == -1
			Exit
		EndIf
	EndIf
EndDo

//Converte para numerico o retorno booleano
If !lRet
	nRet := -1
Else
	nRet := 1
EndIf
//Restaura contexto
RestArea(aAreaXX4)
RestArea(aArea)
Return nRet

/*/{Protheus.doc} Om10VldTab
Funcao para ajustar sequencia da tabela de preço por produto

@return logico, sempre verdadeiro

@author Vendas & CRM
@since 12/11/2013
@version 1.0
/*/
Function Om10VldTab()

Local cCodtab		:= ""
Local cItem			:= ""
Local aAreaDA1		:= DA1->(GetArea())
Local cQuery		:= ""
Local nX			:= 0
Local oModel		:= Nil
Local nLinBkp		:= 0
Local cCodProd		:= ""

oModel   := FWModelActive()
oModel   := oModel:GetModel("DA1DETAIL")
cCodtab  := oModel:GetValue('DA1_CODTAB')
cCodProd := oModel:GetValue('DA1_CODPRO')
nLinBkp  := oModel:GetLine()

If !Empty( cCodTab ) .And. !Empty(cCodProd)
	DA1->(DBSetOrder(1))
	If DA1->(DbSeek(xFilial("DA1")+cCodTab+cCodProd))
		oModel:SetValue('DA1_ITEM',DA1->DA1_ITEM)
	EndIf 
Else
	cQuery	:= "SELECT MAX(DA1_ITEM) ITEM FROM "+RetSqlTab('DA1') +"WHERE DA1_CODTAB='"+cCodtab+"' AND D_E_L_E_T_ = ' '"
	DBUseArea( .T., "TOPCONN", TcGenQry(,,cQuery), "TMPQRYAD1", .T., .T. )
	If TMPQRYAD1->(!Eof())
		cItem := TMPQRYAD1->ITEM
		cItem := Soma1(cItem)
		oModel:SetValue('DA1_ITEM',	"   ")
	EndIf
	TMPQRYAD1->(DBCloseArea())
	DA1->(DBSetOrder(3))	
	For nX := 1 To oModel:Length()
		oModel:GoLine(nX)
		If oModel:GetValue('DA1_CODTAB') == cCodtab .And. oModel:GetValue('DA1_ITEM') == cItem
			If !DA1->(MsSeek(xFilial("DA1")+cCodtab+cItem,.T.))
				cItem := Soma1(cItem)
			Endif
		EndIf
	Next nX
	oModel:GoLine(nLinBkp)
	oModel:SetValue('DA1_ITEM',cItem)
EndIf

RestArea(aAreaDA1)

Return .T.

/*/{Protheus.doc} VldQtdReg
Função para validar se a tabela pode ser alterada, visualizada, excluída ou copiada de acordo com o número de itens existente.

@return lRet, logico, Define se o registro pode ou não ser utilizado

@author Vendas & CRM
@since 26/12/2018
@version 1.0
/*/

Static Function VldQtdReg(nOpc, cCodTab)
	Local cAliasTmp	:= ""
	Local cQuery	:= ""
	Local lRet		:= .T.
	
	Pergunte("OMS010",.F.)

	If lCopia .Or. nOpc != 3
		If  nOpc == 5 .Or. lCopia .Or. (nOpc != 5 .And. MV_PAR01 == 1)
			cAliasTmp	:= GetNextAlias()

			cQuery := " SELECT COUNT(DA1_FILIAL)  QTDREG "
			cQuery += " FROM "+RetSqlName("DA1")+" DA1 "
			cQuery += " WHERE DA1.DA1_FILIAL = '"+xFilial("DA1")+"' AND "
			cQuery += " DA1.DA1_CODTAB = '" + cCodTab + "' AND "
			cQuery += " DA1.D_E_L_E_T_=' ' "

			cQuery := ChangeQuery(cQuery)

			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasTmp,.T.,.T.)

			If (cAliasTmp)->QTDREG > MAXGETDAD
				If nOpc == 5
					Help(NIL, NIL, "VldQtdReg01", NIL, STR0044 + STR0046, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0045})
					lRet := .F.
				ElseIf lCopia
					Help(NIL, NIL, "VldQtdReg02", NIL, STR0044 + STR0047, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0047})
					lRet := .F.		
				Else
					Help(NIL, NIL, "VldQtdReg03", NIL, STR0044, 1, 0, NIL, NIL, NIL, NIL, NIL, {STR0045})
					lRet := .F.
				EndIf
			EndIf

			(cAliasTmp)->(DbCloseArea())
		EndIf
	EndIf
	
Return lRet