#INCLUDE "MATA110.CH"  
#INCLUDE "PROTHEUS.CH"
#INCLUDE "TOPCONN.CH"  
#INCLUDE "FWADAPTEREAI.CH"
#INCLUDE 'FWLIBVERSION.CH'  

Static aRecSC1 		:= NIL
static aColsSCX		:= NIl
Static aHeadSCX		:= NIL
Static aDlgFields 	:= NIL
Static lMT110LOK	:= ExistBlock("MT110LOK")
Static lLGPD  	  := FindFunction("SuprLGPD") .And. SuprLGPD()
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Função    ³MATA110   ³Rev.   ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de atualizacao manual das solicitacoes de compra      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina permite as operacoes de pesquisa, visualizacao,  ³±±
±±³          ³inclusao, alteracao e exclusao das solicitacoes de compra.   ³±±
±±³          ³A cotacao somente pode ser alterada se e somente se nao hou- ³±±
±±³          ³ver cotacao em aberto ou pedido de compra colocado. Quando ha³±±
±±³          ³pedido de compra a quantidade pode ser alterada desde que a  ³±±
±±³          ³quantidade nao seja inferior ao do pedido de compra.         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Generico                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Define Array contendo as Rotinas a executar do programa      ³
//³ ----------- Elementos contidos por dimensao ------------     ³
//³ 1. Nome a aparecer no cabecalho                              ³
//³ 2. Nome da Rotina associada                                  ³
//³ 3. Usado pela rotina                                         ³
//³ 4. Tipo de Transa‡„o a ser efetuada                          ³
//³    1 - Pesquisa e Posiciona em um Banco de Dados             ³
//³    2 - Simplesmente Mostra os Campos                         ³
//³    3 - Inclui registros no Bancos de Dados                   ³
//³    4 - Altera o registro corrente                            ³
//³    5 - Remove o registro corrente do Banco de Dados          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Function Mata110(xAutoCab,xAutoItens, nOpcAuto,lProj711,lWhenGet,xRatSC,xRatProj) 
Local bBlock
Local cFiltraSC1
Local cMt110Fil  := ""
Local aRotinaNew := {}
Local nPos       := 0
Local nX         := 0
Local nRegSC1    := 0
Local lContinua  := .T.
Local aCores     := {}
Local aCoresNew  := {}
Local lAProvSI   := SuperGetMv("MV_APROVSI",.F.,.F.)
Local lMkPlace	:= SuperGetMv("MV_MKPLACE",.F.,.F.)
Local cFilQuery	 := ""  
local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local cTpCto     := iif (lSCCNI, SuperGetMV("MV_TPSCCT",.F.,""), '')  
Local cFilSC1	:= xFilial("SC1")

Private lGeraSCR  	:= SuperGetMv("MV_APROVSC",.F.,.F.)
Private lAlcSolCtb	:= SuperGetMv("MV_APRSCEC",.F.,.F.)
Private cGrpAprov	:= SuperGetMv("MV_APGRDFL",.F.,"")

If lMkPlace
	aAdd(aCores,{'C1_ACCPROC =="1" .And. C1_PEDIDO == Space(Len(C1_PEDIDO))','PMSEDT3'	})	//"Solicitação Pendente (MarketPlace)
	aAdd(aCores,{'C1_ACCPROC =="1" .And. C1_PEDIDO == Space(Len(C1_PEDIDO)) .And. C1_COTACAO <> Space(Len(C1_COTACAO)) ','PMSEDT2'	})	//"Solicitação em Processo de Cotação (MarketPlace)
Endif

aAdd(aCores,{"C1_RESIDUO == 'S' .And. C1_COMPRAC == '1'","BR_VIOLETA"}) //-- SC em Compra Centralizada

If lSCCNI
	If(SC1->(FieldPos("C1_XCLASSI") > 0))		
		aAdd(aCores,{'C1_XCLASSI .And. C1_APROV == "B"','BR_VERDE_ESCURO'})
	EndIf
	//-- Integracao com o modulo de Gestao de Contratos 
	If(SC1->(FieldPos("C1_XTIPOSC") > 0 .And. FieldPos("C1_XSTGCT") > 0))
		aAdd(aCores,{'Empty(C1_RESIDUO) .And. C1_XSTGCT == "1" .And. C1_APROV $ " ,L" .And. C1_XTIPOSC == "'+ cTpCto + '"','metas_cima_16'})	
		aAdd(aCores,{'Empty(C1_RESIDUO) .And. C1_XSTGCT == "2" .And. C1_APROV $ " ,L" .And. C1_XTIPOSC == "'+ cTpCto + '"','metas_baixo_16'})
	EndIf
EndIf

aAdd(aCores,{'C1_FLAGGCT == "1" .And. C1_QUJE < C1_QUANT','BR_MARROM'}) //-- SC Totalmente Atendida pelo SIGAGCT
aAdd(aCores,{'C1_TIPO == 2','BR_BRANCO'	}) //-- Solicitacao de Importacao	
aAdd(aCores,{'!Empty(C1_RESIDUO)','BR_PRETO'})	//-- SC Eliminada por Residuo
aAdd(aCores,{'(C1_QUJE >= C1_QUANT)','DISABLE'})	//-- SC com Pedido Colocado
aAdd(aCores,{'C1_TPSC == "2" .And. C1_QUJE == 0 .And. !Empty(SC1->C1_CODED)','PMSEDT4'})	//"Solicitação em Processo de Edital"
aAdd(aCores,{'C1_TPSC != "2" .And. C1_QUJE > 0 .And. C1_COTACAO <> Space(Len(C1_COTACAO)) .And. C1_COTACAO <> Replicate("X",Len(C1_COTACAO)) .And. C1_IMPORT <>"S"','PMSEDT1'})  // Solicitação Parcialmente Atendida Utilizada em Cotação
aAdd(aCores,{'C1_QUJE == 0 .And. C1_APROV $ " ,L" .And. ((C1_COTACAO == Space(Len(C1_COTACAO)) .And. C1_TPSC == "2") .Or. (C1_COTACAO == "ANALIS")) ','LIGHTBLU'}) //Solicitacao para Licitacao

if (lSCCNI .And.  SC1->(FieldPos("C1_XTIPOSC") > 0))                                                                             
	aAdd(aCores,{"C1_XTIPOSC <> '" +cTpCto +"' .And. " +'C1_QUJE == 0 .And. C1_COTACAO == Space(Len(C1_COTACAO)) .And. C1_APROV $ " ,L"','ENABLE'}) //SC em Aberto
Else
	aAdd(aCores,{'C1_QUJE == 0 .And. C1_COTACAO == Space(Len(C1_COTACAO)) .And. C1_APROV $ " ,L"','ENABLE'})	//SC em Aberto
EndIf

If lAprovSI     	
	aAdd(aCores,{'C1_QUJE == 0 .And. (C1_COTACAO == Space(Len(C1_COTACAO)) .Or. C1_COTACAO == "IMPORT") .And. C1_APROV == "R"','BR_LARANJA'})	//SC Rejeitada
	aAdd(aCores,{'C1_QUJE == 0 .And. (C1_COTACAO == Space(Len(C1_COTACAO)) .Or. C1_COTACAO == "IMPORT") .And. C1_APROV == "B"','BR_CINZA'})		//SC Bloqueada
Else
	aAdd(aCores,{'C1_QUJE == 0 .And. C1_COTACAO == Space(Len(C1_COTACAO)) .And. C1_APROV == "R"','BR_LARANJA'})		//SC Rejeitada
	aAdd(aCores,{'C1_QUJE == 0 .And. (C1_COTACAO == Space(Len(C1_COTACAO)) .Or. C1_COTACAO == "IMPORT") .And. C1_APROV == "B"','BR_CINZA'})		//SC Bloqueada
EndIf

aAdd(aCores,{'C1_QUJE > 0 .AND. C1_QUJE < C1_QUANT','BR_AMARELO'})	//SC com Pedido Colocado Parcial                                                  
aAdd(aCores,{'C1_TPSC != "2" .And. C1_QUJE == 0 .And. C1_COTACAO <> Space(Len(C1_COTACAO)) .And. C1_IMPORT <>"S"','BR_AZUL'})	//SC em Processo de Cotacao

If lAprovSI     	
	aAdd(aCores,{'C1_QUJE == 0 .And. C1_COTACAO <> Space(Len(C1_COTACAO)) .And. C1_IMPORT == "S" .And.C1_APROV $ " ,L"','BR_PINK'})		//SC com Produto Importado
Else
	aAdd(aCores,{'C1_QUJE == 0 .And. C1_COTACAO <> Space(Len(C1_COTACAO)) .And. C1_IMPORT == "S"','BR_PINK'	})	//SC com Produto Importado
EndIf

// Variaveis criada para integracao com MRP - NAO REMOVER
DEFAULT lProj711    := .F.
DEFAULT lWhenGet	:= .F.
PRIVATE lProjM711	:= If(ValType(lProj711)== "L",lProj711,.F.)
PRIVATE aRotina		:= MenuDef() // ALTERADO PARA SIGAGSP
PRIVATE cCadastro	:= OemtoAnsi(STR0011)	//"Solicita‡„o de Compras"
PRIVATE l110Auto	:= (xAutoCab <> Nil .and. (xAutoItens <> Nil .Or. nOpcAuto==5))
PRIVATE aAutoCab	:= {}
PRIVATE aAutoItens	:= {}
PRIVATE aRatSC  	:= If(xRatSC<>NIL,xRatSC,{})
PRIVATE aRatProj    := If(xRatProj<>NIL,xRatProj,{})
PRIVATE bFiltraBrw	:= {|| Nil}
PRIVATE lCopia      := .F.
PRIVATE l110Alt     := .T.
PRIVATE lGrade      := MaGrade()
PRIVATE lGatilha    := .T.  // Para preencher aCols em funcoes chamadas da validacao (X3_VALID)    
PRIVATE cReqSol 
PRIVATE cCCusto		:= "" 
PRIVATE cNumCt
PRIVATE cNumRev		:= ""             
PRIVATE cTpSC
PRIVATE lMata712	:= .F.
PRIVATE lPCPA107    := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//Variáveis utilizadas somente pelo MRP Multi-empresa³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE lPmp107     := .F.
PRIVATE nRec107     := 0
PRIVATE cPeri107    := ""

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ O parametro MV_VLDHEAD e' usado para validar ou nao o aCols          ³
//³ (uma linha ou todo), a partir das validacoes do aHeader -> VldHead() ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE lVldHead	:= GetNewPar( "MV_VLDHEAD",.T. )
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Variaveis declaradas para guardar as informacoes do rateio qdo for alteracao³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
PRIVATE nFAltRat    := 0
PRIVATE nFAltRat2   := 0
PRIVATE aCPHSCX     := {}
PRIVATE ACPISCX     := {}
PRIVATE aOrigHeader := {}
PRIVATE aOrigAcols  := {}
PRIVATE cA110Num	:= ""

Private lPWhenGet := lWhenGet

If lWhenGet
	//Se utiliza interface em ExecAuto, exibe os Avisos
	Private lMsHelpAuto	 := .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Ponto de entrada para inclusão de novos itens no menu aRotina³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT110ROT")
	aRotinaNew := ExecBlock("MT110ROT",.F.,.F.,aRotina)
	If ( ValType(aRotinaNew) == "A" )
		aRotina := aClone(aRotinaNew)
	EndIf

EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para alterar cores do Browse do Cadastro    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT110COR")
	aCoresNew := ExecBlock("MT110COR",.F.,.F.,{aCores})
	If ValType(aCoresNew) == "A"
		aCores := aCoresNew
	EndIf
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ VerIfica a permissao do programa em relacao aos modulos      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( AMIIn(02,04,05,06,07,09,10,12,19,34,97,98,44,67,69,72,87) )

	If !( l110Auto )
		SetKey(VK_F12,{|| Pergunte("MTA110",.T.)})
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ mv_par01 - Descricao do Produto   B5_CEME X B5_DESC            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Pergunte("MTA110",.F.)
	dbSelectArea("AFG")
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Endereca a funcao de BROWSE                                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !( l110Auto ) .Or. lWhenGet
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ VerIfica a existencia de Filtros na mBrowse                  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC1->(dbSetOrder(1))
		If (ExistBlock("MT110FIL"))
			cMt110Fil := ExecBlock("MT110FIL",.f.,.f.)
			If ( ValType(cMt110Fil) == "C" ) .And. !Empty(cMt110Fil)
				cFiltraSC1 := cMt110Fil
			EndIf

		EndIf
		If lWhenGet
			dbSelectArea("SC1")
			If nOpcAuto == 3
				aAutoCab   := xAutoCab
				aAutoItens := xAutoItens
			Else
				aAutoCab := MSArrayXDB(xAutoCab,,nOpcAuto)
				nRegSC1 := SC1->(RecNo())
				If ( !Empty(aAutoCab) )
					For nX := 1 To Len(xAutoItens)
						aadd(aAutoItens,MSArrayXDB(xAutoItens[nX],,nOpcAuto,.T.))
						If Empty(aAutoItens[nX])
							lContinua := .F.
						EndIf
					Next nX
				EndIf
				dbSelectArea("SC1")
				If (SC1->(RecNo()) # nRegSC1)
					SC1->(dbGoTo(nRegSC1))
				EndIf
			EndIf
		EndIf
		If nOpcAuto<>Nil
			nPos := Ascan(aRotina,{|x| x[4]== nOpcAuto})
			If ( nPos # 0 )
				bBlock := &( "{ |x,y,z,k,m| " + aRotina[ nPos,2 ] + "(x,y,z,k,m) }" )
				Eval( bBlock,Alias(),SC1->(Recno()),nPos,Nil,lWhenGet)
			EndIf
		Else
			dbSelectArea("SC1")
			MsSeek(cFilSC1)
			
			If !ExistBlock("MT110FIL")
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ P.E. Utilizacao: Filtro da Mbrowse para ambiente Top         ³
			    //³ - Executado somente se nao utilizar MT110FIL                 ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ                
				If ExistBlock("MT110QRY")
			    	cFilQuery := AllTrim(ExecBlock("MT110QRY",.F.,.F.))
					If Valtype(cFilQuery) <> "C"
						cFilQuery := ""		
					EndIf 
				Else
					If Empty(xFilial('SC1'))
						cFilQuery := "C1_FILIAL = '" + xFilial('SC1')+ "'"
					EndIf                      
				EndIf
			EndIf
			        			   	
			mBrowse( 6, 1,22,75,"SC1",,,,,,aCores,,,,,,,,IIF(!Empty(cFilQuery),cFilQuery, NIL),,,,cFiltraSC1)     
		   	
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Desativa tecla que aciona perguntas                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Set Key VK_F12 To
	Else
		aAutoCab   := xAutoCab
		aAutoItens := xAutoItens
		
		//Verifica se rotina está sendo chamado do programa novo de MRP
		nPos := aScan(aAutoCab,{|x| x[1] == "MRPNOVO"})
		If (nPos > 0 .and. aAutoCab[nPos,2] == "S" )
			lMata712 := .T.
		Else
			lMata712 := .F.
		EndIf
		
		//Verifica se rotina está sendo chamado do programa novo de MRP Multi-empresa
		nPos := aScan(aAutoCab,{|x| x[1] == "MRPME"})
		If (nPos > 0 .and. aAutoCab[nPos,2] == "S" )
			lPCPA107 := .T.
			nPos := aScan(aAutoCab,{|x| x[1] == "PMP"})
			If nPos > 0
				lPmp107 := aAutoCab[nPos,2]
			EndIf
			nPos := aScan(aAutoCab,{|x| x[1] == "RECNO"})
			If nPos > 0
				nRec107 := aAutoCab[nPos,2]
			EndIf
			nPos := aScan(aAutoCab,{|x| x[1] == "PERIODO"})
			If nPos > 0
				cPeri107 := aAutoCab[nPos,2]
			EndIf
		Else
			lPCPA107 := .F.
		EndIf
     
		DEFAULT nOpcAuto	:= 3
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Valida o array Rateio por CCusto - rotina automatica	       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		lContinua := A110RatAut(aRatSC, nOpcAuto)
		If lContinua
			If Len(aRatSC) > 0
				ACPISCX:=aClone(aRatSC)
			EndIf

			MBrowseAuto(nOpcAuto,Aclone(aAutoCab),"SC1")
		
		EndIf
	EndIf	
	ClrVarXAlc()//Limpar as variáveis estáticas do matxalc, utilizadas no processo de controle de permissoes do solicitante x entidades contábeis
EndIf
Return

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Visual³Rev.   ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de visualizacao das solicitacaoes de compra           ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                    ³±±
±±³          ³ ExpN2 = Numero do registro                                  ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo visualizar as solicitacoes de  ³±±
±±³          ³compra utilizando-se uma modelo 2                            ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Visual(cAlias,nReg,nOpcx)

Local aArea			:= GetArea()
Local aSizeAut		:= MsAdvSize(,.F.)
Local oDlg
Local oGet
local lSCCNI		:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local oSolic
Local oTpOP
Local aInfo 		:= {}
Local aPosGet		:= {}
Local aPosObj		:= {}
Local oSize 		:= nil
Local aBut110		:= {}
Local aButtonUsr    := {}
Local aBtnBack		:= {}
Local aPosObjPE     := {}
Local lNaturez      := ( SC1->(FieldPos("C1_NATUREZ") ) > 0 .And. cPaisLoc <> "BRA")
Local nBack         := NIL
Local cFilEnt       := SC1->C1_FILENT
Local nX            := 1
Local lGspInUseM 	:= If(Type('lGspInUse')=='L', lGspInUse, .F.)
Local lMt110Get     := ExistBlock("MT110GET")
Local lMt110TEL     := ExistBlock("MT110TEL")
Local lTpOp 		:= SuperGetMV("MV_TPOPDOC",.F.,.F.)
Local lGrade	    := MaGrade()
Local lAtivaDRP		:= GetNewPar("MV_LJDRP",.F.)			// Parâmetro para ativação de DRP Neogrid
Local nLinMax		:= GetNewPar("MV_COMLMAX", 999)
Private cSolic 		:= SC1->C1_SOLICIT
PRIVATE dA110Data 	:= SC1->C1_EMISSAO
PRIVATE cCodNatu	:= IIf(lNaturez,SC1->C1_NATUREZ,"")
PRIVATE cCCusto     := SC1->C1_CC
PRIVATE cUnidReq    := SC1->C1_UNIDREQ
PRIVATE cCodCompr   := SC1->C1_CODCOMP
PRIVATE cTpOP		:= If(Empty(SC1->C1_TPOP),"F",SC1->C1_TPOP)
PRIVATE aRotina		:= MenuDef()
PRIVATE aHeader   	:= {}
PRIVATE aCols 		:= {}
PRIVATE aRatAFG     := {}
Private aHdrAFG		:= {}
PRIVATE bPMSDlgSC	:= {||}

PRIVATE cDescTp 	:= iif (lSCCNI, Posicione("COL",1,xFilial("COL")+SC1->C1_XTIPOSC,"COL_DESC"),'')
PRIVATE cReqSol	    := iif (lSCCNI, SC1->C1_XSOL   , '') 
PRIVATE cNumCT	    := iif (lSCCNI, SC1->C1_XNUMCT , '') 
PRIVATE cNumRev	    := iif (lSCCNI, SC1->C1_XNUMREV, '') 
PRIVATE cDRP			:= IIf(SC1->C1_ORIGEM = "LOJA7033",STR0059,STR0060)  //Sim#Não


PRIVATE oGrade	  := MsMatGrade():New('oGrade',,"C1_QUANT",,"A110GValid()",,;
  						{ 	{"C1_QUANT" ,.T., {{"C1_QTSEGUM",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),aCols[nLinha][nColuna],0,2) } }} },;
  							{"C1_ITEM",NIL,NIL},;
							{"C1_DATPRF",NIL,NIL},;
  							{"C1_QTSEGUM",.T., {{"C1_QUANT",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),0,aCols[nLinha][nColuna],1) }}} } })

aColsSCX	 	:= {} //Inicializando Variável Static
aHeadSCX		:= {}

If Type("lGeraSCR") == "U"
	lGeraSCR := SuperGetMv("MV_APROVSC",.F.,.F.)
Endif

If Type("lAlcSolCtb") == "U"
	lAlcSolCtb := SuperGetMv("MV_APRSCEC",.F.,.F.)
Endif

cA110Num    := SC1->C1_NUM
bPMSDlgSC	:= {||PmsDlgSC(2,ca110Num)}

If lSCCNI                         
	cTpSC := SC1->C1_XTIPOSC 
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Guarda o conteudo de N                                       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type( "N" ) == "N"
	nBack := N
EndIf

If SC1->C1_TIPO == 2
	Help(" ",1,"A113TIPO")
	RestArea(aArea)
	Return
EndIf

If A110Monta(2,,,nOpcX)

	aCols := aColsGrade(oGrade, aCols, aHeader, "C1_PRODUTO", "C1_ITEM", "C1_ITEMGRD")

	N := 1

	If IntePms()		// Se usa PMS integrado com o ERP
		aBut110 := {{'PROJETPMS',{||Eval(bPmsDlgSC)},STR0028 + " - <F10>" ,STR0054}}

	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Botao para consultar Historico do Produto               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aadd(aBut110,{"S4WB005N",{|| A110ComView() },STR0065,STR0066 })  //Historico de Produtos

	If !AtIsRotina("A110TRACK")
		AAdd(aBut110  ,{ "bmpord1", {|| A110Track() }, OemToAnsi(STR0029), OemToAnsi(STR0037) } )  // "System Tracker"
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Botao para exportar dados para EXCEL                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If RemoteType() == 1
		aAdd(aBut110 ,{PmsBExcel()[1],{|| DlgToExcel({{"CABECALHO","",{RetTitle("C1_NUM") ,RetTitle("C1_SOLICIT"),RetTitle("C1_EMISSAO"),RetTitle("C1_FILENT")},{cA110Num,cSolic ,dA110Data,cFilEnt}},{"GETDADOS","",aHeader,aCols}})},PmsBExcel()[2],PmsBExcel()[3]})
	EndIf
    
	If lAlcSolCtb
		Aadd(aBut110,{"S4WB005N",{|| lResid:=a110Resid(), a120Posic(cAlias,nReg,nOpcX,"SC",.T.,lResid)},OemToAnsi(STR0110), OemToAnsi(STR0111)})
	Endif
		
	aAdd(aBut110,{'S4WB013N',{|| a110RatCC(aHeadSCX,aColsSCX,.F.)},STR0082,STR0083}) //"Rateio por Item da Solicitação"##"Rateio"
	aAdd(aBut110,{'S4WB013N',{|| A110LegIt()},STR0023,STR0023})	//"Legenda"
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array contendo as registros do SCX ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	A110AcoSCX(@aHeadSCX,@aColsSCX)
					
	If ( ExistBlock("MA110BAR") )
		aButtonUsr := ExecBlock("MA110BAR",.F.,.F.,{nOpcx})
		If ( ValType(aButtonUsr) == "A" )
			For nX := 1 To Len(aButtonUsr)
				Aadd(aBut110,aClone(aButtonUsr[nX]))
			Next nX
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
	//³ Este PE foi criado porque o PE acima (MA110BAR) nao permite manipular³
	//³ botoes da enchoicebar.                                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock( "MA110BUT" )
		aBtnBack := aClone(aBut110)
		aBut110 := ExecBlock( "MA110BUT", .F., .F., { nOpcx, aBut110 } )
		If ValType( aBut110 ) # "A"
			aBut110 := aClone(aBtnBack)
		EndIf
	EndIf

	If IntePMS() .And. (!Type("l110Auto") == "L" .Or. !l110Auto)
		SetKey(VK_F10, {|| Eval(bPmsDlgSC)})
	EndIf
	
	aInfo := { aSizeAut[ 1 ], aSizeAut[ 2 ], aSizeAut[ 3 ], aSizeAut[ 4 ], 2, 2 }

	DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0011)+' - '+OemToAnsi(STR0007) From aSizeAut[7],0 TO aSizeAut[6],aSizeAut[5] OF oMainWnd PIXEL		//"Solicita‡„o de Compras"
	oSize := FwDefSize():New(.T.,,,oDlg)

	if	lSCCNI	
		oSize:AddObject('HEADER',100,65,.T.,.F.)
	ElseIf (!lGspInUse .AND. !__lPyme .AND. lNaturez) .OR. lTpOp
		oSize:AddObject('HEADER',100,55,.T.,.F.)//Definição antiga do dimensionamento
	Else
		oSize:AddObject('HEADER',100,30,.T.,.F.)
	EndIf       

	oSize:AddObject('GRID'  ,100,10,.T.,.T.)
	
	oSize:aMargins 	:= { 3, 3, 3, 3 }
	oSize:Process()	
	

	aAdd(aPosObj,{oSize:GetDimension('HEADER', 'LININI'),oSize:GetDimension('HEADER', 'COLINI'),oSize:GetDimension('HEADER', 'LINEND'),oSize:GetDimension('HEADER', 'COLEND')})
	aAdd(aPosObj,{oSize:GetDimension('GRID'  , 'LININI'),oSize:GetDimension('GRID'  , 'COLINI'),oSize:GetDimension('GRID'  , 'LINEND'),oSize:GetDimension('GRID'  , 'COLEND')})

	If lNaturez     			
		if lSCCNI
			aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,45,105,145,225,265,175,210,235,260}})
		Else
			aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,35,105,145,225,265,167,203,245,270}})
		EndIf					
	Else
		aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,35,105,145,225,265,210,255}})
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Ponto de Entrada para Alterar as cordenas da dialog de SCs    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lMt110Get
		aPosObj := If(ValType(aPosObjPE:=ExecBlock("MT110GET",.F.,.F.,{aPosObj,nOpcx}))== "A",aPosObjPE,aPosObj)
	Endif

	// Para a CNI nao precisa da borda, pois como novos campos sao criados via PE, fica desposicionado.
	IF !lSCCNI
	   @ aPosObj[1,1],aPosObj[1,2] TO aPosObj[1,3],aPosObj[1,4] LABEL ""  OF oDlg PIXEL
    ENDIF
    
	@ aPosObj[1,1]+3,aPosGet[1,1] 	SAY OemToAnsi(STR0012) of oDlg PIXEL SIZE 20,09	//"&N£mero"
	@ aPosObj[1,1]+2,aPosGet[1,2] 	MSGET cA110Num Picture PesqPict("SC1","C1_NUM") When .F. of oDlg PIXEL SIZE 20,10

	If lAtivaDRP	//Importado via DRP
		@ aPosObj[1][1]+3,aPosGet[1,1]+110 SAY   "DRP?"   OF oDlg PIXEL SIZE 060,006             // "DRP?"
		@ aPosObj[1][1]+2,aPosGet[1,2]+80 MSGET oGetMoeda VAR cDRP ;
				PICTURE PesqPict("SC1","C1_DRPIMP") WHEN .F. PIXEL SIZE 20,10 OF oDlg
	EndIf
	
	@ aPosObj[1,1]+3,aPosGet[1,3] 	SAY OemToAnsi(STR0013) of oDlg PIXEL SIZE 31,9	//"&Solicitante"
	@ aPosObj[1,1]+2,aPosGet[1,4] 	MSGET oSolic VAR cSolic	Picture PesqPict("SC1","C1_SOLICIT") When .F. SIZE 80,10 of oDlg PIXEL
	If(lLGPD,OfuscaLGPD(oSolic,"C1_SOLICIT"),.F.)


	@ aPosObj[1,1]+3,aPosGet[1,5] 	SAY OemToAnsi(STR0014) of oDlg PIXEL SIZE 45,9 //"&Data de Emiss„o"
	@ aPosObj[1,1]+2,aPosGet[1,6] 	MSGET dA110Data  	Picture PesqPict("SC1","C1_EMISSAO") When .F. SIZE 45,10 of oDlg PIXEL

	If !lGspInUseM
		If ! __lPyme
			@ aPosObj[1,1]+17,aPosGet[2,1] 	SAY OemToAnsi(STR0016) of oDlg PIXEL  SIZE 45,10		//"&Unid. Requis."
			@ aPosObj[1,1]+16,aPosGet[2,2]	MSGET cUnidReq  	Picture PesqPict("SC1","C1_UNIDREQ") 	When .F. of oDlg PIXEL

			@ aPosObj[1,1]+17,aPosGet[1,3] 	SAY OemToAnsi(STR0017)	of oDlg PIXEL SIZE 45,10	//"&Cod. Comprador"
			@ aPosObj[1,1]+16,aPosGet[1,4]	MSGET cCodCompr 	Picture PesqPict("SC1","C1_CODCOMP") Valid A110CodCompr(cCodCompr)	When .F. of oDlg PIXEL
		EndIf


		If lNaturez
			@ aPosObj[1,1]+17,aPosGet[2,7]  SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega"
			If FWModeAccess("SC7") == "E"                                                      
				if lSCCNI
					@ aPosObj[1,1]+16,aPosGet[2,8]  MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
					Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 019,006
				Else
					@ aPosObj[1,1]+16,aPosGet[2,8]  MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
					Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 058,006
				EndIf
				
				@ aPosObj[1,1]+17,aPosGet[2,9]  SAY Alltrim(RetTitle("C1_NATUREZ"))	 Of oDlg PIXEL	SIZE 45,10	//"&Cod. Comprador"
				@ aPosObj[1,1]+16,aPosGet[2,10] MSGET cCodNatu F3 CpoRetF3("C1_NATUREZ") Picture PesqPict("SC1","C1_NATUREZ") When .F. Of oDlg PIXEL SIZE 50,10
			Else
				@ aPosObj[1,1]+16,aPosGet[2,8]  MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
					Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 020,006			
				@ aPosObj[1,1]+17,aPosGet[2,9]  SAY Alltrim(RetTitle("C1_NATUREZ"))	 Of oDlg PIXEL	SIZE 45,10	//"&Cod. Comprador"
				@ aPosObj[1,1]+16,aPosGet[2,10] MSGET cCodNatu F3 CpoRetF3("C1_NATUREZ") Picture PesqPict("SC1","C1_NATUREZ") When .F. Of oDlg PIXEL SIZE 50,10					
			EndIf
		Else
			@ aPosObj[1,1]+17,aPosGet[2,7] SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega" 
			
			if lSCCNI
				@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
					Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 019,006
			Else
				@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
					Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 062,006
			EndIf
			
		EndIf

   EndIf
                     
	If lTpOp
		@ aPosObj[1,1]+30,aPosGet[2,1] SAY Alltrim(RetTitle("C1_TPOP")) Of oDlg PIXEL		//Firme ou previsto C1_TPOP		
		@ aPosObj[1,1]+30,aPosGet[2,2] COMBOBOX oTpOP VAR cTpOp ITEMS StrTokArr(x3cbox(),';') When .F. SIZE 100,10 Of oDlg PIXEL	
	EndIf
	
	if lSCCNI
	
   		
	   	@ aPosObj[1,1]+31,aPosGet[1,1]  SAY OemToAnsi(STR0156) OF oDlg PIXEL SIZE 038,006  //"Tipo doc."
		@ aPosObj[1,1]+30,aPosGet[1,2]  MSGET cTpSC  PICTURE PesqPict("SC1","C1_XTIPOSC") WHEN .F.  OF oDlg PIXEL SIZE 80,10   
		
		@ aPosObj[1,1]+31,aPosGet[1,3]  SAY OemToAnsi(STR0157) OF oDlg PIXEL SIZE 038,006  //"Desc. Tipo doc."
		@ aPosObj[1,1]+30,aPosGet[1,4]  MSGET cDescTp WHEN .F. OF oDlg PIXEL SIZE 80,10
	    
	    
		@ aPosObj[1,1]+31,aPosGet[1,5]  SAY OemToAnsi(STR0158) OF oDlg PIXEL SIZE 038,006  //"Requisitante SC"
		@ aPosObj[1,1]+30,aPosGet[1,6]  MSGET cReqSol  WHEN .F.  OF oDlg PIXEL SIZE 80,10   
		
		@ aPosObj[1,1]+45,aPosGet[1,1]  SAY OemToAnsi(STR0159) OF oDlg PIXEL SIZE 045,006  //"Centro de Custo"
		@ aPosObj[1,1]+44,aPosGet[1,2]  MSGET cCCusto  WHEN .F.  OF oDlg PIXEL SIZE 80,10 
		
		@ aPosObj[1,1]+45,aPosGet[1,3]  SAY OemToAnsi(STR0160) OF oDlg PIXEL SIZE 038,006  //"Num. Contrato"
		@ aPosObj[1,1]+44,aPosGet[1,4]  MSGET cNumCt  WHEN .F.  OF oDlg PIXEL SIZE 80,10 
		
		@ aPosObj[1,1]+45,aPosGet[1,5]  SAY OemToAnsi(STR0161) OF oDlg PIXEL SIZE 038,006  //"Revisao Ct."
	 	@ aPosObj[1,1]+44,aPosGet[1,6]  MSGET cNumRev  WHEN .F.  OF oDlg PIXEL SIZE 80,10 
	 	
	Else
	
		For nX:=1 To Len(aCols)
			n := nX
			A110AltLeg(.T.)			 
		Next nX 		
		
	EndIf


	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Ponto de Entrada para manipular os Gets da Dialog da SC.      ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lMt110TEL
		ExecBlock("MT110TEL",.F.,.F.,{@oDlg, aPosGet, nOpcx, nReg} )
	EndIf          
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Criacao da Area da MsGetDados do SC   ³	
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lGrade .And. FunName() == 'MATA110'
		oGet := MsGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],4,,,"",,{},,,nLinMax)
	Else
		oGet := MSGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpcx,"A110LinOk","A110TudOk",/*cIniCpos*/,/*lDeleta*/,{},,,nLinMax)
	EndIf
    oGet:oBrowse:Refresh()
	cCadastro	:= OemtoAnsi(STR0011)

	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||oDlg:End()},{||oDlg:End()},, aBut110)
	
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura o conteudo de N                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ValType( nBack ) == "N"
	N := nBack
EndIf

If IntePMS() .And. (!Type("l110Auto") == "L" .Or. !l110Auto)
	SetKey(VK_F10, Nil)
EndIf

RestArea(aArea)
Return
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Inclui³Rev.   ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de inclusao das solicitacoes de compra                ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                    ³±±
±±³          ³ ExpN2 = Numero do registro                                  ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo possibilitar a inclusao manual ³±±
±±³          ³das solicitacoes de compra utilizando-se de uma modelo 2     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Inclui(cAlias,nReg,nOpcx,lCopia,lWhenGet,lContinua)

Local nSaveSX8  := GetSX8Len()
Local nSavOrd   := IndexOrd()
Local nOpcA     := 0
Local oDlg
Local oGet
Local oReq
Local oComp
Local oTpOP
Local lMt110Get := ExistBlock("MT110GET")
Local lMt110TEL := ExistBlock("MT110TEL")               
Local lRet      := .T.
local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local aSizeAut  := {}

Local oSolic
Local oSize  		:= nil
Local aInfo     := {}
Local aPosGet   := {}
Local aPosObj   := {}
Local aBut110   := {}
Local aButtonUsr:= {}
Local aBtnBack	:= {}
Local aPosObjPE := {}
Local cQuery110 := ''
Local cProd_B   := ''
Local nIt110    := 0
Local nX        := 1
Local lProcGet  := .T.
Local lGspInUseM:= If(Type('lGspInUse')=='L', lGspInUse, .F.)
Local lHelpGrv  := .F.
Local lNaturez  := (FieldPos("C1_NATUREZ") > 0 .And. cPaisLoc <> "BRA")
Local lTpOp 		:= SuperGetMV("MV_TPOPDOC",.F.,.F.)
Local lMkPlace	:= SuperGetMV("MV_MKPLACE",.F.,.F.)
Local lIntegDef :=  FWHasEAI("MATA110",.T.,,.T.)
Local lEnvMkt	:= .F.
Local lRetInt	:= .T.

Local cFilSB5	:= xFilial("SB5")
Local cFilSC1	:= xFilial("SC1") 
Local cFilSCR	:= xFilial("SCR")
Local cNumSCX 	:= SC1->C1_NUM
Local lMTA110EC	:= ExistBlock("MTA110EC")
Local cMTA110EC	:= "" 
Local nLinMax	:= GetNewPar("MV_COMLMAX", 999)

Private cSolic    := CriaVar("C1_SOLICIT")
PRIVATE dA110Data	:= dDataBase
PRIVATE cFilEnt   	:= CriaVar("C1_FILENT")

PRIVATE cCodNatu	:= IIf(lNaturez, CriaVar("C1_NATUREZ") , "")
PRIVATE cCCusto 	:= CriaVar("C1_CC")
PRIVATE cUnidReq 	:= CriaVar("C1_UNIDREQ")
PRIVATE cCodCompr 	:= CriaVar("C1_CODCOMP")
PRIVATE cTpOP		:= CriaVar("C1_TPOP")
PRIVATE aHeader		:= {}
PRIVATE aCols		:= {}
PRIVATE aRatAFG		:= {}
Private aHdrAFG	:=	{}
PRIVATE bPmsDlgSC	:= {||}
PRIVATE cDescTp		:= iif (lSCCNI, CriaVar("C1_XTPDESC") , '')

PRIVATE oGrade	  := MsMatGrade():New('oGrade',,"C1_QUANT",,"A110GValid()",,;
  						{ 	{"C1_QUANT" ,.T., {{"C1_QTSEGUM",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),aCols[nLinha][nColuna],0,2) } }} },;
  							{"C1_ITEM",NIL,NIL},;
							{"C1_DATPRF",NIL,NIL},;
  							{"C1_QTSEGUM",.T., {{"C1_QUANT",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),0,aCols[nLinha][nColuna],1) }}} } })

DEFAULT l110Auto := .F.
aColsSCX	 	:= {} //Inicializando Variável Static
aHeadSCX		:= {}
aDlgFields		:= {}
cA110Num	:= SC1->C1_NUM
bPmsDlgSC	:= {||PmsDlgSC(3,cA110Num)}
          
if lSCCNI
	cTpSC := CriaVar("C1_XTIPOSC")  
	cReqSol := CriaVar("C1_XSOL") 
	cCCusto	:= CriaVar("C1_CC") 
	cNumCt := CriaVar("C1_XNUMCT")  
	cNumRev := CriaVar("C1_XNUMREV")  

	If lCopia
		cReqSol	 := __cUserId    // 09/05/11 - Req. Sol  
		cCCusto   := SC1->C1_CC // 09/05/11 - Item contabil
	Endif
	       
		cA110Num := CriaVar("C1_NUM")
EndIf

If Valtype(lContinua) <> "L"
     lContinua:= .T.
EndIf

lCopia	 := IIf(ValType(lCopia) == "L",lCopia,.F.)
lWhenGet := IIf(ValType(lWhenGet) <> "L" , .F. , lWhenGet)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o Registro esta Bloqueado.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lCopia
	
	cQuery110 := "SELECT B1_COD, B1_DESC "
	cQuery110 += "FROM " + RetSqlName('SC1') + " SC1 "
	cQuery110 += "INNER JOIN " + RetSqlName('SB1') + " SB1 ON "
	cQuery110 += "SB1.D_E_L_E_T_ <> '*' "
	cQuery110 += "AND SB1.B1_FILIAL = '" + xFilial('SB1') + "' "
	cQuery110 += "AND SB1.B1_COD = SC1.C1_PRODUTO "
	cQuery110 += "AND SB1.B1_MSBLQL = '1' " // Somente produtos bloqueados.
	cQuery110 += "WHERE SC1.D_E_L_E_T_ <> '*' "
	cQuery110 += "AND SC1.C1_FILIAL = '" + xFilial('SC1') + "' "
	cQuery110 += "AND SC1.C1_NUM = '" + SC1->C1_NUM + "' "
	
	cQuery110 := ChangeQuery(cQuery110)
	
	TcQuery cQuery110 New Alias 'MATA110B'
	
	MATA110B->(DbGoTop())
	
	If MATA110B->(!EOF())
		
		While MATA110B->(!EOF())
			
			cProd_B += AllTrim(MATA110B->B1_COD)+" - '"+AllTrim(MATA110B->B1_DESC)+"'" + CHR(13) + CHR(10)
			
			nIt110++
			
			MATA110B->(DbSkip())
			
		EndDo
		
		lContinua := .F.
		
		Aviso(STR0021,Iif(nIt110 == 1, STR0040, STR0118)+ CHR(13) + CHR(10) +cProd_B+Iif(nIt110 == 1, STR0072, STR0119),{STR0039}, 3)//"O produto "##" encontra-se bloqueado. Libere o registro para efetuar a cópia."
		
	EndIf
	
	MATA110B->(DbCloseArea())
	
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Tratamento para que o sistema nao gere documentos com numeracao saltada quando executadas via rotina automatica ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If l110Auto .And. (aScan(aAutoCab,{|x| x[1] == 'C1_NUM'}) > 0 .And. !Empty(aAutoCab[ProcH('C1_NUM'),2]))
	cA110Num := aAutoCab[ProcH('C1_NUM'),2] //-- Considera o numero passado na rotina automatica
Else   
	if lSCCNI
		if Empty(cA110Num)
			cA110Num := CriaVar('C1_NUM', .T.) //-- Incrementa a numeracao			
		EndIf
	Else
		cA110Num := CriaVar('C1_NUM', .T.) //-- Incrementa a numeracao	
	EndIf
EndIf  

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para validar a inclusão da Solicitação de Compras ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT110VLD")
	If lCopia
		lRet := Execblock("MT110VLD",.F.,.F.,{8})
	Else
		lRet := Execblock("MT110VLD",.F.,.F.,{nOpcx})
	Endif
	If ValType(lRet) <> "L"
		lRet := .T.
	EndIf
EndIf

If lRet
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Efetua a montagem do aHeader e do aCols                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lCopia .And. SC1->C1_TIPO == 2
		Help(" ",1,"A113TIPO")
		Return
	EndIf
	
	If A110Monta(1,,lCopia,nOpcX)
		If Magrade()
			aCols := aColsGrade(oGrade, aCols, aHeader, "C1_PRODUTO", "C1_ITEM", "C1_ITEMGRD")
	    Endif
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Limpa o Filtro aplicado pelo ponto de entrada M110Fil              ³
		//³ para poder validar o numero da SC na inclusao para evitar inclusao ³
		//³ de SC com o mesmo numero.									       ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC1->(dBclearFilter())

		If IntePms()	// Se usa PMS integrado com o ERP
			aBut110 := {{'PROJETPMS',{||Eval(bPmsDlgSC)},STR0028 + " - <F10>",STR0054 }}
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Botao para consultar Historico do Produto               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aadd(aBut110,{"S4WB005N",{|| A110ComView() },STR0065,STR0066 })  //Historico de Produtos

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Botao para exportar dados para EXCEL                    ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If RemoteType() == 1
			aAdd(aBut110 ,{PmsBExcel()[1],{|| DlgToExcel({{"CABECALHO","",{RetTitle("C1_NUM") ,RetTitle("C1_SOLICIT"),RetTitle("C1_EMISSAO"),RetTitle("C1_FILENT")},{cA110Num,cSolic ,dA110Data,cFilEnt}},{"GETDADOS","",aHeader,aCols}})},PmsBExcel()[2],PmsBExcel()[3]})
			Pergunte("MTA110",.F.)
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Insere o Botao de Rateio por Centro de Custo ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
		Aadd(aBut110,{'S4WB013N',{|| A110RatCC(aHeadSCX,aColsSCX,.T.)},STR0082,STR0083}) //"Rateio por Item da Solicitação"##"Rateio"
		aAdd(aBut110,{'S4WB013N',{|| A110LegIt()},"Tipos de Compra","Legenda"})
		If lcopia
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Monta o Array contendo as registros do SCX ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			A110AcoSCX(@aHeadSCX,@aColsSCX,cNumSCX)
		EndIf
		
		If ( ExistBlock("MA110BAR") )
			aButtonUsr := ExecBlock("MA110BAR",.F.,.F.,{nOpcx})
			If ( ValType(aButtonUsr) == "A" )
				For nX := 1 To Len(aButtonUsr)
					Aadd(aBut110,aClone(aButtonUsr[nX]))
				Next nX
			EndIf
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
		//³ Este PE foi criado porque o PE acima (MA110BAR) nao permite manipular³
		//³ botoes da enchoicebar.                                               ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ExistBlock( "MA110BUT" )
			aBtnBack := aClone(aBut110)
			aBut110 := ExecBlock( "MA110BUT", .F., .F., { nOpcx, aBut110 } )
			If ValType( aBut110 ) # "A"
				aBut110 := aClone(aBtnBack)
			EndIf
		EndIf
	
		If IntePms() .And. (!Type("l110Auto") == "L" .Or. !l110Auto)
			SetKey(VK_F10, {|| Eval(bPmsDlgSC)})
		EndIf
	
		If ( l110Auto )
			If !lWhenGet
				nOpcA  := 1
			Else
				INCLUI := .T.
				ALTERA := .F.
				MsAuto2aCols()
			EndIf
	
			aValidGet := {}
			If ProcH("C1_NUM")<>0
				Aadd(aValidGet,{"cA110Num"  ,aAutoCab[ProcH("C1_NUM"),2],"A110Numero(@ca110Num) .And. CheckSX3('C1_NUM',ca110Num)",.t.})
				aAdd(aDlgFields,{"C1_NUM","cA110Num"})
			EndIf
			If ProcH("C1_SOLICIT")<>0
				Aadd(aValidGet,{"cSolic"    ,aAutoCab[ProcH("C1_SOLICIT"),2],"CheckSX3('C1_SOLICIT',cSolic)",.T.})
				aAdd(aDlgFields,{"C1_SOLICIT","cSolic"})
				If(lLGPD,OfuscaLGPD(oSolic,"C1_SOLICIT"),.F.)
			EndIf
			If ProcH("C1_EMISSAO")<>0
				Aadd(aValidGet,{"dA110Data" ,aAutoCab[ProcH("C1_EMISSAO"),2],"CheckSX3('C1_EMISSAO',dA110Data)",.T.})
				aAdd(aDlgFields,{"C1_EMISSAO","dA110Data"})
			EndIf
			If ProcH("C1_TPOP")<>0
				Aadd(aValidGet,{"cTpOp" ,aAutoCab[ProcH("C1_TPOP"),2],"CheckSX3('C1_TPOP',cTpOp)",.T.})
				aAdd(aDlgFields,{"C1_TPOP","cTpOp"})
			EndIf
			If ProcH("C1_XTIPOSC")<>0
				Aadd(aValidGet,{"cTpSC",aAutoCab[ProcH("C1_XTIPOSC"),2],"CheckSX3('C1_XTIPOSC',cTpSC)",.T.})
				aAdd(aDlgFields,{"C1_XTIPOSC","cTpSC"})
			EndIf
			If ProcH("C1_XNUMCT")<>0
				Aadd(aValidGet,{"cNumCt",aAutoCab[ProcH("C1_XNUMCT"),2],"CheckSX3('C1_XNUMCT',cNumCt)",.T.})
				aAdd(aDlgFields,{"C1_XNUMCT","cNumCt"})
			EndIf
			If ! __lPyme
				If ProcH("C1_UNIDREQ") <> 0
					Aadd(aValidGet,{"cUnidReq"  ,aAutoCab[ProcH("C1_UNIDREQ"),2],"A110UnidReq(cUnidReq) .And. CheckSX3('C1_UNIDREQ',cUnidReq)	",.T.})
					aAdd(aDlgFields,{"C1_UNIDREQ","cUnidReq"})
				EndIf
				If ProcH("C1_CODCOMP") <> 0
					Aadd(aValidGet,{"cCodCompr" ,aAutoCab[ProcH("C1_CODCOMP"),2],"A110CodCompr(cCodCompr)",.T.})
					aAdd(aDlgFields,{"C1_CODCOMP","cCodCompr"})
				EndIf
			EndIf
			If lNaturez .And. ProcH("C1_NATUREZ") <> 0
				Aadd(aValidGet,{"cCodNatu",aAutoCab[ProcH("C1_NATUREZ"),2],"CheckSX3('C1_NATUREZ',cCodNatu)",.T.})
				aAdd(aDlgFields,{"C1_NATUREZ","cCodNatu"})
			EndIf
			If ProcH("C1_FILENT")<>0
				Aadd(aValidGet,{"cFilEnt",aAutoCab[ProcH("C1_FILENT"),2],"CheckSX3('C1_FILENT',cFilEnt)",.T.})
				aAdd(aDlgFields,{"C1_FILENT","cFilEnt"})
			EndIf
			
	   		If ! SC1->(MsVldGAuto(@aValidGet)) // consiste os gets
				nOpcA := 0
			Else
				cSolic := aAutoCab[ProcH("C1_SOLICIT"),2]
			EndIf
			If !SC1->(MsGetDAuto(aAutoItens,"A110LinOk",{|| A110TudOk()},aAutoCab,aRotina[nOpcx][4]))
				If lWhenGet
					Aviso(STR0021,STR0038,{STR0039}, 2 ) // "Atencao !","Houveram inconsistencias nas validacoes da rotina automatica. Favor verIficar arquivo SC*.LOG no diretorio (StartPath) do Protheus.", "Ok"
					lProcGet := .F.
				EndIf
				nOpcA := 0
			EndIf
			// Processamento do Rateio pro projeto na rotina automatica
			if nOpcA <> 0  
				if !Empty(aRatProj)
					if !A110VldAFG(3,cA110Num)// validar o Rateio por Projeto na Rotina Automatica
						nOpcA := 0
					endif
				endif
			endif		
		EndIf
	
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa a gravacao dos lancamentos do SIGAPCO          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PcoIniLan("000051")
	
		If (!l110Auto .Or. lWhenGet) .And. lProcGet .And. lContinua
			aSizeAut	:= MsAdvSize(,.F.)  
			aInfo := { aSizeAut[ 1 ], aSizeAut[ 2 ], aSizeAut[ 3 ], aSizeAut[ 4 ], 2, 2 }

			If lNaturez     
				If lSCCNI
					aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,45,105,145,225,265,175,210,235,260}})
				Else
					aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,35,105,145,225,265,167,203,245,270}})
				EndIf
			Else
				aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,35,105,145,225,265,210,255}})
			EndIf
	
			DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0011)+' - '+iif(lCopia,"Copia",OemToAnsi(STR0008)) From aSizeAut[7],0 TO aSizeAut[6],aSizeAut[5] OF oMainWnd PIXEL		//"Solicita‡„o de Compras"
			oSize := FwDefSize():New(.T.,,,oDlg)

			If	lSCCNI	
				oSize:AddObject('HEADER',100,65,.T.,.F.)
			ElseIf (!lGspInUse .AND. !__lPyme .AND. lNaturez) .OR. lTpOp
				oSize:AddObject('HEADER',100,55,.T.,.F.)//Definição antiga do dimensionamento
			Else
				oSize:AddObject('HEADER',100,30,.T.,.F.)
			EndIf       
		
			oSize:AddObject('GRID'  ,100,10,.T.,.T.)
			
			oSize:aMargins 	:= { 3, 3, 3, 3 }
			oSize:Process()	
			
			aAdd(aPosObj,{oSize:GetDimension('HEADER', 'LININI'),oSize:GetDimension('HEADER', 'COLINI'),oSize:GetDimension('HEADER', 'LINEND'),oSize:GetDimension('HEADER', 'COLEND')})
			aAdd(aPosObj,{oSize:GetDimension('GRID'  , 'LININI'),oSize:GetDimension('GRID'  , 'COLINI'),oSize:GetDimension('GRID'  , 'LINEND'),oSize:GetDimension('GRID'  , 'COLEND')})
		
		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Ponto de Entrada para Alterar as cordenas da dialog de SCs    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lMt110Get
				aPosObj := If(ValType(aPosObjPE:=ExecBlock("MT110GET",.F.,.F.,{aPosObj,nOpcx}))== "A",aPosObjPE,aPosObj)
			Endif
		
			// Para a CNI nao precisa da borda, pois como novos campos sao criados via PE, fica desposicionado.
			IF !lSCCNI
				@ aPosObj[1,1],aPosObj[1,2] TO aPosObj[1,3],aPosObj[1,4] LABEL ""  OF oDlg PIXEL 
			ENDIF
			
			If lMTA110EC
				//Executa ponto de entrada para bloquear edição de campos do cabeçalho da Solicitação de Compras
				cMTA110EC := ExecBlock("MTA110EC",.F.,.F.) 
			EndIf
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Define o cabecalho da rotina                                  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			@ aPosObj[1,1]+3,aPosGet[1,1] SAY OemToAnsi(STR0012) Of oDlg PIXEL 		//"&N£mero"
			@ aPosObj[1,1]+2,aPosGet[1,2] MSGET cA110Num F3 CpoRetF3("C1_NUM")    Picture PesqPict("SC1","C1_NUM");
				When VisualSX3("C1_NUM") .and. !("C1_NUM"$cMTA110EC) Valid CheckSX3("C1_NUM",cA110Num) .And. A110CabLCh(oGet) Of oDlg PIXEL
			aAdd(aDlgFields,{"C1_NUM","cA110Num"})
				
			@ aPosObj[1,1]+3,aPosGet[1,3] SAY OemToAnsi(STR0013)  Of oDlg PIXEL		//"&Solicitante"
			@ aPosObj[1,1]+2,aPosGet[1,4] MSGET oSolic VAR cSolic F3 CpoRetF3("C1_SOLICIT") Picture PesqPict("SC1","C1_SOLICIT");
				When VisualSX3("C1_SOLICIT") .and. !("C1_SOLICIT"$cMTA110EC) Valid CheckSX3("C1_SOLICIT",cSolic) .And. A110CabLCh(oGet) SIZE 80,10 Of oDlg PIXEL
			aAdd(aDlgFields,{"C1_SOLICIT","cSolic"})
			If(lLGPD,OfuscaLGPD(oSolic,"C1_SOLICIT"),.F.)
				
			@ aPosObj[1,1]+3,aPosGet[1,5] SAY OemToAnsi(STR0014) Of oDlg PIXEL		//"&Data de Emiss„o"
			@ aPosObj[1,1]+2,aPosGet[1,6] MSGET dA110Data F3 CpoRetF3("C1_EMISSAO") Picture PesqPict("SC1","C1_EMISSAO");
				When VisualSX3("C1_EMISSAO") .and. !("C1_EMISSAO"$cMTA110EC) Valid a110DtVld(nOpcx,lCopia) .And. CheckSX3("C1_EMISSAO",dA110Data) .And. A110CabLCh(oGet) SIZE 45,10 Of oDlg PIXEL HASBUTTON
			aAdd(aDlgFields,{"C1_EMISSAO","dA110Data"})
			If !lGspInUseM
	
				If ! __lPyme
					@ aPosObj[1,1]+17,aPosGet[1,1] SAY OemToAnsi(STR0016)  Of oDlg PIXEL SIZE 45,10	//"&Unid. Requis."
					@ aPosObj[1,1]+16,aPosGet[1,2] MSGET cUnidReq  F3 CpoRetF3("C1_UNIDREQ") Picture PesqPict("SC1","C1_UNIDREQ");
						When VisualSX3("C1_UNIDREQ") .and. !("C1_UNIDREQ"$cMTA110EC) ;
						Valid A110UnidReq(cUnidReq,oReq) .And. CheckSX3("C1_UNIDREQ",cUnidReq) .And. A110CabLCh(oGet) Of oDlg PIXEL HASBUTTON
					aAdd(aDlgFields,{"C1_UNIDREQ","cUnidReq"})
					
					@ aPosObj[1,1]+17,aPosGet[1,3] SAY OemToAnsi(STR0017) Of oDlg PIXEL	SIZE 45,10	//"&Cod. Comprador"
					@ aPosObj[1,1]+16,aPosGet[1,4] MSGET cCodCompr F3 CpoRetF3("C1_CODCOMP") Picture PesqPict("SC1","C1_CODCOMP");
						When VisualSX3("C1_CODCOMP") .and. !("C1_CODCOMP"$cMTA110EC);
						Valid A110CodCompr(cCodCompr,oComp) .And. A110CabLCh(oGet) Of oDlg PIXEL HASBUTTON
					aAdd(aDlgFields,{"C1_CODCOMP","cCodCompr"})						
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³No When do campo C1_FILENT e verificado a filial da tabela SC7, pois so pode digitar filial de entrega se o SC7 for exclusivo ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lNaturez
					@ aPosObj[1,1]+17,aPosGet[2,7] SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega" 
					
					if lSCCNI
						@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) .And. A110CabLCh(oGet) WHEN a110When() .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 019,006 HASBUTTON
	                Else
						@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) .And. A110CabLCh(oGet) WHEN a110When() .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 062,006 HASBUTTON
	                EndIf
	                
					@ aPosObj[1,1]+17,aPosGet[2,9] SAY Alltrim(RetTitle("C1_NATUREZ"))	 Of oDlg PIXEL	SIZE 45,10	//"&Cod. Comprador"
					@ aPosObj[1,1]+16,aPosGet[2,10] MSGET cCodNatu F3 CpoRetF3("C1_NATUREZ") Picture PesqPict("SC1","C1_NATUREZ");
						When VisualSX3("C1_NATUREZ") .and. !("C1_NATUREZ"$cMTA110EC) Valid CheckSX3("C1_NATUREZ",cCodNatu) .And. A110CabLCh(oGet) Of oDlg PIXEL SIZE 50,10 HASBUTTON
					aAdd(aDlgFields,{"C1_NATUREZ","cCodNatu"})
				Else
					@ aPosObj[1,1]+17,aPosGet[1,5] SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega"

					if lSCCNI
						@ aPosObj[1,1]+16,aPosGet[1,6] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) .And. A110CabLCh(oGet) WHEN a110When() .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 019,006 HASBUTTON
					Else
						@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) .And. A110CabLCh(oGet) WHEN a110When() .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 062,006 HASBUTTON
					EndIf
					
				EndIf
				aAdd(aDlgFields,{"C1_FILENT","cFilEnt"})
			EndIf
	      
	      	If lTpOp
		      @ aPosObj[1,1]+30,aPosGet[2,1] SAY Alltrim(RetTitle("C1_TPOP")) Of oDlg PIXEL		//Firme ou previsto C1_TPOP		
				@ aPosObj[1,1]+30,aPosGet[2,2] COMBOBOX oTpOP VAR cTpOp ITEMS StrTokArr(x3cbox(),';') VALID Pertence('FP') .And. A110CabLCh(oGet) SIZE 100,10;
				When VisualSX3("C1_TPOP") .and. !("C1_TPOP"$cMTA110EC) Of oDlg PIXEL	
				aAdd(aDlgFields,{"C1_FILENT","cFilEnt"})
			EndIf
						             
			if lSCCNI
				// 05/05/2011 - Campo Tipo de Documento
				@ aPosObj[1,1]+31,aPosGet[1,1]  SAY OemToAnsi(STR0156) OF oDlg PIXEL SIZE 038,006  //"Tipo doc."
				@ aPosObj[1,1]+30,aPosGet[1,2]  MSGET cTpSC  PICTURE PesqPict("SC1","C1_XTIPOSC") F3 CpoRetF3('C1_XTIPOSC');
					Valid CheckSX3("C1_XTIPOSC",cTpSC) .And. CM060VL3(cTpSC) .And. A110CabLCh(oGet) WHEN VisualSX3("C1_XTIPOSC") .and. !("C1_XTIPOSC"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON  
				aAdd(aDlgFields,{"C1_XTIPOSC","cTpSC"})
					
				@ aPosObj[1,1]+31,aPosGet[1,3]  SAY OemToAnsi(STR0157) OF oDlg PIXEL SIZE 038,006  //"Desc. Tipo doc."
				@ aPosObj[1,1]+30,aPosGet[1,4]  MSGET cDescTp When VisualSX3("C1_XTPDESC") .and. !("C1_XTPDESC"$cMTA110EC) OF oDlg PIXEL SIZE 80,10
	            aAdd(aDlgFields,{"C1_XTPDESC","cDescTp"})
	            
	   			// 09/05/11 - Requisitante Solicitacao
	   			@ aPosObj[1,1]+31,aPosGet[1,5]  SAY OemToAnsi(STR0158) OF oDlg PIXEL SIZE 038,006  //"Requisitante SC"
				@ aPosObj[1,1]+30,aPosGet[1,6]  MSGET cReqSol  F3 CpoRetF3("C1_XSOL");  
					Valid CheckSX3("C1_XSOL",cReqSol) .And. A110CabLCh(oGet) WHEN VisualSX3("C1_XSOL") .and. !("C1_XSOL"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON 
		        aAdd(aDlgFields,{"C1_XSOL","cReqSol"})
		        
				@ aPosObj[1,1]+45,aPosGet[1,1]  SAY OemToAnsi(STR0159) OF oDlg PIXEL SIZE 045,006  //"Centro de Custo"
				@ aPosObj[1,1]+44,aPosGet[1,2]  MSGET cCCusto  PICTURE PesqPict("SC1","C1_CC") F3 CpoRetF3("C1_CC");
					Valid CheckSX3("C1_CC",cCCusto) .And. A110CabLCh(oGet) WHEN VisualSX3("C1_CC") .and. !("C1_CC"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON 
				aAdd(aDlgFields,{"C1_CC","cCCusto"})
					
				@ aPosObj[1,1]+45,aPosGet[1,3]  SAY OemToAnsi(STR0160) OF oDlg PIXEL SIZE 038,006  //"Num. Contrato"
				@ aPosObj[1,1]+44,aPosGet[1,4]  MSGET cNumCt PICTURE PesqPict("SC1","C1_XNUMCT") F3 "CN9001" ;
					Valid CheckSX3("C1_XNUMCT",cNumCt) .and. ValGCT(cNumCt, cNumRev)  .And. A110CabLCh(oGet) WHEN GETMV("MV_TPSCCT")==cTpSC .and. !("C1_XNUMCT"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON   
				aAdd(aDlgFields,{"C1_XNUMCT","cNumCt"})
	
				@ aPosObj[1,1]+45,aPosGet[1,5]  SAY OemToAnsi(STR0161) OF oDlg PIXEL SIZE 038,006  //"Revisao Ct."
		  		@ aPosObj[1,1]+44,aPosGet[1,6]  MSGET cNumRev WHEN .F. PICTURE PesqPict("SC1","C1_XNUMREV") ;
				Valid CheckSX3("C1_XNUMREV",cNumRev) .and. ValGCT(cNumCt, cNumRev) .And. A110CabLCh(oGet) WHEN GETMV("MV_TPSCCT")==cTpSC .and. !("C1_XNUMREV"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON   
				aAdd(aDlgFields,{"C1_XNUMREV","cNumRev"})
			EndIf
			
			//Ponto de Entrada para manipular os Gets da Dialog da SC
			If lMt110TEL
				ExecBlock("MT110TEL",.F.,.F.,{@oDlg, aPosGet, nOpcx, nReg, @aDlgFields} )
			EndIf
	
			oGet := MSGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpcx,"A110LinOK","A110TudOK","+C1_ITEM",.T.,,,,nLinMax,"A110AltLeg")
			oGet:oBrowse:Cargo := {|a,b,c,d,e,g| __MYEDIT(a,b,c,d,e,g,oGet )}
			
			ACTIVATE MSDIALOG oDlg ON INIT (IIf(lWhenGet,oGet:oBrowse:Refresh(),Nil),EnchoiceBar(oDlg,{||nOpcA:=1,IIf(oGet:TudoOk(),oDlg:End(),( nOpcA := 0, oGet:oBrowse:SetFocus()) )},;
			{|| IIf(A110Exit(nOpcA),oDlg:End(),nOpcA := 0)},, aBut110)) VALID A110Exit(nOpcA)
	
		EndIf
	
		If ( nOpcA == 1 )
			Ma110GraGr() // Compatibiliza aCols
			
			Begin Transaction
				If ( !A110Grava(1,@cA110Num,cSolic,dA110Data,cCCusto,cUnidreq,cCodCompr,cFilEnt,cCodNatu,cTpOp,aHeadSCX,aColsSCX))
					nOpcA := 0
					lHelpGrv := .T.
				Else
					If lIntegDef
						If !lMkPlace
							Inclui:=.T.
							lRetInt := A110INTMU()
						Endif
					Endif
					
					If lRetInt
						EvalTrigger()
						While ( GetSX8Len() > nSaveSX8 )
							ConfirmSX8()
						EndDo
					Else
						nOpcA := 0
					Endif	
				EndIf
			End Transaction
			
			If lHelpGrv
				Help(" ",1,"A110NAOREG")
			EndIf         
			
			If nOpcA == 1 .And. lSCCNI
				//Bloco tirado do Ponto M110STTS para a Inclusao da SCR
				//INCLUSAO - FWS - 25/05/11
				_nTotSC := _f110TotSC(cA110Num)
				
				IF INCLUI .OR. lCopia
					SC1->(dbSetOrder(1))
					IF SC1->(dbSeek(cFilSC1+cA110Num)) .and. !Empty(SC1->C1_XGRPAPR)
						MaAlcDoc({cA110Num,"SC",_nTotSC,,,SC1->C1_XGRPAPR,,1,1,SC1->C1_EMISSAO},,1)
						// verifica se gerou alcada
						SCR->(dbSetOrder(1))
						IF SCR->(dbSeek(cFilSCR+"SC"+SC1->C1_NUM))
							TCSqlExec("UPDATE "+RetSqlName("SC1")+" SET C1_APROV = 'B' WHERE D_E_L_E_T_ = ' ' AND C1_NUM = '"+SC1->C1_NUM+"' AND C1_FILIAL = '"+cFilSC1+"'")
						ENDIF
					ENDIF					
				ENDIF
			EndIf
			
			If nOpcA == 1 .And. ExistBlock("M110STTS")   
				ExecBlock("M110STTS",.F.,.F.,{cA110Num,1,lCopia,.F.})
			EndIf
			
			//Envia a SC para o portal MarketPlace quando ela for liberada
			If nOpcA == 1 .And. lIntegDef .And. SuperGetMV("MV_MKPLACE",.F.,.F.) 				
				SC1->(dbSetOrder(1))
				SC1->(dbSeek(cFilSC1+cA110Num))
				While !SC1->(Eof()) .And. SC1->(C1_FILIAL+C1_NUM) == cFilSC1+cA110Num .And. SC1->C1_APROV $ " ,L"
					SB5->(DbSetOrder(1))
					If SB5->(DbSeek( cFilSB5 + SC1->C1_PRODUTO))
						If SB5->(FieldPos("B5_ENVMKT")) > 0
							If SB5->B5_ENVMKT == "1"
								lEnvMkt := .T.
								Exit
							EndIf
						EndIf
					EndIf
					SC1->(dbSkip())
				Enddo
				If lEnvMkt
					Inclui:=.T.
					SetRotInteg('MATA110' )
					A110INTMU()
				EndIf
			EndIf
		EndIf			
		
		//Finaliza a gravacao dos lancamentos do SIGAPCO
		PcoFinLan("000051")
		PcoFreeBlq("000051")
	
		If ( nOpcA == 0 )
			While ( GetSX8Len() > nSaveSX8 )
				RollBackSX8()
			EndDo
		EndIf
		MsUnLockAll()
									
		//Reposiciona o Cadastro de Fornecedores
		DbSelectArea("SA2")
		DbSetOrder(1)
		DbGoTop()

		dbSelectArea(cAlias)
	EndIf
	
	lCopia := .F.

	If IntePMS() .And. (!Type("l110Auto") == "L" .Or. !l110Auto)
		SetKey(VK_F10, Nil)
	EndIf
EndIf
	
dbSetOrder(nSavOrd)
Return (nOpcA == 1)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Altera³Rev.   ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de alteracao das solicitacoes de compra               ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                    ³±±
±±³          ³ ExpN2 = Numero do registro                                  ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo possibilitar a alteracao manual³±±
±±³          ³das solicitacoes de compra utilizando-se de uma modelo 2     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Altera(cAlias,nReg,nOpcx,lCopia,lWhenGet)
local lSCCNI		:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local aArea			:= GetArea()
Local lContinua		:= .F.
Local cHelp			:= ""
Local aSizeAut		:= {}
Local nOpcA			:= 0
Local oSize		:= nil
Local aInfo 		:= {}
Local aPosGet		:= {}
Local aPosObj		:= {}
Local aPosObjPE     := {}
Local oDlg
Local oGet
Local oReq
Local oComp
Local oSolic
Local oTpOP
Local aBut110		:= {}
Local aButtonUsr    := {}
Local aBtnBack		:= {}
Local nX            := 1
Local lProcGet      := .T.
Local lGspInUseM 	:= If(Type('lGspInUse')=='L', lGspInUse, .F.)
Local lHelpGrv   	:= .F.
Local lSigaGsp   	:= .T.
Local lNaturez   	:= (FieldPos("C1_NATUREZ") > 0 .And. cPaisLoc <> "BRA")
Local lMt110Get     := ExistBlock("MT110GET")
Local lMt110TEL     := ExistBlock("MT110TEL")
Local lRet          := .T.
Local _lBlq			:= .F. 
Local lTpOp 		:= SuperGetMV("MV_TPOPDOC",.F.,.F.)
Local lBloq := .F.
Local nLinMax		:= GetNewPar("MV_COMLMAX", 999)
Local aColsBKPRat   := {}
Local cCodLiber   := ""
Local cObs			:= ""
Local aAreaAFG	:= {}
Local lAtivaDRP		:= GetNewPar("MV_LJDRP",.F.)			// Parâmetro para ativação de DRP Neogrid
Local aColEdit	:= {}
Local lIntegTOP	:= .F.

Local cFilSC1	:= xFilial("SC1")
Local cFilSCR	:= xFilial("SCR")
Local lMTA110EC	:= ExistBlock("MTA110EC")
Local cMTA110EC	:= ""
Local lLog 		:= GetNewPar("MV_HABLOG",.F.)
Local nPosIt 	:= "" 
Local nPosItLp 	:= ""
Local cItem		:= ""

PRIVATE cSolic 		:= SC1->C1_SOLICIT
PRIVATE dA110Data 	:= SC1->C1_EMISSAO
PRIVATE cCodNatu  	:= iIf(lNaturez,SC1->C1_NATUREZ,"")
PRIVATE cCCusto 	:= SC1->C1_CC
PRIVATE cUnidReq 	:= SC1->C1_UNIDREQ
PRIVATE cCodCompr 	:= SC1->C1_CODCOMP
PRIVATE cFilEnt 		:= SC1->C1_FILENT
PRIVATE cTpOP		:= If(Empty(SC1->C1_TPOP),"F",SC1->C1_TPOP)
PRIVATE aHeader	:= {}
PRIVATE aCols 		:= {}
PRIVATE aRatAFG		:= {}
Private aHdrAFG		:= {}
PRIVATE bPmsDlgSC	:= {||}  
PRIVATE aSCForn		:= {}
DEFAULT l110Auto    := .F.
PRIVATE cDRP			:= IIf(SC1->C1_ORIGEM = "LOJA7033",STR0059,STR0060)  //Sim#Não

PRIVATE cDescTp		:= If(lSCCNI,Posicione("COL",1,xFilial("COL")+SC1->C1_XTIPOSC,"COL_DESC"),'')

PRIVATE oGrade	  := MsMatGrade():New('oGrade',,"C1_QUANT",,"A110GValid()",,;
  						{ 	{"C1_QUANT" ,.T., {{"C1_QTSEGUM",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),aCols[nLinha][nColuna],0,2) } }} },;
  							{"C1_ITEM",NIL,NIL},;
							{"C1_DATPRF",NIL,NIL},;
  							{"C1_QTSEGUM",.T., {{"C1_QUANT",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),0,aCols[nLinha][nColuna],1) }}} } })
PRIVATE aBackSCX    := {}  							
aColsSCX	 	:= {} //Inicializando Variável Static
aHeadSCX		:= {}
aDlgFields		:= {}

cA110Num 	:= SC1->C1_NUM
bPmsDlgSC	:= {||PmsDlgSC(IIF(lIntegTOP.AND.(nOpcx==4),2,4),cA110Num)}

cTpSC	 := iif (lSCCNI, SC1->C1_XTIPOSC, '') // 05/05/2011 - Campo Tipo de Documento
cReqSol	 := iif (lSCCNI, __cUserId, '')    // 09/05/11 - Req. Sol  
cCCusto   := iif (lSCCNI, SC1->C1_CC, '') // 09/05/11 - Item contabil
cNumCt   := iif (lSCCNI, SC1->C1_XNUMCT, '') // 09/05/11 - Num Contrato 
cNumRev  := iif (lSCCNI, SC1->C1_XNUMREV, '') // 19/09/11 - Revisao Ct.

l110Alt  := .T.
lCopia	 := .F.
lWhenGet := IIf(ValType(lWhenGet) <> "L" , .F. , lWhenGet)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para validar a alteração da Solicitação de Compras³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT110VLD")
	lRet := Execblock("MT110VLD",.F.,.F.,{nOpcx})
	If ValType(lRet) <> "L"
		lRet := .T.
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Valida usuario e grupo de compras								   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet
	lRet := VldAltSolic()
EndIf

//Não permite alteração de SC gerada no TOP
If IntePms() .and. !l110auto
	If AllTrim(SC1->C1_ORIGEM) == "SOLUM" .Or. AllTrim(SC1->C1_ORIGEM) == "MSGEAI"
		lIntegTOP := .T.
	Else
		dbSelectArea ("AFG")
		aAreaAFG  := AFG->(GetArea())
		AFG->(DbSetOrder(2))
		AFG->(DbSeek(xFilial("AFG")+SC1->(C1_NUM+C1_ITEM)))
		If (FieldPos("AFG_VIAINT")>0 )
			If AFG->AFG_VIAINT =="S"
				lIntegTOP := .T.
			Endif
		Endif
		RestArea(aAreaAFG)
	Endif
Endif

If !l110auto
	//Não permite alteração de SC gerada no TOP (Mensagem Unica)
	If AllTrim(SC1->C1_ORIGEM) == "SOLUM"
		MsgAlert(STR0112)
		lRet := .F.
	Elseif AllTrim(SC1->C1_ORIGEM) == "MSGEAI" 
		MsgAlert(STR0169) //"Não permite alteração da SC quando originada via integração."
		lRet := .F.
	Endif	
	//Valida se solicitação sofreu eliminação de residuo
	If AllTrim(SC1->C1_RESIDUO) == "S"
		MsgAlert(STR0126) //"Solicitação não pode ser alterada, pois foi eliminado residuo."
	lRet := .F.
	Endif
Else
	For nX :=1 to len(aAutoItens)
		nPosIt 		:= aScan(aAutoItens[nX],{|x| AllTrim(x[1])=="C1_ITEM"}) // tratamento verificação do bloqueio por resíduo quando for passado o C1_ITEM
		nPosItLp 	:= aScan(aAutoItens[nX],{|x| AllTrim(x[2])=="C1_ITEM"}) // tratamento verificação do bloqueio por resíduo quando utilizado o limpos ( C1_ITEM )
		DO CASE
	         CASE nPosIt > 0 // tratamento verificação do bloqueio por resíduo quando for passado o C1_ITEM
	         	cItem := aAutoItens[nX][nPosIt][2]
	         CASE nPosItLp > 0  // tratamento verificação do bloqueio por resíduo quando utilizado o limpos ( C1_ITEM )
	         	cItem := aAutoItens[nX][nPosItLp][3]
		EndCase
	
		If lRet .and. GetAdvFVal("SC1","C1_RESIDUO",xFilial("SC1")+C1_NUM+cItem,1) == "S"
			Help(" ",1,STR0126)//"Solicitação não pode ser alterada, pois foi eliminado residuo."
			lRet := .F.
		Endif
	next nX
Endif	

If lRet	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Efetua a montagem do aHeader e do aCols                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	If IntePms()	// Se usa PMS integrado com o ERP
		aBut110 := {{'PROJETPMS',{||Eval(bPmsDlgSC)},STR0028 + " - <F10>" ,STR0054}}
	
		If !Type("l110Auto") == "L" .Or. !l110Auto
			SetKey(VK_F10, {|| Eval(bPmsDlgSC)})
		EndIf
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Botao para consultar Historico do Produto               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aadd(aBut110,{"S4WB005N",{|| A110ComView() },STR0065,STR0066 })  //Historico de Produtos
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Botao para exportar dados para EXCEL                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If RemoteType() == 1
		aAdd(aBut110 ,{PmsBExcel()[1],{|| DlgToExcel({{"CABECALHO","",{RetTitle("C1_NUM") ,RetTitle("C1_SOLICIT"),RetTitle("C1_EMISSAO"),RetTitle("C1_FILENT")},{cA110Num,cSolic ,dA110Data,cFilEnt}},{"GETDADOS","",aHeader,aCols}})},PmsBExcel()[2],PmsBExcel()[3]})
	EndIf
	                       
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Insere o Botao de Rateio por Centro de Custo ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
	aAdd(aBut110,{'S4WB013N',{||A110RatCC(aHeadSCX,aColsSCX,.T.)},STR0082,STR0083}) //Rateio por Item da Solicitação###Rateio
	aAdd(aBut110,{'S4WB013N',{|| A110LegIt()},"Tipos de Compra","Legenda"})
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o Array contendo as registros do SCX ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	A110AcoSCX(@aHeadSCX,@aColsSCX)

	If ( ExistBlock("MA110BAR") )
		aButtonUsr := ExecBlock("MA110BAR",.F.,.F.,{nOpcx})
		If ( ValType(aButtonUsr) == "A" )
			For nX := 1 To Len(aButtonUsr)
				Aadd(aBut110,aClone(aButtonUsr[nX]))
			Next nX
		EndIf
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
	//³ Este PE foi criado porque o PE acima (MA110BAR) nao permite manipular³
	//³ botoes da enchoicebar.                                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock( "MA110BUT" )
		aBtnBack := aClone(aBut110)
		aBut110 := ExecBlock( "MA110BUT", .F., .F., { nOpcx, aBut110 } )
		If ValType( aBut110 ) # "A"
			aBut110 := aClone(aBtnBack)
		EndIf
	EndIf

	If A110Monta(3,{|cAlias| lContinua:=If(lContinua,lContinua,MaCanAltSC(cAlias,1,.F.,@cHelp)),.T.},,nOpcX,@aColsBKPRat) .And. lSigaGsp
		aCols := aColsGrade(oGrade, aCols, aHeader, "C1_PRODUTO", "C1_ITEM", "C1_ITEMGRD")
	
		If ( !lContinua )
			Help(" ",1,cHelp)
		Else
			If l110Auto
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ validando dados pela rotina automatica                       ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If !lWhenGet
					nOpcA := 1
				Else
					Inclui    := .F.
					Altera    := .T.
					MsAuto2Acols(4,,"C1_ITEM")
				EndIf
	
				aValidGet := {}
				Aadd(aValidGet,{"cSolic"    ,aAutoCab[ProcH("C1_SOLICIT"),2],"CheckSX3('C1_SOLICIT',cSolic)"	,.T.})
				aAdd(aDlgFields,{"C1_SOLICIT","cSolic"})
				Aadd(aValidGet,{"dA110Data"	,aAutoCab[ProcH("C1_EMISSAO"),2],"CheckSX3('C1_EMISSAO',dA110Data)",.T.})
				aAdd(aDlgFields,{"C1_EMISSAO","dA110Data"})
				If ProcH("C1_TPOP")<>0
					Aadd(aValidGet,{"cTpOp" ,aAutoCab[ProcH("C1_TPOP"),2],"CheckSX3('C1_TPOP',cTpOp)",.T.})
					aAdd(aDlgFields,{"C1_TPOP","cTpOp"})
				EndIf

				If ! __lPyme
					If ProcH("C1_UNIDREQ") <> 0
						Aadd(aValidGet,{"cUnidReq"  ,aAutoCab[ProcH("C1_UNIDREQ"),2],"A110UnidReq(cUnidReq) .And. CheckSX3('C1_UNIDREQ',cUnidReq)	",.T.})
						aAdd(aDlgFields,{"C1_UNIDREQ","cUnidReq"})
					EndIf
					If ProcH("C1_CODCOMP") <> 0
						Aadd(aValidGet,{"cCodCompr" ,aAutoCab[ProcH("C1_CODCOMP"),2],"A110CodCompr(cCodCompr)",.T.})
						aAdd(aDlgFields,{"C1_CODCOMP","cCodCompr"})
					EndIf
				EndIf
				If lNaturez .And. ProcH("C1_NATUREZ") <> 0
					Aadd(aValidGet,{"cCodNatu",aAutoCab[ProcH("C1_NATUREZ"),2],"CheckSX3('C1_NATUREZ',cCodNatu)",.T.})
					aAdd(aDlgFields,{"C1_NATUREZ","cCodNatu"})
				EndIf
				If ! SC1->(MsVldGAuto(aValidGet)) // consiste os gets
					nOpcA := 0
				EndIf
				If !SC1->(MsGetDAuto(aAutoItens,"A110LinOk",{|| A110TudOk()},aAutoCab,aRotina[nOpcx][4]))
					If lWhenGet
						Aviso(STR0021,STR0038,{STR0039}, 2 ) // "Atencao !","Houveram inconsistencias nas validacoes da rotina automatica. Favor verIficar arquivo SC*.LOG no diretorio (StartPath) do Protheus.", "Ok"
						lProcGet := .F.
					EndIf
					nOpcA := 0
				EndIf
				// Rotina Automatica de Rateio por projeto	
				if nOpcA <> 0  
	 				if !Empty(aRatProj)
						if !A110VldAFG(4,cA110Num)// validar o Rateio por Projeto na Rotina Automatica
							nOpcA := 0
						endif
					endif
				endif		
			EndIf
			If lWhenGet
				l110Auto := .F.
			EndIf
			
			If lMTA110EC
				//Executa ponto de entrada para bloquear edição de campos do cabeçalho da Solicitação de Compras
				cMTA110EC := ExecBlock("MTA110EC",.F.,.F.) 
			EndIf
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Inicializa a gravacao dos lancamentos do SIGAPCO          ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PcoIniLan("000051")
	
			If (!l110Auto .Or. lWhenGet) .And. lProcGet
				aSizeAut	:= MsAdvSize(,.F.)  
		
				aInfo := { aSizeAut[ 1 ], aSizeAut[ 2 ], aSizeAut[ 3 ], aSizeAut[ 4 ], 2, 2 }
				If lNaturez     			
					if lSCCNI
						aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,45,105,145,225,265,175,210,235,260}})
					Else
						aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,35,105,145,225,265,167,203,245,270}})
					EndIf
				Else
					aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,35,105,145,225,265,210,255}})
	            EndIf
	
				DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0011)+' - '+OemToAnsi(STR0009) From aSizeAut[7],0 TO aSizeAut[6],aSizeAut[5] OF oMainWnd PIXEL		//"Solicita‡„o de Compras"
				oSize := FwDefSize():New(.T.,,,oDlg)

				If	lSCCNI	
					oSize:AddObject('HEADER',100,65,.T.,.F.)
				ElseIf (!lGspInUse .AND. !__lPyme .AND. lNaturez) .OR. lTpOp
					oSize:AddObject('HEADER',100,55,.T.,.F.)//Definição antiga do dimensionamento
				Else
					oSize:AddObject('HEADER',100,30,.T.,.F.)
				EndIf       
			
				oSize:AddObject('GRID'  ,100,10,.T.,.T.)
				
				oSize:aMargins 	:= { 3, 3, 3, 3 }
				oSize:Process()	
				
				aAdd(aPosObj,{oSize:GetDimension('HEADER', 'LININI'),oSize:GetDimension('HEADER', 'COLINI'),oSize:GetDimension('HEADER', 'LINEND'),oSize:GetDimension('HEADER', 'COLEND')})
				aAdd(aPosObj,{oSize:GetDimension('GRID'  , 'LININI'),oSize:GetDimension('GRID'  , 'COLINI'),oSize:GetDimension('GRID'  , 'LINEND'),oSize:GetDimension('GRID'  , 'COLEND')})
		
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Ponto de Entrada para Alterar as cordenas da dialog de SCs    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lMt110Get
					aPosObj := If(ValType(aPosObjPE:=ExecBlock("MT110GET",.F.,.F.,{aPosObj,nOpcx}))== "A",aPosObjPE,aPosObj)
				Endif
			
				// Para a CNI nao precisa da borda, pois como novos campos sao criados via PE, fica desposicionado.
   				IF !lSCCNI
					@ aPosObj[1,1],aPosObj[1,2] TO aPosObj[1,3],aPosObj[1,4] LABEL ""  OF oDlg PIXEL 
				ENDIF
				
				@ aPosObj[1,1]+3,aPosGet[1,1]	SAY OemToAnsi(STR0012) 	of oDlg PIXEL	//"&N£mero"
				@ aPosObj[1,1]+2,aPosGet[1,2]	MSGET cA110Num  Picture PesqPict("SC1","C1_NUM")  When .F. 	of oDlg PIXEL
				aAdd(aDlgFields,{"C1_NUM","cA110Num"})
	
				If lAtivaDRP //Importado via DRP
					@ aPosObj[1][1]+3,aPosGet[1,1]+110 SAY   "DRP?"   OF oDlg PIXEL SIZE 060,006             // "DRP?"
					@ aPosObj[1][1]+2,aPosGet[1,2]+80 MSGET oGetMoeda VAR cDRP ;
						PICTURE PesqPict("SC1","C1_DRPIMP") WHEN .F. PIXEL SIZE 20,10 OF oDlg
				EndIf
	
				@ aPosObj[1,1]+3,aPosGet[1,3] 	SAY OemToAnsi(STR0013)  	of oDlg PIXEL		//"&Solicitante"
				@ aPosObj[1,1]+2,aPosGet[1,4]	MSGET oSolic VAR cSolic	F3 CpoRetF3("C1_SOLICIT") Picture PesqPict("SC1","C1_SOLICIT");
					When Iif(lIntegTOP,.F.,VisualSX3("C1_SOLICIT")) .and. !("C1_SOLICIT"$cMTA110EC) Valid CheckSX3("C1_SOLICIT",cSolic) SIZE 80,10 	of oDlg PIXEL
				aAdd(aDlgFields,{"C1_SOLICIT","cSolic"})
				If(lLGPD,OfuscaLGPD(oSolic,"C1_SOLICIT"),.F.)
	
				@ aPosObj[1,1]+3,aPosGet[1,5] SAY OemToAnsi(STR0014) 	of oDlg PIXEL		//"&Data de Emiss„o"
				@ aPosObj[1,1]+2,aPosGet[1,6] MSGET dA110Data 	F3 CpoRetF3("C1_EMISSAO") Picture PesqPict("SC1","C1_EMISSAO");
					When Iif(lIntegTOP,.F.,VisualSX3("C1_EMISSAO")) .and. !("C1_EMISSAO"$cMTA110EC) Valid a110DtVld(nOpcx,lCopia) .And. CheckSX3("C1_EMISSAO",dA110Data) SIZE 45,10 	of oDlg PIXEL HASBUTTON
				aAdd(aDlgFields,{"C1_EMISSAO","dA110Data"})
	
				If !lGspInUseM
					If ! __lPyme
						@ aPosObj[1,1]+17,aPosGet[2,1] SAY OemToAnsi(STR0016) 	of oDlg PIXEL  SIZE 45,10 		//"&Unid. Requis."
						@ aPosObj[1,1]+16,aPosGet[2,2] MSGET cUnidReq  F3 CpoRetF3("C1_UNIDREQ");
							When Iif(lIntegTOP,.F.,VisualSX3("C1_UNIDREQ")) .and. !("C1_UNIDREQ"$cMTA110EC) Picture PesqPict("SC1","C1_UNIDREQ");
							Valid A110UnidReq(cUnidReq,oReq) .And. CheckSX3("C1_UNIDREQ",cUnidReq) 	of oDlg PIXEL HASBUTTON
						aAdd(aDlgFields,{"C1_UNIDREQ","cUnidReq"})
						
						@ aPosObj[1,1]+17,aPosGet[1,3] SAY OemToAnsi(STR0017) 	of oDlg PIXEL  SIZE 45,10	//"&Cod. Comprador"
						@ aPosObj[1,1]+16,aPosGet[1,4] MSGET cCodCompr F3 CpoRetF3("C1_CODCOMP") Picture PesqPict("SC1","C1_CODCOMP");
							When Iif(lIntegTOP,.F.,VisualSX3("C1_CODCOMP")) .and. !("C1_CODCOMP"$cMTA110EC) Valid A110CodCompr(cCodCompr,oComp) .And. CheckSX3("C1_CODCOMP",cCodCompr) 	of oDlg PIXEL HASBUTTON
						aAdd(aDlgFields,{"C1_CODCOMP","cCodCompr"})

					EndIf
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³No When do campo C1_FILENT e verificado a filial da tabela SC7, pois so pode digitar filial de entrega se o SC7 for exclusivo ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If lNaturez
						@ aPosObj[1,1]+17,aPosGet[2,7] SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega"

						if lSCCNI
							@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
								Valid CheckSX3("C1_FILENT",cFilEnt) WHEN Iif(lIntegTOP,.F.,a110When()) .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 019,006 HASBUTTON
						Else
							@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
								Valid CheckSX3("C1_FILENT",cFilEnt) WHEN Iif(lIntegTOP,.F.,a110When()) .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 062,006 HASBUTTON
						EndIf
							
						@ aPosObj[1,1]+17,aPosGet[2,9] SAY Alltrim(RetTitle("C1_NATUREZ"))	 Of oDlg PIXEL	SIZE 45,10	//"&Cod. Comprador"
						@ aPosObj[1,1]+16,aPosGet[2,10] MSGET cCodNatu F3 CpoRetF3("C1_NATUREZ") Picture PesqPict("SC1","C1_NATUREZ");
							When Iif(lIntegTOP,.F.,VisualSX3("C1_NATUREZ")) .and. !("C1_NATUREZ"$cMTA110EC)  Valid CheckSX3("C1_NATUREZ",cCodNatu) Of oDlg PIXEL SIZE 50,10 HASBUTTON
						aAdd(aDlgFields,{"C1_NATUREZ","cCodNatu"})
					Else
						@ aPosObj[1,1]+17,aPosGet[2,7] SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega"
						
						if lSCCNI
							@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
								Valid CheckSX3("C1_FILENT",cFilEnt) WHEN Iif(lIntegTOP,.F.,a110When()) .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 019,006 HASBUTTON
						Else
							@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
								Valid CheckSX3("C1_FILENT",cFilEnt) WHEN Iif(lIntegTOP,.F.,a110When()) .and. !("C1_FILENT"$cMTA110EC) OF oDlg PIXEL SIZE 062,006 HASBUTTON
						EndIf
					EndIf
					aAdd(aDlgFields,{"C1_FILENT","cFilEnt"})
		      	EndIf
	    		If lTpOp
		    		@ aPosObj[1,1]+30,aPosGet[2,1] SAY Alltrim(RetTitle("C1_TPOP")) Of oDlg PIXEL		//Firme ou previsto C1_TPOP		
					@ aPosObj[1,1]+30,aPosGet[2,2] COMBOBOX oTpOP VAR cTpOp ITEMS StrTokArr(x3cbox(),';') When .F. SIZE 100,10 Of oDlg PIXEL	
		    		aAdd(aDlgFields,{"C1_TPOP","cTpOp"})
		    	EndIf
	         If lSCCNI                      
					// 05/05/2011 - Campo Tipo de Documento
					@ aPosObj[1,1]+31,aPosGet[1,1]  SAY OemToAnsi(STR0156) OF oDlg PIXEL SIZE 038,006  //"Tipo doc."
					@ aPosObj[1,1]+30,aPosGet[1,2]  MSGET cTpSC  PICTURE PesqPict("SC1","C1_XTIPOSC") F3 CpoRetF3('C1_XTIPOSC');
						Valid CheckSX3("C1_XTIPOSC",cTpSC) .And. CM060VL3(cTpSC) .And. A110CabLCh(oGet) WHEN VisualSX3("C1_XTIPOSC") .and. !("C1_XTIPOSC"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON  
					aAdd(aDlgFields,{"C1_XTIPOSC","cTpSC"})
						
					@ aPosObj[1,1]+31,aPosGet[1,3]  SAY OemToAnsi(STR0157) OF oDlg PIXEL SIZE 038,006  //"Desc. Tipo doc."
					@ aPosObj[1,1]+30,aPosGet[1,4]  MSGET cDescTp When VisualSX3("C1_XTPDESC") .and. !("C1_XTPDESC"$cMTA110EC) OF oDlg PIXEL SIZE 80,10
					aAdd(aDlgFields,{"C1_XTPDESC","cDescTp"})

   				// 05/05/2011 - Requisitante Solicitacao
					@ aPosObj[1,1]+31,aPosGet[1,5]  SAY OemToAnsi(STR0158) OF oDlg PIXEL SIZE 038,006  //"Requisitante SC"
					@ aPosObj[1,1]+30,aPosGet[1,6]  MSGET cReqSol  F3 CpoRetF3("C1_XSOL");
						Valid CheckSX3("C1_XSOL",cReqSol) WHEN VisualSX3("C1_XSOL") .and. !("C1_XSOL"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON  
					aAdd(aDlgFields,{"C1_XSOL","cReqSol"})
					
					@ aPosObj[1,1]+45,aPosGet[1,1]  SAY OemToAnsi(STR0159) OF oDlg PIXEL SIZE 045,006  //"Centro de Custo"
					@ aPosObj[1,1]+44,aPosGet[1,2]  MSGET cCCusto  F3 CpoRetF3("C1_CC");
						Valid CheckSX3("C1_CC",cCCusto) WHEN Empty(cCCusto) .and. !("C1_CC"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON 
					aAdd(aDlgFields,{"C1_XSOL","cReqSol"})
						
					@ aPosObj[1,1]+45,aPosGet[1,3]  SAY OemToAnsi(STR0160) OF oDlg PIXEL SIZE 038,006  //"Num Contrato"
					@ aPosObj[1,1]+44,aPosGet[1,4]  MSGET cNumCt  F3 "CN9001" ;
						Valid CheckSX3("C1_XNUMCT",cNumCt) .and. ValGCT(cNumCt, cNumRev) WHEN GETMV("MV_TPSCCT")==cTpSC .and. !("C1_XNUMCT"$cMTA110EC) OF oDlg PIXEL SIZE 80,10 HASBUTTON 
					aAdd(aDlgFields,{"C1_XNUMCT","cNumCt"})
	
					@ aPosObj[1,1]+45,aPosGet[1,5]  SAY OemToAnsi(STR0161) OF oDlg PIXEL SIZE 038,006  //"Revisao Ct."
					@ aPosObj[1,1]+44,aPosGet[1,6]  MSGET cNumRev  ;
						Valid CheckSX3("C1_XNUMREV",cNumRev) .and. ValGCT(cNumCt, cNumRev) WHEN .F./*GETMV("MV_TPSCCT")==cTpSC*/ OF oDlg PIXEL SIZE 80,10 HASBUTTON 
					aAdd(aDlgFields,{"C1_XNUMREV","cNumRev"})
				EndIf
				
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Ponto de Entrada para manipular os Gets da Dialog da SC.      ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If lMt110TEL
					ExecBlock("MT110TEL",.F.,.F.,{@oDlg, aPosGet, nOpcx, nReg} )
				EndIf
				
				aColEdit:=NIL
				If lIntegTOP
					aColEdit:={}
					For nX := 1 to len(aHeader)
						If !(Alltrim(aHeader[nx,02])$"C1_PRODUTO;C1_QUANT;C1_UM;C1_LOCAL;C1_RATEIO")
							aAdd(aColEdit,aHeader[nx,02])
						EndIf
					next nX  
				EndIf
				
				oGet := MSGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpcx,"A110LinOK","A110TudOK","+C1_ITEM",.T.,aColEdit,,,nLinMax,"A110FldOk",,,"A110DelOk",oDlg)
		
				oGet:oBrowse:Cargo := {| a,b,c,d,e,g| __MYEDIT(a,b,c,d,e,g,oGet )}     

				For nx:=1 to len(aCols)
		            aadd(aSCForn,{aCols[nx][15], aCols[nx][16]})
		  	    Next nx	
		  	    
				For nx:=1 to len(aCols)
			  	    n := nX
			        A110AltLeg(.T.)
			        oGet:oBrowse:Refresh()
		  	    Next nx			  	    	

				ACTIVATE MSDIALOG oDlg ON INIT (IIf(lWhenGet,oGet:oBrowse:Refresh(),Nil),EnchoiceBar(oDlg,{||nOpcA:=1,IIf((oGet:TudoOk() .And. A110AColsRa(aColsBKPRat,nOpcx,aColsSCX)),oDlg:End(),( nOpcA := 0, oGet:oBrowse:SetFocus()) )},;
				{|| IIf(A110Exit(nOpcA),oDlg:End(),nOpcA := 0)},, aBut110)) VALID A110Exit(nOpcA)
			EndIf
			If nOpcA == 1
				Ma110GraGr() // Compatibiliza aCols
				Begin Transaction
					If !A110Grava(2,cA110Num,cSolic,dA110Data,cCCusto,cUnidreq,cCodCompr,cFilEnt,cCodNatu,cTpOP,aHeadSCX,aColsSCX)
						lHelpGrv := .T.
					Else
						EvalTrigger()
					EndIf
				End Transaction
				
				If lHelpGrv
					Help(" ",1,"A110NAOREG")
					nOpcA := 0
				EndIf                      
				
				If nOpcA == 1 .And. lSCCNI
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Bloco tirado do Ponto M110STTS para Alterar na SCR   ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
					// ALTERACAO - FWS - 25/05/11
					//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
					_nTotSC := _f110TotSC(cA110Num)
					
					IF ALTERA // inclui ou altera
						SC1->(dbSetOrder(1))
						IF SC1->(dbSeek(cFilSC1+cA110Num)) //.and. !Empty(SC1->C1_XGRPAPR)
							// verifica se gerou alcada
							SCR->(dbSetOrder(1))
							IF SCR->(dbSeek(cFilSCR+"SC"+SC1->C1_NUM))
	            		       ntotsc1   := SCR->CR_TOTAL
	            		       cCodLiber := SCR->CR_APROV
	            		       cObs      := SCR->CR_OBS
	            		       
	            		        While SCR->(!EOF()) .And. SCR->CR_FILIAL+SCR->CR_TIPO+Alltrim(SCR->CR_NUM) == xFilial("SCR")+"SC"+Alltrim(SC1->C1_NUM)
	            		       	If SCR->CR_STATUS $ "01*02*04"
	            		       		lBloq := .T.
	            		       		Exit
	            		       	EndIf
	            		       	SCR->(dbSkip())
	            		       End
	            		       
								If _nTotSc > ntotsc1 .Or. SC1->C1_APROV == 'B' .Or. lBloq // Se ja estava bloqueada mantem o bloqueio
									//So bloqueia se o valor da SC for maior que a alcada
									TCSqlExec("UPDATE "+RetSqlName("SC1")+" SET C1_APROV = 'B' , C1_WFE = 'F' WHERE D_E_L_E_T_ = ' ' AND C1_NUM = '"+SC1->C1_NUM + "' AND C1_FILIAL = '"+cFilSC1+"'")
									_lBlq := .T.
																	
									If lLog
										RSTSCLOG("APR",2,/*cUsrWF*/)
									EndIf
								Else
									//Ja coloco a alcada como liberada
									SCR->(dbSeek(cFilSCR+"SC"+SC1->C1_NUM))										
									MaAlcDoc({cA110Num,"SC",_nTotSC,cCodLiber,,SCR->CR_GRUPO,,,,,cObs},SC1->C1_EMISSAO,4)
								Endif
							ENDIF
						ENDIF
					ENDIF   
					
				EndIf
				
				If nOpcA == 1 .And. ExistBlock("M110STTS")           
					ExecBlock("M110STTS",.F.,.F.,{cA110Num,2,lCopia,_lBlq})
				EndIf
			EndIf
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Finaliza a gravacao dos lancamentos do SIGAPCO            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PcoFinLan("000051")
			PcoFreeBlq("000051",,,,,(nOpca!=1)/*lCancela*/)	
		EndIf
	
		If IntePMS() .And. (!Type("l110Auto") == "L" .Or. !l110Auto)
			SetKey(VK_F10, Nil)
		EndIf
	
		MsUnLockAll()
		                                                                 
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Reposiciona o Cadastro de Fornecedores  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("SA2")
		DbSetOrder(1)
		DbGoTop()                  
		
		RestArea(aArea)

	EndIf
EndIf

Return (nOpcA == 1)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Deleta³Rev.   ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de exclusao das solicitacoes de compra                ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                    ³±±
±±³          ³ ExpN2 = Numero do registro                                  ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo possibilitar a exclusao manual ³±±
±±³          ³das solicitacoes de compra utilizando-se de uma modelo 2     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Deleta(cAlias,nReg,nOpcx,lCopia,lWhenGet,lVisual)

local lSCCNI		:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local aArea			:= GetArea()
Local aArea2			:= {}
Local aBut110		:= {}
Local aButtonUsr    := {}
Local aBtnBack		:= {}
Local lContinua		:= .F.
Local lMsc1110D     := .T.
Local nOpcA			:= 0
Local aSizeAut		:= {}
Local oSize		:= nil
Local aInfo 		:= {}
Local aPosGet		:= {}
Local aPosObj		:= {}
Local aPosObjPE     := {}
Local oDlg
Local oGet
Local nX            := 1
Local cSolic 		:= SC1->C1_SOLICIT
Local oSolic
Local oTpOp			
Local dA110Data 	:= SC1->C1_EMISSAO
Local cFilEnt       := SC1->C1_FILENT
Local lGspInUseM 	:= If(Type('lGspInUse')=='L', lGspInUse, .F.)
Local lNaturez      := (FieldPos("C1_NATUREZ") > 0 .And. cPaisLoc <> "BRA")
Local lMt110Get     := ExistBlock("MT110GET")
Local lMt110TEL     := ExistBlock("MT110TEL")
Local lRet          := .T.
Local lGrade	 	:= MaGrade()
Local lTpOp 		:= SuperGetMV("MV_TPOPDOC",.F.,.F.)
Local aColsOri      := Nil
Local lPmsInt:= IsIntegTop(,.T.)
//-- Variavel usada para verificar se o disparo da funcao IntegDef() pode ser feita manualmente
Local lIntegDef  	:= FWHasEAI("MATA110",.T.,,.T.)
Local lComCent  	:= !Empty(SC1->C1_SCORI) //SC proveniente de processo de compra centralizada
Local lRetInt		:= .T.
Local lMkPlace		:= SuperGetMV("MV_MKPLACE",.F.,.F.) 

Local cFilSC1	:= xFilial("SC1")

PRIVATE cCodNatu	:= iIf(lNaturez,SC1->C1_NATUREZ,"")
PRIVATE cCCusto 	:= SC1->C1_CC
PRIVATE cUnidReq 	:= SC1->C1_UNIDREQ
PRIVATE cCodCompr 	:= SC1->C1_CODCOMP
PRIVATE cTpOP		:= If(Empty(SC1->C1_TPOP),"F",SC1->C1_TPOP)
PRIVATE aHeader	:= {}
PRIVATE aCols 		:= {}
PRIVATE aRatAFG		:= {}
Private aHdrAFG	:=	{}
PRIVATE bPmsDlgSC	:= {||}

DEFAULT l110Auto    := .F.
DEFAULT lVisual     := .T.
PRIVATE cDescTp		:=	If(lSCCNI,Posicione("COL",1,xFilial("COL")+SC1->C1_XTIPOSC,"COL_DESC"),'')

PRIVATE oGrade	  := MsMatGrade():New('oGrade',,"C1_QUANT",,"A110GValid()",,;
  						{ 	{"C1_QUANT" ,.T., {{"C1_QTSEGUM",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),aCols[nLinha][nColuna],0,2) } }} },;
  							{"C1_ITEM",NIL,NIL},;
							{"C1_DATPRF",NIL,NIL},;
  							{"C1_QTSEGUM",.T., {{"C1_QUANT",{|| ConvUm(AllTrim(oGrade:GetNameProd(,nLinha,nColuna)),0,aCols[nLinha][nColuna],1) }}} } })
lCopia	:=If(ValType(lCopia) == "L",lCopia,.F.)
cA110Num 	:= SC1->C1_NUM
bPmsDlgSC	:= {||PmsDlgSC(5,cA110Num)}
                                             
if lSCCNI
	cTpSC := SC1->C1_XTIPOSC    // 05/05/2011 - Campo Tipo de Documento
	cReqSol := __cUserId        //  09/05/11 - Requisitante Sol
	cCCusto := SC1->C1_CC //  09/05/11 - Item Contabil
	cNumCt := SC1->C1_XNUMCT //  09/05/11 - Num Contrato
	cNumRev := SC1->C1_XNUMREV //  19/09/11 - Revisao Ct.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para validar a exclusão da Solicitação de Compras ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT110VLD")
	lRet := Execblock("MT110VLD",.F.,.F.,{nOpcx})
	If ValType(lRet) <> "L"
		lRet := .T.
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Valida usuario e grupo de compras								   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. !lComCent
	lRet := VldAltSolic()
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o item esta no portal marketplace e se o campo alterado e restrito ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet
  	aArea2 := GetArea()
	SC1->(dbSeek(cFilSC1+cA110Num))
	While !SC1->(Eof()) .And. lRet .And. SC1->C1_NUM == cA110Num
		If SC1->C1_ACCPROC == "1"
			Aviso(STR0102,STR0103,{STR0039},1) //Este item não podera ser excluido pois já esta em processo no MarketPlace.
			lRet := .F.    		
    		Exit
		EndIf
		SC1->(dbSkip())
	End  	
	RestArea(aArea2)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se o usuario tem permissao de delecao. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aArea2 := GetArea()
	SC1->(dbSeek(cFilSC1+cA110Num))
	While !SC1->(Eof()) .And. lRet .And. SC1->C1_NUM == cA110Num
		lRet := MaAvalPerm(1,{SC1->C1_PRODUTO,"MTA110",5})
		if lRet
			lRet := MaAvalPerm(3,{SC1->C1_LOCAL,SC1->C1_PRODUTO,"MTA110",5})
		endif
		if !lRet
			Return (.F.)
		endif
		SC1->(dbSkip())
	End
	RestArea(aArea2)
	If !lRet
		Help(,,1,'SEMPERM')
	EndIf


If lRet
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Bloqueio para nao permitir que uma SC gerada no Totvs |
	//|Obras e Projetos seja excluida no Protheus            |   
	//|Adicionado por Jandir Deodato em 25/11/11     	     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
	If lPmsInt .and. !l110auto
		dbSelectArea ("AFG")
		aAreaAFG  := AFG->(GetArea())
		AFG->(DbSetOrder(2))
		AFG->(DbSeek(xFilial("AFG")+SC1->(C1_NUM+C1_ITEM)))
		If AFG->AFG_VIAINT =="S"	
			MsgAlert(STR0080) // "Solicitacao de compras geradas no TOP so podem ser excluidas pelo TOP."
			RestArea(aAreaAFG)
			RestArea(aArea)
			MsUnLockAll()
			Return (.F.)
		Endif
	Endif
	
	//Não permite exclusão da SC gerado pelo TOP (Mensagem Unica)
	If !l110auto .And. AllTrim(SC1->C1_ORIGEM) == "SOLUM"
		MsgAlert(STR0080) // "Solicitacao de compras geradas no TOP so podem ser excluidas pelo TOP."
		Return .F.
	Endif
	
	lWhenGet := IIf(ValType(lWhenGet) <> "L" , .F. , lWhenGet)

	//------------------------------------------------------------------
	// Não permite exclusão caso algum item tenha vínculo com sigamnt
	//------------------------------------------------------------------
	If SuperGetMV("MV_NGMNTCM",.F.,"") == "S" .And. FindFunction( 'MNTINTSASC' ) .And. !MNTINTSASC( SC1->C1_NUM, 'MATA110', 5 )
		Return .F.
	EndIf

	//SC gerada encontra-se no processo licitatório.
	If A110ScxEdt()	 
		MsgAlert(STR0117)
		Return (.F.)
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Efetua a montagem do aHeader e do aCols                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !lVisual
		lContinua := A110Monta(4,{|cAlias| MaCanDelSC(cAlias,,.F.)},,nOpcX )
	Else
		lContinua := A110Monta(4,{|cAlias| MaCanDelSC(cAlias)},,nOpcX )
	EndIf
	
	aColsOri := aClone(aCols)
	aCols := aColsGrade(oGrade, aCols, aHeader, "C1_PRODUTO", "C1_ITEM", "C1_ITEMGRD")
	
	If IntePms() 
		If !( PmsVldSC(aHeader,aCols,SC1->C1_NUM, .T.) )
			Return		
		Endif
	Endif

	If (ExistBlock("MSC1110D"))
		lMsc1110D := ExecBlock("MSC1110D",.F.,.F.)
		If ValType(lMsc1110D) == "L"
			lContinua := lMsc1110D
	    EndIf
	EndIf
	
	If IntePms()	// Se usa PMS integrado com o ERP
		aBut110 := {{'PROJETPMS',{||Eval(bPmsDlgSC)},STR0028 ,STR0054}}
	
		If !Type("l110Auto") == "L" .Or. !l110Auto
			SetKey(VK_F10, {|| Eval(bPmsDlgSC)})
		EndIf
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Botao para consultar Historico do Produto               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aadd(aBut110,{"S4WB005N",{|| A110ComView() },STR0065,STR0066 })  //Historico de Produtos
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Botao para exportar dados para EXCEL                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If RemoteType() == 1
		aAdd(aBut110 ,{PmsBExcel()[1],{|| DlgToExcel({{"CABECALHO","",{RetTitle("C1_NUM") ,RetTitle("C1_SOLICIT"),RetTitle("C1_EMISSAO"),RetTitle("C1_FILENT")},{cA110Num,cSolic ,dA110Data,cFilEnt}},{"GETDADOS","",aHeader,aCols}})},PmsBExcel()[2],PmsBExcel()[3]})
	EndIf
	               
	If ( ExistBlock("MA110BAR") )
		aButtonUsr := ExecBlock("MA110BAR",.F.,.F.,{nOpcx})
		If ( ValType(aButtonUsr) == "A" )
			For nX := 1 To Len(aButtonUsr)
				Aadd(aBut110,aClone(aButtonUsr[nX]))
			Next nX
		EndIf
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Ponto de Entrada criado para configurar botoes da enchoicebar        ³
	//³ Este PE foi criado porque o PE acima (MA110BAR) nao permite manipular³
	//³ botoes da enchoicebar.                                               ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ExistBlock( "MA110BUT" )
		aBtnBack := aClone(aBut110)
		aBut110 := ExecBlock( "MA110BUT", .F., .F., {nOpcx, aBut110 } )
		If ValType( aBut110 ) # "A"
			aBut110 := aClone(aBtnBack)
		EndIf
	EndIf
	
	If ( lContinua )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inicializa a gravacao dos lancamentos do SIGAPCO          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PcoIniLan("000051")
		If ( !l110Auto .Or. lWhenGet ) .And. lVisual
			aSizeAut := MsAdvSize(,.F.)

			aInfo := { aSizeAut[ 1 ], aSizeAut[ 2 ], aSizeAut[ 3 ], aSizeAut[ 4 ], 2, 2 }
			If lNaturez
				if lSCCNI
					aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,45,105,145,225,265,175,210,235,260}})
				Else
					aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,45,105,145,225,265,166,203,245,270}})
				EndIf
			Else
				aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,45,105,145,225,265,210,255}})
			EndIf
	
			DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0011) +' - '+OemToAnsi(STR0010) From aSizeAut[7],0 TO aSizeAut[6],aSizeAut[5] OF oMainWnd PIXEL		//"Solicita‡„o de Compras"
			oSize := FwDefSize():New(.T.,,,oDlg)

			If	lSCCNI	
				oSize:AddObject('HEADER',100,65,.T.,.F.)
			ElseIf (!lGspInUse .AND. !__lPyme .AND. lNaturez) .OR. lTpOp
				oSize:AddObject('HEADER',100,55,.T.,.F.)//Definição antiga do dimensionamento
			Else
				oSize:AddObject('HEADER',100,30,.T.,.F.)
			EndIf       
		
			oSize:AddObject('GRID'  ,100,10,.T.,.T.)
			
			oSize:aMargins 	:= { 3, 3, 3, 3 }
			oSize:Process()	
			
			aAdd(aPosObj,{oSize:GetDimension('HEADER', 'LININI'),oSize:GetDimension('HEADER', 'COLINI'),oSize:GetDimension('HEADER', 'LINEND'),oSize:GetDimension('HEADER', 'COLEND')})
			aAdd(aPosObj,{oSize:GetDimension('GRID'  , 'LININI'),oSize:GetDimension('GRID'  , 'COLINI'),oSize:GetDimension('GRID'  , 'LINEND'),oSize:GetDimension('GRID'  , 'COLEND')})
	
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Ponto de Entrada para Alterar as cordenas da dialog de SCs    ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lMt110Get
				aPosObj := If(ValType(aPosObjPE:=ExecBlock("MT110GET",.F.,.F.,{aPosObj,nOpcx}))== "A",aPosObjPE,aPosObj)
			Endif
	
			// Para a CNI nao precisa da borda, pois como novos campos sao criados via PE, fica desposicionado.
 			IF !lSCCNI
				@ aPosObj[1,1],aPosObj[1,2] TO aPosObj[1,3],aPosObj[1,4] LABEL ""  OF oDlg PIXEL
			ENDIF
			
			@ aPosObj[1,1]+3,aPosGet[1,1] SAY OemToAnsi(STR0012)  of oDlg PIXEL		//"&N£mero"
			@ aPosObj[1,1]+2,aPosGet[1,2] MSGET cA110Num  	Picture PesqPict("SC1","C1_NUM")		When .F. of oDlg PIXEL
			
			@ aPosObj[1,1]+3,aPosGet[1,3] SAY OemToAnsi(STR0013)  of oDlg PIXEL		//"&Solicitante"
			@ aPosObj[1,1]+2,aPosGet[1,4] MSGET oSolic VAR cSolic Picture PesqPict("SC1","C1_SOLICIT")	When .F. SIZE 80,10 of oDlg PIXEL
			If(lLGPD,OfuscaLGPD(oSolic,"C1_SOLICIT"),.F.)
			
			@ aPosObj[1,1]+3,aPosGet[1,5] SAY OemToAnsi(STR0014)	 of oDlg PIXEL	//"&Data de Emiss„o"
			@ aPosObj[1,1]+2,aPosGet[1,6] MSGET dA110Data  	Picture PesqPict("SC1","C1_EMISSAO")	When .F. SIZE 40,10 of oDlg PIXEL
			
			If !lGspInUseM
				If ! __lPyme
					@ aPosObj[1,1]+17,aPosGet[2,1] SAY OemToAnsi(STR0016) 	 of oDlg PIXEL  SIZE 45,10	//"&Unid. Requis."
					@ aPosObj[1,1]+16,aPosGet[2,2] MSGET cUnidReq  	Picture PesqPict("SC1","C1_UNIDREQ") 	When .F. of oDlg PIXEL
					@ aPosObj[1,1]+17,aPosGet[1,3] SAY OemToAnsi(STR0017)	 of oDlg PIXEL	 SIZE 45,10 //"&Cod. Comprador"
					@ aPosObj[1,1]+16,aPosGet[1,4] MSGET cCodCompr 	Picture PesqPict("SC1","C1_CODCOMP")	When .F. of oDlg PIXEL
				EndIf
				If lNaturez
					@ aPosObj[1,1]+17,aPosGet[2,7] SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega"
					if lSCCNI
						@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 019,006
					Else
						@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 058,006                           
					EndIf
					@ aPosObj[1,1]+17,aPosGet[2,9] SAY Alltrim(RetTitle("C1_NATUREZ"))	 Of oDlg PIXEL	SIZE 45,10
					@ aPosObj[1,1]+16,aPosGet[2,10] MSGET cCodNatu F3 CpoRetF3("C1_NATUREZ") Picture PesqPict("SC1","C1_NATUREZ")When .F. Of oDlg PIXEL SIZE 50,10
				Else
					@ aPosObj[1,1]+17,aPosGet[2,7] SAY OemToAnsi(STR0030) OF oDlg PIXEL SIZE 050,015 //"Filial p/ Entrega"
					
					if lSCCNI
						@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 019,006
					Else
						@ aPosObj[1,1]+16,aPosGet[2,8] MSGET cFilEnt     PICTURE PesqPict("SC1","C1_FILENT") F3 CpoRetF3('C1_FILENT');
							Valid CheckSX3("C1_FILENT",cFilEnt) WHEN .F. OF oDlg PIXEL SIZE 062,006
					EndIf
				EndIf
			EndIf
	       
	      	If lTpOp
	      		@ aPosObj[1,1]+30,aPosGet[2,1] SAY Alltrim(RetTitle("C1_TPOP")) Of oDlg PIXEL		//Firme ou previsto C1_TPOP		
				@ aPosObj[1,1]+30,aPosGet[2,2] COMBOBOX oTpOP VAR cTpOp ITEMS StrTokArr(x3cbox(),';') When .F. SIZE 100,10 Of oDlg PIXEL	              
	 		EndIf
	 		
	 		If lSCCNI	 
	 			// 05/05/2011 - Campo Tipo de Documento
				@ aPosObj[1,1]+31,aPosGet[1,1]  SAY OemToAnsi(STR0156) OF oDlg PIXEL SIZE 038,006  //"Tipo doc."
		   		@ aPosObj[1,1]+30,aPosGet[1,2] MSGET cTpSC  PICTURE PesqPict("SC1","C1_XTIPOSC") WHEN .F.  OF oDlg PIXEL SIZE 80,10
			   	
			   	@ aPosObj[1,1]+31,aPosGet[1,3]  SAY OemToAnsi(STR0157) OF oDlg PIXEL SIZE 038,006  //"Desc. Tipo doc."
				@ aPosObj[1,1]+30,aPosGet[1,4]  MSGET cDescTp OF oDlg PIXEL SIZE 80,10
	   
		       
				// 09/05/2011 - Req Sol
				@ aPosObj[1,1]+31,aPosGet[1,5]  SAY OemToAnsi(STR0158) OF oDlg PIXEL SIZE 038,006  //"Tipo doc."
			   	@ aPosObj[1,1]+30,aPosGet[1,6] MSGET cReqSol WHEN .F.  OF oDlg PIXEL SIZE 80,10
			   	
			   	@ aPosObj[1,1]+45,aPosGet[1,1]  SAY OemToAnsi(STR0159) OF oDlg PIXEL SIZE 045,006  //"Centro de Custo"
			   	@ aPosObj[1,1]+44,aPosGet[1,2] MSGET cCCusto WHEN .F.  OF oDlg PIXEL SIZE 80,10
			   	
			   	@ aPosObj[1,1]+45,aPosGet[1,3]  SAY OemToAnsi(STR0160) OF oDlg PIXEL SIZE 038,006  //"Tipo doc."
			   	@ aPosObj[1,1]+44,aPosGet[1,4] MSGET cNumCt WHEN .F.  OF oDlg PIXEL SIZE 80,10
			   	
			   	@ aPosObj[1,1]+45,aPosGet[1,5]  SAY OemToAnsi(STR0161) OF oDlg PIXEL SIZE 038,006  //"Revisao Ct."
			   	@ aPosObj[1,1]+44,aPosGet[1,6] MSGET cNumRev WHEN .F.  OF oDlg PIXEL SIZE 80,10
	 		EndIf
	 		
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Ponto de Entrada para manipular os Gets da Dialog da SC.      ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lMt110TEL
				ExecBlock("MT110TEL",.F.,.F.,{@oDlg, aPosGet, nOpcx, nReg} )
			EndIf       

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Criacao da Area da MsGetDados do SC   ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lGrade
				oGet := MsGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],4,,,"",,{"C1_QUANT","C1_DATPRF"},,,,,,,,,)
			Else
   				oGet := MSGetDados():New(aPosObj[2,1],aPosObj[2,2],aPosObj[2,3],aPosObj[2,4],nOpcx,"A110LinOk","A110TudOk","",.F.,,,,990)
			EndIf
			oGet:oBrowse:bChange := {|| A110Solic(cA110Num,oSolic,@cSolic),.T.}
			ACTIVATE MSDIALOG oDlg ON INIT (IIf(lWhenGet,oGet:oBrowse:Refresh(),Nil),EnchoiceBar(oDlg,{||nopcA:=1,oDlg:End()},;
			{|| IIf(A110Exit(nOpcA),oDlg:End(),nOpcA := 0)},, aBut110)) VALID A110Exit(nOpcA)
	
		Else
			nOpcA  := 1
		EndIf
		If ( nOpcA == 1 )
			aCols := aClone(aColsOri)
			Begin Transaction
				If lIntegDef .And. !lMkPlace
					Inclui := .F.
					Altera := .F.
					lRetInt := 	A110INTMU()
				EndIf
				
				If lRetInt
					A110Grava(3,cA110Num,cSolic,dA110Data,cCCusto,cUnidreq,cCodCompr,cFilEnt,cCodNatu)
					
					COMEXCDHN("1",xFilial("SC1"),ca110Num) //-- Exclui vinculo de documentos criados pela biblioteca de compras
					
					EvalTrigger()
				Else
					nOpcA := 0
				Endif
			End Transaction
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Finaliza a gravacao dos lancamentos do SIGAPCO            ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PcoFinLan("000051")    
			
			If nOpcA == 1 .And. lSCCNI
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Bloco tirado do Ponto M110STTS para Excluir na SCR   ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ 
				// EXCLUSAO - FWS - 25/05/11
				//------------------------------------------------------------------------------   
				_nTotSC := _f110TotSC(cA110Num)
	
				IF (!INCLUI .and. !ALTERA) // exclui
					MaAlcDoc({cA110Num,"SC",_nTotSC,,,,,1,1,},SC1->C1_EMISSAO,3)
				ENDIF
			EndIf
			
			If nOpcA == 1 .And. ExistBlock("M110STTS") 
				ExecBlock("M110STTS",.F.,.F.,{cA110Num,3,lCopia,.F.})
			EndIf	
		EndIf
	EndIf
	
	If IntePMS() .And. (!Type("l110Auto") == "L" .Or. !l110Auto)
		SetKey(VK_F10, Nil)
	EndIf
EndIf

RestArea(aArea)
Return (nOpcA == 1) 

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Numero³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao do numero da solicitacao de compra       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Numero da solicitacao de compra                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo nao permitir a duplicacao do   ³±±
±±³          ³numero da solicitacao de compra                              ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Numero(cNumSC)

Local aArea 	:= GetArea()
Local lRet		:= .T.
Local cFilSC1	:= xFilial("SC1")

If Empty(cNumSC)
	// Caso seja MRP gera novo numero
	If lProjM711
		cNumSc:=GetNumSC1()
	Else
		Help(" ",1,STR0166)//VAZIO
		lRet := .F.
	EndIf
Else
	dbSelectArea("SC1")
	dbSetOrder(1)
	If MsSeek( cFilSC1+cNumSC)
		// Caso seja MRP gera novo numero
		If lProjM711 .Or. PutByAPS()
			cNumSc:=GetNumSC1()
			If PutByAPS() .And. Type('cWSMAT110') == "C"
				cWSMAT110 := cNumSc
			EndIf
		Else
			Help(" ",1,"A11001")
			lRet := .F.
		EndIf
	EndIf       
	
EndIf

RestArea(aArea)
Return lRet
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Produt³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao do codigo do produto da solicitacao de   ³±±
±±³          ³compra                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do produto                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo nao permitir a duplicacao do   ³±±
±±³          ³numero da solicitacao de compra                              ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Produto(cProduto)
Local aArea		:= GetArea()
Local nX        := 0
Local nPLoja	:= 0
Local cDescri	:= ""
Local lRetorno  := .T.
Local nPos:=0
Local lVldContrato:= .T.
Local aCTBEnt		:= {}
Local lReferencia	:= .F.
Local lGrade		:= MaGrade()
Local nLoop         := Nil
Local nPProduto		:= 0
Local nPGrade		:= 0
Local nPItemGrd 	:= 0
Local nPQtdVen		:= 0
Local cProdRef	  := ""
Local cCodUser    := ""
Local cRestSol   := SuperGetMv("MV_RESTSOL")
Local cQry		 :=""
Local cTemp 	 := ""
Local lIncPrdCtr := SuperGetMv("MV_PRODCTR",.F.,.F.)

DEFAULT cProduto  := &(ReadVar()) 

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se o usuario tem permissao de inclusao. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Inclui	
	lRetorno := MaAvalPerm(1,{M->C1_PRODUTO,"MTA110",3})
	If !lRetorno
		Help(,,1,'SEMPERM')
	EndIf	
EndIf
	
lGatilha := If(ValType(lGatilha) == "L",lGatilha,.T.) // .T.=Permite preencher aCols /  .F.=Executando via VldHead()

If l110Auto
   If n <= Len(aAutoItens)
	   nPos := aScan(aAutoItens[n],{|x| AllTrim(x[1]) == "AUTVLDCONT"})
	   If nPos > 0
    	  If aAutoItens[n,nPos,2] == "N"
        	 lVldContrato:= .F.
			EndIf
		EndIf
	EndIf
EndIf

cProdRef := cProduto

If lGrade //Verifica se a grade esta ativa e se o produto digitado eh uma referencia

	If cProdRef == GdFieldGet("C1_PRODUTO") // Nao alterei o produto
		Return(.T.)
	EndIf	

	lReferencia := MatGrdPrrf(@cProdRef)
	
	If lGatilha
		nPGrade		:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_GRADE"})
		nPQtdVen	:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_QUANT"})
		
		aCols[n][nPQtdVen]:= 0
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta o AcolsGrade e o AheadGrade para este item     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	 	oGrade:MontaGrade(n,cProdRef,.T.,,lReferencia,.T.)
	
		If ( lReferencia )
			If ( nPGrade > 0 )
				aCols[n][nPGrade] := "S"
				lReferencia := .T.
			EndIf
		Else
			If ( nPGrade > 0 )
			 	oGrade:MontaGrade(n,cProdRef,.T.,,lReferencia)
				If aCols[n][nPGrade] == "S"
					nPProduto	:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_PRODUTO"})
					nPItemGrd 	:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_ITEMGRD"})
					For nLoop := 1 to Len(aHeader)
						If X3Obrigat(aHeader[nLoop, 2]) .Or. AllTrim(aHeader[nLoop, 2]) $ "C1_QUANT, C1_QTSEGUM, C1_GRADE"
							If ! AllTrim(aHeader[nLoop, 2]) $ "C1_ITEM, C1_PRODUTO, C1_DATPRF"
								aCols[n,nLoop] := CriaVar(aHeader[nLoop, 2] , .F.)
							EndIf
						EndIf
					Next
					aCols[n][nPProduto] := Pad(cProdRef, Len(SB1->B1_COD))
					aCols[n][nPGrade]   := "N"
					aCols[n][nPItemGrd] := Space(Len(aCols[n][nPItemGrd]))
				EndIf				
			EndIf
		EndIf
	EndIf
EndIf

SB1->(dbSetOrder(1))
SB1->(MsSeek(xFilial("SB1")+cProdRef,.F.))
If lGatilha 
	cDescri := IIf( lReferencia , oGrade:GetDescProd(cProdRef), SB1->B1_DESC )
EndIf

If(!lReferencia)	
	Do Case
		Case SB1->(Eof())
			lRetorno := .F.
			Help(" ",1,"C1_PRODUTO")
		Case SB1->B1_CONTRAT == "S" .and. lVldContrato
		 	cQry:= "SELECT COUNT(*) QTDSC3 FROM "+RetSqlName("SC3")+" SC3 "
			cQry+= "WHERE SC3.D_E_L_E_T_<>'*'"
			cQry+= "AND C3_PRODUTO = '"+Alltrim(M->C1_PRODUTO)+"' "
			cQry+= "AND C3_QUANT > C3_QUJE"
			
			cAliasQry  := GetNextAlias()
			dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQry),cAliasQry,.F.,.T.)
		
			If (cAliasQry)->QTDSC3 > 0
				lRetorno := .F.
				Help(" ",1,"A110CONTR")
			Elseif !lIncPrdCtr
				lRetorno := .F.
				Help(" ",1,"A110CONTR")
			Else
				lRetorno:= .T.
			EndIf			
			(cAliasQry)->(DbCloseArea())			
		Case SB1->B1_SOLICIT =="S" .And. cRestSol == "S"
			cCodUser := RetCodUsr()
			If(!A110Restr(cProduto,UsrRetGrp(,cCodUser),cCodUser))
				lRetorno := .F.			
			EndIf
	EndCase
EndIf

If(lRetorno)
	lRetorno := A110Valid("P")	
EndIf

If lRetorno 
	//³ Posiciona no produto selecionado ³
	if(SB1->(IndexOrd()) != 1)
		SB1->(dbSetOrder(1))		
	endIf
	SB1->(MsSeek(xFilial("SB1") + cProdRef,.F.))
	lRetorno := RegistroOk("SB1")//VerIfica se o Registro esta Bloqueado
EndIf

If lRetorno .And. lGatilha
	If ( Alltrim(MV_PAR01) == "B5_CEME" )		
		SB5->(dbSetOrder(1))
		If SB5->(MsSeek(xFilial("SB5") + cProduto ))
			cDescri := SB5->B5_CEME
		EndIf
	EndIf
	cDescri := PadR(cDescri,Len(SC1->C1_DESCRI))

	//³Atualiza os campos vinculados ao produto                      ³
	For nX := 1 To Len(aHeader)
		cTemp := Trim(aHeader[nX,2])
		Do Case
			Case cTemp == "C1_FORNECE"
				If ( SB1->B1_MONO=="S" )
					nPLoja := aScan(aHeader,{|x| Alltrim(x[2])=="C1_LOJA"})
					If ( nPLoja > 0 )
						aCols[n][nX] 		:= SB1->B1_PROC
						aCols[n][nPLoja]	:= SB1->B1_LOJPROC
					EndIf
				EndIf
			Case cTemp == "C1_UM"			// Unidade Medida
				If !lReferencia
					aCols[n][nX] := SB1->B1_UM
				Else
					If MatOrigGrd() == "SBQ"
						aCols[n][nX] := SBR->BR_UM
					ElseIf MatOrigGrd() == "SB4"
						aCols[n][nX] := SB4->B4_UM
					EndIf
				EndIf
			Case cTemp == "C1_SEGUM"		// Segunda Unidade Medida
				If !lReferencia
					aCols[n][nX] := SB1->B1_SEGUM
				Else
					If MatOrigGrd() == "SB4"
						aCols[n][nX] := SB4->B4_SEGUM
					EndIf
				EndIf
				a100SegUm()
			Case cTemp == "C1_LOCAL"		// AlmoxarIfado
				If !lReferencia
					aCols[n][nX] := RetFldProd(SB1->B1_COD,"B1_LOCPAD")
				Else
					If MatOrigGrd() == "SBQ"
						aCols[n][nX] := SBR->BR_LOCPAD
					ElseIf MatOrigGrd() == "SB4"
						aCols[n][nX] := SB4->B4_LOCPAD
					EndIf
				EndIf
			Case !lReferencia
				Do Case
					Case cTemp == "C1_CC"// Centro Custo
						aCols[n][nX] := SB1->B1_CC
					Case cTemp == "C1_CONTA"// Conta Contabil
						aCols[n][nX] := SB1->B1_CONTA
					Case cTemp == "C1_DESCRI"// Descricao
						aCols[n][nX] := cDescri
					Case cTemp == "C1_IMPORT"// Produto Importado
						aCols[n][nX] := SB1->B1_IMPORT
					Case cTemp == "C1_ITEMCTA"// Item da conta contabil
						aCols[n][nX] := SB1->B1_ITEMCC
					Case cTemp == "C1_CLVL"// Classe de valor
						aCols[n][nX] := SB1->B1_CLVL				
				EndCase			
		EndCase
	Next nX
	
	aCTBEnt := CTBEntArr()
	For nX := 1 To Len(aCTBEnt)
		If GDFieldPos("C1_EC"+aCTBEnt[nX]+"CR",aHeader) > 0 .And. SB1->(FieldPos("B1_EC"+aCTBEnt[nX]+"CR")) > 0
			aCols[n,GDFieldPos("C1_EC"+aCTBEnt[nX]+"CR")] := SB1->&("B1_EC"+aCTBEnt[nX]+"CR")
		EndIf
		If GDFieldPos("C1_EC"+aCTBEnt[nX]+"DB",aHeader) > 0 .And. SB1->(FieldPos("B1_EC"+aCTBEnt[nX]+"DB")) > 0
			aCols[n,GDFieldPos("C1_EC"+aCTBEnt[nX]+"DB")] := SB1->&("B1_EC"+aCTBEnt[nX]+"DB")
		EndIf
	Next nX
	FwFreeArray(aCTBEnt)	
EndIf
cProduto := IIf(cProduto == Nil,&(ReadVar()),cProduto)
RestArea(aArea)
Return (lRetorno)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110IniLoj³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao do fornecedor canal                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a validacao do codigo  ³±±
±±³          ³e loja do fornecedor canal                                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110IniLoj()

Local aArea		:= GetArea()
Local nPLoja	:= aScan(aHeader,{|x| Trim(x[2])=="C1_LOJA"})
Local nPProd	:= aScan(aHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local cLoja		:= Space(2)
Local lRetorno	:= .T.

lGatilha := If(ValType(lGatilha) == "L",lGatilha,.T.) // .T.=Permite preencher aCols /  .F.=Executando via VldHead() 

dbSelectArea("SA2")
If !Empty(M->C1_FORNECE)
	If Empty(aCols[n][nPLoja]) .And. lGatilha 
        If xFilial("SA2") == SA2->A2_FILIAL .And. SA2->A2_COD == M->C1_FORNECE 
	    	cLoja:=SA2->A2_LOJA
	    Else
	    	cLoja:=""
 	    EndIf
	   
		SA2->(dbSetOrder(1))
		SA2->(MsSeek(xFilial("SA2")+M->C1_FORNECE+cLoja))
		If SA2->(Found())
			aCols[n][nPLoja] := SA2->A2_LOJA
			lRetorno := .T.
		EndIf
	Else
        If xFilial("SA2") == SA2->A2_FILIAL .And. SA2->A2_COD == M->C1_FORNECE 
	    	aCols[n][nPLoja] := SA2->A2_LOJA
		EndIf
	
		lRetorno := ExistCpo("SA2",M->C1_FORNECE+aCols[n][nPLoja])
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Faz a Consistencia entre do Fornecedor Canal do Produto               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SB1")
dbSetOrder(1)
If lRetorno .And. ( MsSeek(xFilial("SB1")+aCols[n][nPProd]) )
	If  SB1->B1_MONO=="S" 
		If (SB1->B1_PROC != M->C1_FORNECE)
			Help(" ",1,"A110CANAL")
			lRetorno := .F.
		Else
			If ( nPLoja > 0 )
				aCols[n][nPLoja]	:= SB1->B1_LOJPROC
			EndIf
		EndIf
	EndIf
EndIf
RestArea(aArea)
Return(lRetorno)   

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110ChkLoj³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao do fornecedor canal                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                       ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a validacao do codigo  ³±±
±±³          ³e loja do fornecedor canal                                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110ChkLoj()
Local nPFornece := aScan(aHeader,{|x| Trim(x[2])=="C1_FORNECE"})  
Local nPProd	:= aScan(aHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local lRetorno  := .T.

lRetorno := (ExistCpo("SA2",aCols[n][nPFornece]+M->C1_LOJA))
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Faz a Consistencia entre a Loja do Fornecedor Canal do Produto              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SB1")
dbSetOrder(1)
If lRetorno .And. ( MsSeek(xFilial("SB1")+aCols[n][nPProd]) )
	If ( SB1->B1_MONO=="S" .And. SB1->B1_LOJPROC != M->C1_LOJA)
		Help(" ",1,"A110CANAL")
		lRetorno := .F.
	EndIf
EndIf
Return lRetorno

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110LinOk ³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao LinhaOk                                  ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto da GetDados                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. -> Linha valida                                   ³±±
±±³          ³       .F. -> Linha invalida                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a validacao de uma     ³±±
±±³          ³linha da getdados para a rotina de atualizacao da solicitacao³±±
±±³          ³de compra                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110LinOk(o)

Local aArea		:= GetArea()
Local lRet 		:= .T.
Local lDeleted	:= .F.
Local nPProd    := aScan(aHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local nPQuant   := aScan(aHeader,{|x| Trim(x[2])=="C1_QUANT"})
Local nPItem    := aScan(aHeader,{|x| Trim(x[2])=="C1_ITEM"})
Local nPLocal   := aScan(aHeader,{|x| Trim(x[2])=="C1_LOCAL"})
Local nPosConta := aScan(aHeader,{|x| AllTrim(x[2])=="C1_CONTA"})
Local nPosCC    := aScan(aHeader,{|x| AllTrim(x[2])=="C1_CC"})
Local nPosCLVL  := aScan(aHeader,{|x| AllTrim(x[2])=="C1_CLVL"})
Local nPosItemCTA := aScan(aHeader,{|x| AllTrim(x[2])=="C1_ITEMCTA"})
Local nPosFor   := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_FORNECE"})
Local nPosLoj   := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_LOJA"})
Local nPosRes   := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_RESIDUO"})     
Local nPosCtr	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_XCONTPR'})	//posicao do Contrato Registro de Preco na getDados
Local nPosTPSC	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_TPSC'})	//posicao do Campo C1_TPSC
Local nPosEC05DB 	:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC05DB"}) 
Local nPosEC05CR 	:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC05CR"})
Local nPosEC06DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC06DB"}) 
Local nPosEC06CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC06CR"})
Local nPosEC07DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC07DB"}) 
Local nPosEC07CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC07CR"})
Local nPosEC08DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC08DB"}) 
Local nPosEC08CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC08CR"})
Local nPosEC09DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC09DB"}) 
Local nPosEC09CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC09CR"})    
Local aEntid  := {}
Local aEntid2 := {}     
Local nA			:= 0
Local nTotAFG	:=	0
Local nPosAFG	:=	0               
Local aInfGrd   := {}
Local lReferencia := .F.
Local lGrade      := MaGrade()
Local n_SaveLin := n      
Local lVerForn	:= .T.
local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)
local lSCCLIN	:= SuperGetMV("MV_SCCLIN",.T.,.F.)
Local cTMP  	:= GetNextAlias()
Local cHoje		:= Date()
Local nQuant	:= iif (lSCCNI, aCols[n][nPQuant]  , 0)
Local cTpAdit	:= iif (lSCCNI, GetMV("MV_TPSCCT "),'')
Local cQuery    := ""
Local nX		:= 0
Local nPosRateio := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_RATEIO"})
Local nPosLeg		:= 0
Local aLegend		:= {}
Local cCampo		:= ""
Local nTamPrefix := iif (lSCCNI .And. !EMPTY(FWSX3Util():GetFieldStruct("CT1_PREFIXO")), FWSX3Util():GetFieldStruct("CT1_PREFIXO")[3], 0)
Local cPrefixCta := iif (lSCCNI, Left(aCols[n][aScan(aHeader,{|x| AllTrim(x[2])=="C1_CONTA"})],nTamPrefix), '')

//-- Variáveis para tratamento do tipo de compra
Local nPosLegTpC	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_TIPCLEG'}) 
Local nPosTipCom	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_TIPCOM'})    
Local cCondTpCom	:= ""
Local cRet			:= ""
Local aC1Area		:= {}
Local lSCLicit		:= SuperGetMV('MV_X_SCLIC',.F.,.T.) .Or. (nPosTPSC > 0 .And. !(aCols[n,nPosTPSC]) == '2') //Permite SC tipo Licitação havendo contrato Vigente

lCopia	:= If(ValType(lCopia) == "L",lCopia,.F.)
lVldHead:= If(ValType(lVldHead) == "L",lVldHead, GetNewPar( "MV_VLDHEAD",.T. ) )

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se valida ou nao o aCols a partir das validacoes do aHeader ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Iif( nPosConta  > 0  , aAdd(aEntid, aCols[n,nPosConta]),aAdd(aEntid," "))
Iif( nPosCC     > 0  , aAdd(aEntid, aCols[n,nPosCC]),aAdd(aEntid," " ))
Iif( nPosItemCta> 0  , aAdd(aEntid, aCols[n,nPosItemCta]),aAdd(aEntid," " ))
Iif( nPosClVl   > 0  , aAdd(aEntid, aCols[n,nPosClVl]), aAdd(aEntid," " ))
Iif( nPosEC05DB > 0  , aAdd(aEntid, aCols[n,nPosEC05DB]), aAdd(aEntid," " ))
Iif( nPosEC06DB > 0  , aAdd(aEntid, aCols[n,nPosEC06DB]), aAdd(aEntid," " ))
Iif( nPosEC07DB > 0  , aAdd(aEntid, aCols[n,nPosEC07DB]), aAdd(aEntid," " ))
Iif( nPosEC08DB > 0  , aAdd(aEntid, aCols[n,nPosEC08DB]), aAdd(aEntid," " ))
Iif( nPosEC09DB > 0  , aAdd(aEntid, aCols[n,nPosEC09DB]), aAdd(aEntid," " ))

Iif( nPosConta  > 0  , aAdd(aEntid2, aCols[n,nPosConta]), aAdd(aEntid2," " ))
Iif( nPosCC     > 0  , aAdd(aEntid2, aCols[n,nPosCC]), aAdd(aEntid2," " ))
Iif( nPosItemCta> 0  , aAdd(aEntid2, aCols[n,nPosItemCta]),aAdd(aEntid2," " ))
Iif( nPosClVl   > 0  , aAdd(aEntid2, aCols[n,nPosClVl]), aAdd(aEntid2," " ))
Iif( nPosEC05CR > 0  , aAdd(aEntid2, aCols[n,nPosEC05CR]), aAdd(aEntid2," " ))
Iif( nPosEC06CR > 0  , aAdd(aEntid2, aCols[n,nPosEC06CR]), aAdd(aEntid2," " ))
Iif( nPosEC07CR > 0  , aAdd(aEntid2, aCols[n,nPosEC07CR]), aAdd(aEntid2," " ))
Iif( nPosEC08CR > 0  , aAdd(aEntid2, aCols[n,nPosEC08CR]), aAdd(aEntid2," " ))
Iif( nPosEC09CR > 0  , aAdd(aEntid2, aCols[n,nPosEC09CR]), aAdd(aEntid2," " ))

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se tem permissao de armazem  |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
lRet := MaAvalPerm(3,{aCols[n][nPLocal],aCols[n][nPProd]})

If lRet .And. ValType(aCols[n,Len(aCols[n])]) == "L"
	lDeleted := aCols[n,Len(aCols[n])]      // VerIfica se esta Deletado
EndIf
 
If lRet .And. ( !lDeleted )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Efetua consistência quando não possui Resíduos  |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If nPosRes>0 .And. !Empty(Trim(aCols[n][nPosRes]))
		lRet:= .T.  
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³VerIfica o preenchimento dos campos obrigatorios                      ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		lRet := MaCheckCols(aHeader,aCols,n)
	EndIf
	
    // Verifica se existe itens digitados na grade
    If lGrade
		cVar:=aCols[n,nPProd]
		lReferencia := MatGrdPrrf(@cVar)		
		If lReferencia
			aInfGrd := Ma110ValGr()
			If Empty(aInfGrd) .Or. aInfGrd[1]==NIL      
				Aviso(STR0068,STR0069,{"Ok"}) 
				lRet := .F.
			Endif    
		Endif
	Endif 

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Quando Informado Armazem em branco considerar o B1_LOCPAD			 |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet .And. nPLocal > 0 .And. Empty(aCols[n][nPLocal])
		SB1->(dbSetOrder(1))
		If SB1->(MsSeek(xFilial("SB1")+aCols[n][nPProd]))
			aCols[n][nPLocal] := SB1->B1_LOCPAD
			If ValType(l110Auto) == "L" .And. !l110Auto
				Aviso(OemToAnsi(STR0021),OemToAnsi(STR0064),{"Ok"}) //"O Armazem informado e Invalido, o campo sera ajustando com o armazem padrão do cadastro de produtos"
			EndIf
		EndIf
	EndIf

	If lRet
		aC1Area := SC1->(GetArea())
		dbSelectArea("SC1")
        dbSetOrder(2)
        MsSeek(xFilial("SC1")+aCols[n][nPProd]+CA110NUM+aCols[n][nPItem])
        If aCols[n][nPProd]  <> SC1->C1_PRODUTO  .Or. ;
           aCols[n][nPQuant] <> SC1->C1_QUANT .Or. ;
           aCols[n][nPLocal] <> SC1->C1_LOCAL
			If !ExistCpo("NNR",aCols[n][nPLocal])
				lRet := .F.
			EndIf
		EndIf
		RestArea(aC1Area)
	EndIf
	
	If !SegumEIC()
		lRet := .F.
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Verifica se valida ou nao o aCols a partir das validacoes do aHeader ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet .And. lVldHead .And. ( Type("l110Auto") == "U" .Or. !l110Auto )
		If nPosConta <> 0 .And. nPosCC>0 .And. nPosItemCta <> 0 .And. nPosClVl <> 0 .And.;
			(!CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid) .Or.;
			!CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid2))
			lRet := .F.	
		Endif
		If lRet
			lRet := VldHead(aCols,aHeader,n)
			If lRet
				n := n_SaveLin        
			EndIf
		Endif
 
	ElseIf lRet .And. nPosConta <> 0 .And. nPosCC>0 .And. nPosItemCta <> 0 .And. nPosClVl <> 0 .And.;
		((!CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid) .Or.;
		!CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid2)) .Or.;
		(!Empty(aCols[n,nPosConta]) .And. !Ctb105Cta(aCols[n,nPosConta])) .Or.;
		(!Empty(aCols[n,nPosCC]) .And. !Ctb105CC(aCols[n,nPosCC])) .Or.;
		(!Empty(aCols[n,nPosItemCTA]) .And. !Ctb105Item(aCols[n,nPosItemCTA])) .Or.;
		(!Empty(aCols[n,nPosCLVL]) .And. !Ctb105ClVl(aCols[n,nPosCLVL])))
							
		lRet := .F.	
	Endif     
	
	if lSCCNI

		If SuperGetMV("MV_VLDPREF",.F.,.F.) .And. INCLUI // Parametro que define se deve ou não validar a Conta Contabil x Prefixo da SC - Projeto CNI - eduardo.dias - 11/06/2018
			For nA := 1 To Len(aCols)
				If !(Left(aCols[nA][aScan(aHeader,{|x| AllTrim(x[2])=="C1_CONTA"})],nTamPrefix) == cPrefixCta) .AND. !(aCols[nA,Len(aCols[nA])])
					Aviso(OemToAnsi(STR0021),OemToAnsi(STR0127),{"Ok"})
					lRet := .F.
					Exit
				EndIf
			Next nA 	
		EndIf

	EndIf
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³VerIfica se a linha pode ser deletada                                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lRet .And. ( !INCLUI )		
		SC1->(dbSetOrder(1))		
		If (SC1->(MsSeek(xFilial("SC1")+cA110Num+aCols[n][nPItem])))
			lRet := MaCanDelSC("SC1")
		EndIf
	EndIf
EndIf

//VerIfica a validaçao solicitante X entidade contábil
If !lDeleted
	If lRet
		lRet := MTPVLSOLPD("C1",aCols[n,nPProd],lSCCLIN)
	EndIf

	// Valida qtde com a Integracao PMS
	If lRet .And. IntePms()
		If ALTERA .And. Len(aRatAFG)=0
			PmsDlgSC(6,cA110Num,.F.) //Carrega os valores que serao utilizados para a validacao
		EndIf
		If Len(aRatAFG) > 0
			nPosAFG  := Ascan(aRatAFG,{|x|x[1]==aCols[n][nPItem]})
			nPosQtde := Ascan(aHdrAFG,{|x|Alltrim(x[2])=="AFG_QUANT"})
			nTotAFG	:= 0
			If (nPosAFG > 0) .And. (nPosQtde > 0)
				For nA := 1 To Len(aRatAFG[nPosAFG][2])
					If !aRatAFG[nPosAFG][2][nA][LEN(aRatAFG[nPosAFG][2][nA])]
						nTotAFG	+= aRatAFG[nPosAFG][2][nA][nPosQtde]
					EndIf
				Next nA
				If nTotAFG > aCols[n][nPQuant]
					Help("   ",1,"PMSQTNF")
					lRet := .F.
				EndIf
			EndIf
		EndIf
	EndIf
	If Type("aSCForn")=="A"
		If Len(aCols) == Len(aSCForn)
			For nA:=1 to len(aCols)
				If aCols[nA][15] == aSCForn[nA][1] .and. aCols[nA][16] == aSCForn[nA][2]
					lVerForn := .F.
				Else
					lVerForn := .T.
				Endif
			Next nA	
		Endif
	Endif

	If lRet .And. nPosFor > 0 .And. nPosLoj > 0 
		If !Empty(aCols[n][nPosFor]) .And. !Empty(aCols[n][nPosLoj])
			SA2->(dbSetOrder(1))
			If SA2->(MsSeek(xFilial("SA2")+aCols[n][nPosFor]+aCols[n][nPosLoj]))  
				If lVerForn
					IIf(!RegistroOk("SA2"),lRet:=.F.,lRet:=.T.)
				Else
					lRet:=.T.
				Endif
			Else
				Help(' ',1, 'REGNOIS')
				lRet := .F.
			Endif
		Endif		
		If lRet .And. !Empty(aCols[n][nPosFor]) .And. Empty(aCols[n][nPosLoj])
			aCols[n][nPosFor] := Criavar("C1_FORNECE")
		Endif
		If lRet .And. Empty(aCols[n][nPosFor]) .And. !Empty(aCols[n][nPosLoj])
			aCols[n][nPosLoj] := Criavar("C1_LOJA")
		Endif
	Endif

	if lSCCNI
		If lRet .and. !lDeleted .And. AllTrim(cTpAdit) <> AllTrim(cTpSC) .And. lSCLicit
		
			If ExistBlock("MTA110CP")
				cQuery := ExecBlock("MTA110CP",.F.,.F.,{aCols[n][nPProd],cHoje,nQuant})
			EndIf 
			
			If (Empty(cQuery))
			cQuery := " ORDER BY CN9.CN9_NUMERO "
			cQuery := '%' + cQuery + '%'
			EndIf
			
			Do	While .T.
			
				BeginSQL Alias cTMP
					
					//%NoParser%
					SELECT CNB.CNB_SLDMED, CN9.CN9_NUMERO, CNA.CNA_FORNEC, CNB.CNB_VLUNIT, CNA.CNA_SALDO
					FROM %Table:CNB% CNB, %Table:CN9% CN9, %Table:CNA% CNA, %Table:CN1% CN1
					WHERE CN9.CN9_FILIAL = %xFilial:CN9% AND
					CNB.CNB_FILIAL = %xFilial:CNB% AND
					CNA.CNA_FILIAL = %xFilial:CNA% AND
					CN1.CN1_FILIAL = %xFilial:CN1% AND 
					CNB.CNB_CONTRA = CN9.CN9_NUMERO AND
					CNB.CNB_REVISA = CN9.CN9_REVISA AND
					CNB.CNB_CONTRA = CNA.CNA_CONTRA AND
					CNB.CNB_REVISA = CNA.CNA_REVISA AND
					CNB.CNB_NUMERO = CNA.CNA_NUMERO AND
					CN9.CN9_TPCTO = CN1.CN1_CODIGO AND
					CN1.CN1_MEDEVE = '1' AND
					CN1.CN1_ESPCTR = '1' AND
					CNB.CNB_PRODUT = %Exp:aCols[n][nPProd]% AND
					CN9.CN9_DTFIM >= %Exp:cHoje% AND
					CN9.CN9_SITUAC = '05' AND 
					CN9.CN9_XREGP = '1' AND
					%Exp:nQuant% <= (CNB.CNB_QUANT - CNB.CNB_QTDMED) AND 
					CNB.CNB_SLDMED > '0' AND
					CNB.%NotDel% AND
					CNA.%NotDel% AND 
					CN9.%NotDel% 
							
							//Query do ponto de entrada
							%exp:cQuery% 						
				//	ORDER BY CN9.CN9_NUMERO
				EndSQL       
			
				If(cTMP)->(!EOF()) .And. Empty(aCols[n][nPosCtr])
					
					lRet := .F. 
					MsgAlert(STR0128)
					Exit				
				
				EndIf		
			
				Exit
			EndDo                   
			(cTMP)->(dbCloseArea()) 
		EndIf
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Valida o rateio da Solicitacao  |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

	If nPosRateio > 0 .And. lRet 
		If !l110Auto
			// Valida Rateio - Inclusão manual
			If aCols[n,nPosRateio]=="1" .And. !Empty(aCols[n,nPosCC]) .And. !aCols[n][Len(aHeader)+1]
				If ValType(ACPISCX) == "A"
					nPosSCX=AScan(ACPHSCX, {|x| AllTrim (x[2])=="CX_ITEM"})
					If nPosSCX>0
						nPosSCX:= aScan(aCPISCX,{|x| x[nPosSCX] == aCols[n,nPItem]})
						If nPosSCX >0
							If Len(aCPISCX[nPosSCX][2])>0
								MsgAlert(STR0084+STR0085) //"Não é permitido utilizar o Rateio por Centro de Custos e por Item simultaneamente."##"Verifique a coluna Centro Custo, Rateio e o Rateio por Item do Pedido"
								lRet:=.F.
							EndIf
						EndIf
					EndIf
				EndIf
			EndIf
		ElseIf lRet
			// Valida Rateio - Rotina Automática
			If !Empty(aCols[n,nPosCC]) .And. ValType(ACPISCX) == "A" .And. Len(ACPISCX) > 0 .And.;
				(nIt := aScan(ACPISCX,{|x| x[1] == aCols[n,nPItem]})) > 0
				For nX := 1 To Len(ACPISCX[nIt,2])
					If (nY := aScan(ACPISCX[nIT,2,nX],{|x| AllTrim(x[1]) == "CX_CC"})) > 0 .And. !Empty(ACPISCX[nIT,2,nX,nY,2])
						Aviso(STR0021,STR0084+STR0086,{"Ok"}) //"Não é permitido utilizar o Rateio por Centro de Custos e por Item simultaneamente."+"Verifique a coluna Centro Custo, Rateio e o Rateio por Item da Solicitação"
						lRet:=.F.
						Exit
					EndIf
				Next nX
			EndIf
		EndIf
	EndIf
		
	If lRet .And. (lMT110LOK)
		lRet := ExecBlock("MT110LOK",.F.,.F.,{lRet,dA110Data})
		If ValType(lRet) <> "L"
			lRet := .T.
		EndIf
	EndIf
	If lRet
		lRet:=	PcoVldLan('000051','01','MATA110',/*lUsaLote*/,lDeleted/*lDeleta*/, .T./*lVldLinGrade*/)
	EndIf
	//-- Executa avaliação do tipo de Compra

	If lRet	.And. l110Auto	
		DHK->(DbSetOrder(2))
		If DHK->(DbSeek(xFilial("DHK")))
			While !DHK->(Eof()) .And. DHK->DHK_FILIAL == xFilial("DHK")
				If DHK->DHK_ATIVO == '1' .And. !Empty(DHK->DHK_SOLCOM)
					cCondTpCom := MTAjustExp(DHK->DHK_SOLCOM,aDlgFields)
					If MTExecExp(cCondTpCom)
						aCols[n][nPosTipCom] := DHK->DHK_CODIGO
						cCampo	:= DHK->DHK_LEGEND
						aLegend := x3CboxToArray("DHK_LEGEND")
						nPosLeg := aScan(aLegend[2],{|x|x == cCampo})
						cRet 	:= aLegend[1][nPosLeg]
						aCols[n][nPosLegTpC] := "BR_"+SubStr(cRet,At('-',cRet)+2)
						Exit
					Else
						aCols[n][nPosTipCom] := ""
						aCols[n][nPosLegTpC] := "BR_BRANCO"
					Endif
				Endif
				DHK->(DbSkip())
			EndDo
		Endif
	Endif
Endif
RestArea(aArea)
FwFreeArray(aArea)
FwFreeArray(aEntid)
FwFreeArray(aEntid2)
Return(lRet)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110TudOk ³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao da getdados ( TudoOk )                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto da GetDados                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: .T. -> GetDados valida                                ³±±
±±³          ³       .F. -> Getdados invalida                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a validacao da solici- ³±±
±±³          ³tacao de compras para a rotina de atualizacao da solicitacao ³±±
±±³          ³de compra.                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110TudOk(o)

Local aArea		  := GetArea()
local lSCCNI	  := SuperGetMV("MV_SCLCNI",.F.,.F.)
Local nPItem      := aScan(aHeader,{|x| Trim(x[2])=="C1_ITEM"})
Local nPosPrd     := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_PRODUTO"})
Local nPosFor     := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_FORNECE"})
Local nPosLoj     := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_LOJA"})
Local nPosConta   := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_CONTA"})
Local nPosCC	  := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_CC"})
Local nPosCLVL	  := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_CLVL"})
Local nPosItemCTA := aScan(aHeader,{|x| AllTrim(x[2]) == "C1_ITEMCTA"})
Local nPosPrefx   := iif (lSCCNI, aScan(aHeader,{|x| AllTrim(x[2]) == "C1_PREFIX"}), 0)
Local nPosEC05DB  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC05DB"}) 
Local nPosEC05CR  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC05CR"})
Local nPosEC06DB  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC06DB"}) 
Local nPosEC06CR  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC06CR"})
Local nPosEC07DB  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC07DB"}) 
Local nPosEC07CR  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC07CR"})
Local nPosEC08DB  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC08DB"}) 
Local nPosEC08CR  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC08CR"})
Local nPosEC09DB  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC09DB"}) 
Local nPosEC09CR  := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_EC09CR"})   
Local nTamPrefix  := iif (lSCCNI .And. !EMPTY(FWSX3Util():GetFieldStruct("CT1_PREFIXO")), FWSX3Util():GetFieldStruct("CT1_PREFIXO")[3], 0)
Local nLinVld	  := 0
Local aEntid      := {}
Local aEntid2     := {}
Local n_SaveLin	  := n 
Local nX       	  := 0
Local nY		  := 0
Local nA		  := 0
Local lDeleted	  := .F.
Local lRetorno 	  := .T.
Local l110Restr	  := .F.
Local xTemp		  := 0      
Local cPrefixo    := ''
Local nPosCCRat   := aScan(aHeadSCX,{|x| Alltrim(x[2]) == "CX_CC"})
Local lMta110Ok	  := ExistBlock("MTA110OK")
Local lRet110OK	  := .T.
Local cRestSol    := SuperGetMv("MV_RESTSOL")
Local cSIGAGSP    := SuperGetMv("MV_SIGAGSP")
Local aUsrGrp     := UsrRetGrp()
Local cCodUsr     := RetCodUsr()
Local cTPl110Auto := Type("l110Auto")

l110Alt := IIf(ValType(l110Alt) == "L",l110Alt,.F.)
lCopia	:= IIf(ValType(lCopia)  == "L",lCopia,.F.)

//Verifica se valida ou nao o aCols a partir das validacoes do aHeader
Iif( nPosConta  > 0  , aAdd(aEntid, aCols[n,nPosConta]),  aAdd(aEntid," ") )
Iif( nPosCC     > 0  , aAdd(aEntid, aCols[n,nPosCC]),     aAdd(aEntid," ") )
Iif( nPosItemCta> 0  , aAdd(aEntid, aCols[n,nPosItemCta]),aAdd(aEntid," ") )
Iif( nPosClVl   > 0  , aAdd(aEntid, aCols[n,nPosClVl]),   aAdd(aEntid," ") )
Iif( nPosEC05DB > 0  , aAdd(aEntid, aCols[n,nPosEC05DB]), aAdd(aEntid," ") )
Iif( nPosEC06DB > 0  , aAdd(aEntid, aCols[n,nPosEC06DB]), aAdd(aEntid," ") )
Iif( nPosEC07DB > 0  , aAdd(aEntid, aCols[n,nPosEC07DB]), aAdd(aEntid," ") )
Iif( nPosEC08DB > 0  , aAdd(aEntid, aCols[n,nPosEC08DB]), aAdd(aEntid," ") )
Iif( nPosEC09DB > 0  , aAdd(aEntid, aCols[n,nPosEC09DB]), aAdd(aEntid," ") )

Iif( nPosConta  > 0  , aAdd(aEntid2, aCols[n,nPosConta]),  aAdd(aEntid2," " ) )
Iif( nPosCC     > 0  , aAdd(aEntid2, aCols[n,nPosCC]),     aAdd(aEntid2," " ) )
Iif( nPosItemCta> 0  , aAdd(aEntid2, aCols[n,nPosItemCta]),aAdd(aEntid2," " ) )
Iif( nPosClVl   > 0  , aAdd(aEntid2, aCols[n,nPosClVl]),   aAdd(aEntid2," " ) )
Iif( nPosEC05CR > 0  , aAdd(aEntid2, aCols[n,nPosEC05CR]), aAdd(aEntid2," " ) )
Iif( nPosEC06CR > 0  , aAdd(aEntid2, aCols[n,nPosEC06CR]), aAdd(aEntid2," " ) )
Iif( nPosEC07CR > 0  , aAdd(aEntid2, aCols[n,nPosEC07CR]), aAdd(aEntid2," " ) )
Iif( nPosEC08CR > 0  , aAdd(aEntid2, aCols[n,nPosEC08CR]), aAdd(aEntid2," " ) )
Iif( nPosEC09CR > 0  , aAdd(aEntid2, aCols[n,nPosEC09CR]), aAdd(aEntid2," " ) )

If INCLUI .And. lMta110Ok
	lRet110OK := ExecBlock("MTA110OK",.f.,.f.,{cA110Num,cSolic,dA110Data})
	If ValType(lRet110OK) == "L"
		lRetorno := lRet110OK
	Endif
Endif

If lRetorno
	If ( !INCLUI )
		SB1->(dbSetOrder(1))
		For nX := 1 To Len(aCols)                                    
		    
		    if lSCCNI 
				If Empty(cPrefixo) .and. !aCols[nX,Len(aHeader)+1]
					cPrefixo := aCols[nx][nPosPrefx] 
				EndIf
			EndIf
			
			If ValType(aCols[nX,Len(aCols[nX])]) == "L"
				lDeleted := aCols[nX,Len(aCols[nX])]
	            If (INCLUI .And. !ALTERA) .And. lDeleted
					Loop
				Endif	
			EndIf
			If ( lDeleted )
				dbSelectArea("SC1")
				dbSetOrder(1)
				If ( MsSeek(xFilial("SC1")+cA110Num+aCols[n][nPItem]) )
					lRetorno := MaCanDelSC("SC1")
				EndIf
				If ( !lRetorno )
					Exit
				EndIf
			EndIf
			// Validacao das linhas do aCols utilizado no momento da Copia.
			If lCopia .And. !l110Alt
				If !aCols[nX][Len(aCols[nX])]					
					If ( SB1->(MsSeek(xFilial("SB1")+aCols[nX,nPosPrd])) )	
						If SB1->B1_SOLICIT =="S" .And. cRestSol == "S" .And. Iif( l110Restr, !A110Restr((aCols[nX,nPosPrd]),aUsrGrp,cCodUsr,.F.), !A110Restr((aCols[nX,nPosPrd]),aUsrGrp,cCodUsr) )
							lRetorno := .F. 
							aCols[nX][Len(aCols[nX])] := .T.
							If cTPl110Auto == "U" .Or. !l110Auto 
								If !l110Restr
									o:nAt := nX						
									o:SetFocus()    
								EndIf	
								o:Refresh() 
	                    	EndIf
							l110Restr := .T.
						EndIf	
					EndIf
				EndIf 
			EndIf	
	
			If lRetorno .And. (lCopia .Or. l110Alt)
				//Verifica se valida ou nao o aCols a partir das validacoes do aHeader
				If lVldHead .And. ( cTPl110Auto == "U" .Or. !l110Auto )
					If nPosConta <> 0 .And. nPosCC>0 .And. nPosItemCta <> 0 .And. nPosClVl <> 0 .And.;
						(!CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid) .Or.;
					  !CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid2))
						lRetorno := .F.
						Exit
					Endif
					If !VldHead(aCols,aHeader,nX,o)
						lRetorno := .F.
						Exit
					Endif
					n := n_SaveLin        
					
				ElseIf nPosConta <> 0 .And. nPosCC>0 .And. nPosItemCta <> 0 .And. nPosClVl <> 0 .And.;
					((!CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid) .Or.;
					!CtbAmarra(aCols[n,nPosConta],aCols[n,nPosCC],aCols[n,nPosItemCta],aCols[n,nPosClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid2)) .Or.;
					(!Empty(aCols[nX,nPosConta]) .And. !Ctb105Cta(aCols[nX,nPosConta])) .Or.;
					(!Empty(aCols[nX,nPosCC]) .And. !Ctb105CC(aCols[nX,nPosCC])) .Or.;
					(!Empty(aCols[nX,nPosItemCTA]) .And. !Ctb105Item(aCols[nX,nPosItemCTA])) .Or.;
					(!Empty(aCols[nX,nPosCLVL]) .And. !Ctb105ClVl(aCols[nX,nPosCLVL])))
								
					lRetorno := .F.
					Exit
				Endif
			Endif
			
		Next nX
	Else
		For nX := 1 To Len(aCols)                   
			if lSCCNI
				If Empty(cPrefixo) .and. !aCols[nX,Len(aHeader)+1]
					cPrefixo := aCols[nx][nPosPrefx]   
				EndIf
			EndIf
			
			If !aCols[nX][Len(aCols[nX])]
				//VerIfica se o produto x fornecedor foi bloqueado pela Qualidade
				If cSIGAGSP <> "1" .And. nPosFor > 0 .And. nPosLoj > 0 
					If !Empty(aCols[nX][nPosFor]) .And. !Empty(aCols[nX][nPosLoj])
						If !QieSitFornec(aCols[nX][nPosFor],aCols[nX][nPosLoj],aCols[nX][nPosPrd],.F.)
							Help(" ",1,"A120BLQFO",,OemToAnsi(STR0040)+Alltrim(aCols[nX][nPosPrd])+OemToAnsi(STR0041),1,11) //"O produto " ### " foi bloqueado pela Qualidade para esse Fornecedor."
							lRetorno := .F.
							Exit
						EndIf
					EndIf
				EndIf
			EndIf
	    Next nX
	EndIf
Endif

//VerIfica a validaçao solicitante X entidade contábil
If lRetorno .And. !IsBlind()
	lRetorno := MTPVLSOLPD("C1",aCols[n,nPosPrd])
EndIf

if lRetorno .And. lSCCNI
	// 05/05/2011 - Gravacao das informacoes
	//Verificacao de Cadastro de Aprovador
	
	// Retirado a validação especifica do Projeto CNI para verificar se é Inclusao ou Alteração dentro do MATA110 - 05/09/17     
	IF SuperGetMV("MV_APROVSC") .And. !( IsInCallStack("A110Inclui") .Or. IsInCallStack("A110Altera") )
		COJ->(dbSetOrder(1))
		IF COJ->(dbSeek(xFilial("COJ")+cCCusto+cPrefixo))
		  	aEval(aCols,{|x| x[GDFieldPos("C1_XGRPAPR")] := COJ->COJ_COD })
		ELSEIF COJ->(dbSeek(xFilial("COJ")+cCCusto+Space(Len(cPrefixo))))
		  	aEval(aCols,{|x| x[GDFieldPos("C1_XGRPAPR")] := COJ->COJ_COD })
		ELSE
			Aviso(STR0021,STR0129,{STR0130},2)
			Return .F.
		ENDIF		
	ENDIF
	
	xTemp := GDFieldPos("C1_CC")
	aEval(aCols,{|x| x[xTemp] := cCCusto })

	If SuperGetMV("MV_VLDPREF",.F.,.F.)
		If (INCLUI .Or. lCopia) 
			COJ->(dbSetOrder(1))
			IF COJ->(dbSeek(xFilial("COJ")+cCCusto+cPrefixo))
				aEval(aCols,{|x| x[GDFieldPos("C1_XGRPAPR")] := COJ->COJ_COD })
			Else
				Aviso(STR0021,STR0129,{STR0130},2)
				Return .F.
			EndIf  	
		ElseIf ALTERA
			For nA := 1 To Len(aCols)
				If !(aCols[nA, Len(aCols[nA])])
					If nLinVld > 0 .And. Left(aCols[nA][nPosConta], nTamPrefix) <> Left(aCols[nLinVld][nPosConta], nTamPrefix)
						Aviso(OemToAnsi(STR0021),OemToAnsi(STR0127),{"Ok"}) 
						lRetorno := .F.
						Exit
					EndIf
					nLinVld := nA
				EndIf
			Next nA	
		EndIf
	EndIf
EndIf

If lRetorno .And. (ExistBlock("MT110TOK"))
	lRetorno := ExecBlock("MT110TOK",.F.,.F.,{lRetorno,dA110Data})
	If ValType(lRetorno) <> "L"
    	lRetorno := .T.
    EndIf
EndIf

//Validar se o campo cCodCompr foi preenchido
If lRetorno 
	lRetorno:= A110CodCompr(cCodCompr)
Endif

/*
Função para validar alteração de informações principais da SC.
Caso esta tenha sido gerada pelo SIGAPMS, algumas informações 
deverão ser preservadas por motivo de consistencia de dados.
*/
If lRetorno .and. IntePms() 
	lRetorno := PmsVldSC(aHeader,aCols,cA110Num)
Endif

//Verifica se validacao do bloqueio do pco e no final,
//em caso positivo valida todas as linhas
If lRetorno .And. PcoBlqFim({{"000051","01"}})
	n_SaveLin := n
	For nX := 1 To Len(aCols)
		If !aCols[nX][Len(aCols[nX])]
		    n := nX
			If lRetorno
				lRetorno := PcoVldLan('000051','01','MATA110',/*lUsaLote*/,/*lDeleta*/, .F./*lVldLinGrade*/)
				If ! lRetorno
					Exit
				EndIf
			EndIf
		EndIf
	Next
	n := n_SaveLin
EndIf

//Verificar se tem integracao com Manutencao de ativos 
If lRetorno .And. SuperGetMV("MV_NGMNTCM",.F.,"") == "S"

	//-------------------------------------------------------------------------------------------------
	// Quando possuir vínculo com sigamnt não permite alteração de campos que comprometem a integridade
	//-------------------------------------------------------------------------------------------------
	If ALTERA .And. FindFunction( 'MNTINTSASC' )
		lRetorno := MNTINTSASC( cA110Num, 'MATA110', 4, aHeader, aCols )
	EndIf

	// aciona a funcao para checar a garantia do produto.
	If lRetorno
		MNTGGAR()
	EndIf

EndIf


//Verifica se ha algum centro de custo bloqueado no rateio
If lCopia .and. lRetorno
	For nX := 1 to Len(aColsSCX)
		For nY := 1 to Len(aColsSCX[nX,2])
			If !Ctb105CC(aColsSCX[nX,2,nY,nPosCCRat])
				lRetorno := .F.
				Exit
			Endif
		Next nY
		
		If !lRetorno
			Exit
		Endif
	Next nX
Endif	

RestArea(aArea)
FwFreeArray(aArea)
Return(lRetorno)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Grava ³Rev.   ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de atualizacao da tabela de solicitacao de compras    ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpO1: Objeto da GetDados                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: nOpcao sendo:                                         ³±±
±±³          ³       [1] Inclusao                                          ³±±
±±³          ³       [2] Alteracao                                         ³±±
±±³          ³       [3] Exclusao                                          ³±±
±±³          ³ExpC2: Numero da Solicitacao                                 ³±±
±±³          ³ExpC3: Codigo do Solicitante                                 ³±±
±±³          ³ExpD4: Data de Emissao                                       ³±±
±±³          ³ExpC5: Centro de Custo                                       ³±±
±±³          ³ExpC6: Unidade Requisitante                                  ³±±
±±³          ³ExpC7: Codigo do Comprador                                   ³±±
±±³          ³ExpC8: Codigo da Filial de Entrega                           ³±±
±±³          ³ExpC9: Codigo da Natureza                                    ³±±
±±³          ³ExpA10 = Array aHeader de rateio da solicitacao de compra    ³±±
±±³          ³ExpA11 = Array aCols de rateio da solicitacao de compra      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a validacao da solici- ³±±
±±³          ³tacao de compras para a rotina de atualizacao da solicitacao ³±±
±±³          ³de compra.                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Grava(nOpcao,ca110Num,cSolic,dA110Data,cCCusto,cUnidreq,cCodCompr,cFilEnt,cCodNatu,cTpOP,aHeadSCX,aColsSCX)

local lSCCNI	 := SuperGetMV("MV_SCLCNI",.F.,.F.)
Local aAreaSM0   := {}
Local aFiliais   := {}
Local aRegistro  := {}
Local lDeleted   := .F.
Local lMT110GRV	 := ExistBlock("MT110GRV")
Local cMayCode	 := ""
Local cOldNum    := cA110Num
Local cAliasSC1  := "SC1"
Local nX         := 0
Local nY         := 0
Local nZ		 := 0
Local nW		 := 0
Local nCntFor    := 0
// Variaveis criadas para controle de SC gerada por PV atraves do programa MATA650
Local nAchoPv    := 0, cStringPV:="",cNum:="",cItem:=""
Local aRegsSC6	 :={}
Local lNaturez   := (SC1->(FieldPos("C1_NATUREZ")) > 0 .And. cPaisLoc <> "BRA")
Local lContinua  := .T.
Local bWhile     := {|| .F.}
Local nLoop, nLoop2, nLoop3, nLoop4, nRecno, nField
Local nPItem     := aScan(aHeader, {|z| Alltrim(z[2]) == "C1_ITEM"})
Local nPosRecno  := aScan(aHeader, {|z| AllTrim(z[2]) == "C1_REC_WT"})
Local nPosGrade  := aScan(aHeader, {|z| AllTrim(z[2]) == "C1_GRADE"})
Local nProduto   := aScan(aHeader, {|z| AllTrim(z[2]) == "C1_PRODUTO"})
Local lAtuSGJ	 := SuperGetMV("MV_PVCOMOP",.F.,.F.)
Local lTPOPDOC 	 := SuperGetMV("MV_TPOPDOC",.F.,.F.)
Local lSb1TES    := SuperGetMv("MV_SB1TES",.F.,.F.)
Local cAPS		 := SuperGetMV("MV_APS",.F.,"")
Local lApsDrummer:= cAPS == "DRUMMER"
Local nPos       := 0
Local cUnico
Local cCodEnt
Local aAreaAFG
Local n110TotLib := 0
Local aEstruSC1  := {}
Local cQuery     := ""
Local cOpc       := ""
Local nCodCompr	 := 0
Local cGrupCom	 := ""
Local cEventID   := "035" //Inclusao Solicitação de Compra
Local cQuerySXI  := ""
Local cAliasSXI  := GetNextAlias()
Local cTpcNumSCWS := Type('cNumSCWS')
Local lLog       := GetNewPar("MV_HABLOG",.F.)
Local nQtdItens	 := 0

DEFAULT cFilEnt  := cFilAnt
DEFAULT cCodNatu := ""
DEFAULT aHeadSCX := {}
DEFAULT aColsSCX := {}
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ VerIfica se a rotina esta sendo chamada da Proj.Estoques NOVA ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
lProjM711:=If(Type("lProjM711") == "L",lProjM711,.F.)
lCopia   := IIf(ValType(lCopia) == "L",lCopia,.F.)

If ExistBlock("MT110CON")
	lContinua := (Execblock("MT110CON",.F.,.F.,{ca110Num,cSolic,dA110Data,cCCusto,cUnidreq,cCodCompr}))
	If ValType(lContinua) <> "L"
		lContinua := .T.
	EndIf
EndIf

If lContinua
	If nOpcao == 2
		For nLoop:=1 to Len(oGrade:aRecno)
			For nLoop2:=1 to len(oGrade:aRecno[nLoop])
				For nLoop3:=1 to len(oGrade:aRecno[nloop,nLoop2])
					nRecno:=oGrade:aRecno[nLoop,nLoop2,nLoop3]
					If aCols[nLoop, nPosGrade] # "S" .And. nRecno>0
						If Ascan(aCols,{|x| x[nPosRecno]==nRecno})==0
							dbSelectArea("SC1")
							MsGoto(nRecno)
							Aadd(aCols, Array(Len(aHeader) + 1))
							For nLoop4 := 1 to Len(aHeader)
								If (nField := FieldPos(aHeader[nLoop4, 2])) > 0
									Atail(aCols)[nLoop4] := FieldGet(nField)
								EndIf
							Next
							GDFieldPut("C1_ALI_WT", "SC1" , Len(aCols), aHeader, aCols)
							GDFieldPut("C1_REC_WT", nRecno, Len(aCols), aHeader, aCols)
							Atail(aCols)[Len(aHeader) + 1] := .T.
						EndIf
					EndIf
				Next
			Next
		Next
	EndIf
	If ( nOpcao == 1 )
		If lSCCNI
			If SuperGetMV("MV_APS",.F.,"") == "TOTVS"
				aAreaSM0 := SM0->(GetArea())
				SM0->(DbSetOrder(1))
				SM0->(DbSeek(cEmpAnt))
				While SM0->(!Eof()) .And. SM0->M0_CODIGO == cEmpAnt
					aAdd(aFiliais,FWGETCODFILIAL)
					SM0->(DbSkip())
				End
				RestArea(aAreaSM0)
				dbSelectArea("SC1")
				dbSetOrder(1)
				For nX := 1 to len(aFiliais)
					If MsSeek(aFiliais[nX]+cA110Num)
						cA110Num := CriaVar('C1_NUM', .T.) 
						If cA110Num # cOldNum
							Exit
						EndIf
					EndIf
				Next nX
			Else
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³Consistir o numero da solicitacao de compra                           ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If ( Empty(cA110Num) )
					cA110Num := NextNumero(cAliasSC1,1,"C1_NUM",.F.,cA110Num)
				EndIf
				If ( INCLUI )
					cMayCode := "SC1"+xFilial("SC1")+cA110Num
					dbSelectArea("SC1")
					dbSetOrder(1)
					DbSeek(xFilial("SC1")+cA110Num)
					While(SC1->C1_FILIAL+SC1->C1_NUM == xFilial("SC1")+cA110Num .Or. !MayIUseCode(cMayCode) )
						cA110Num := Soma1(cA110Num,Len(cA110Num))
						cMayCode := "SC1"+xFilial("SC1")+cA110Num
						SC1->(DbSkip())
					EndDo
				EndIf
			EndIf
			If ( cA110Num != cOldNum )
				If PutByAPS() .And. Type('cWSMAT110') == "C"
					cWSMAT110 := cA110Num
				Else
					If !l110Auto
						HELP(" ",1,"NUMSEQ",,cA110Num,4,15)
					EndIf
				EndIf
			EndIf
		Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Consistir o numero da solicitacao de compra                           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( Empty(cA110Num) )
			cA110Num := NextNumero(cAliasSC1,1,"C1_NUM",.F.,cA110Num)
		EndIf
		If ( INCLUI )
			cMayCode := "SC1"+xFilial("SC1")+cA110Num
			dbSelectArea("SC1")
			dbSetOrder(1)
			DbSeek(xFilial("SC1")+cA110Num)
			While(SC1->C1_FILIAL+SC1->C1_NUM == xFilial("SC1")+cA110Num .Or. (!MayIUseCode(cMayCode) .AND. !SC1->(EOF())) )
				cA110Num := Soma1(cA110Num,Len(cA110Num))
				cMayCode := "SC1"+xFilial("SC1")+cA110Num
				SC1->(DbSkip())
			EndDo
		EndIf
		If ( cA110Num != cOldNum )
			If PutByAPS() .And. Type('cWSMAT110') == "C"
				cWSMAT110 := cA110Num
			Else
				If !l110Auto
					HELP(" ",1,"NUMSEQ",,cA110Num,4,15)
				EndIf
			EndIf
		EndIf
	EndIf	
Else /*Estornar os valores acumulados da solicitacao de compra*/	
	SC1->(dbSetOrder(1))
	aEstruSC1 := SC1->(dbStruct())
	
	cAliasSC1:= GetNextAlias()
	
	cQuery := "SELECT "
	
	For nX := 1 To Len(aEstruSC1)
		If ( aEstruSC1[nX,2]!= 'M' )//Tratamento utilizado para ignorar campos MEMO.
			If nX > 1
				cQuery += ", "
			EndIf
			cQuery += aEstruSC1[nX,1]
		EndIf
	Next nX
	
	cQuery += ", R_E_C_N_O_ AS SC1RECNO "
	cQuery += " FROM "+RetSqlName("SC1")+" SC1 "
	cQuery += " WHERE SC1.C1_FILIAL='"+xFilial("SC1")+"' AND "
	cQuery += " SC1.C1_NUM='"+cA110Num+"' AND "
	cQuery += " SC1.D_E_L_E_T_ = ' ' "
	cQuery += " ORDER BY "+SqlOrder(SC1->(IndexKey()))
	cQuery := ChangeQuery(cQuery)
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSC1,.T.,.T.)
	
	For nX := 1 To Len(aEstruSC1)
		If ( aEstruSC1[nX][2] <> "C" .And. aEstruSC1[nX][2] != 'M' )
			TcSetField(cAliasSC1,aEstruSC1[nX][1],aEstruSC1[nX][2],aEstruSC1[nX][3],aEstruSC1[nX][4])
		EndIf
	Next nX
	
	FwFreeArray(aEstruSC1)
		
	While ( (cAliasSC1)->( !Eof() ) )
	    /*Ascan foi implementado em função de situações onde for aplicado o PE MT110FIL, o acols é montado com
	    base no filtro que foi aplicado porém, a query considera todos os itens da SC o que fazia com o que o
	    array aRegistro apontasse para um registro não existente no Acols*/
		If aScan(aCols, {|aX| aX[nPItem]==(cAliasSC1)->C1_ITEM})>0
			aAdd(aRegistro, (cAliasSC1)->SC1RECNO)
			MaAvalSC(cAliasSC1,2)
		EndIf
						
		(cAliasSC1)->(dbSkip())
	EndDo
	(cAliasSC1)->(dbCloseArea())	
	dbSelectArea("SC1")
EndIf
     
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montagem dos dados da execauto de rateio ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("aRatSC") == "A" .And. Len(aRatSC) > 0
	If Len(aColsSCX) == 0
		DbSelectArea("SX3")
		DbSetOrder(1)
		MsSeek("SCX")
		aHeadSCX := {}
		aColsSCX := {}
		While ( !EOF() .And. SX3->X3_ARQUIVO == "SCX" )
			If X3USO(SX3->X3_USADO) .AND. cNivel >= SX3->X3_NIVEL .And. !(SX3->X3_CAMPO $ "CX_CUSTO|CX_SOLICIT|CX_ITEMSOL")
				aadd(aHeadSCX,{ TRIM(X3Titulo()),;
					SX3->X3_CAMPO,;
					SX3->X3_PICTURE,;
					SX3->X3_TAMANHO,;
					SX3->X3_DECIMAL,;
					SX3->X3_VALID,;
					SX3->X3_USADO,;
					SX3->X3_TIPO,;
					SX3->X3_F3,;
					SX3->X3_CONTEXT })
			EndIf
			DbSelectArea("SX3")
			dbSkip()
		EndDo
		aColsSCX  := M110AutRat(aClone(aRatSC),aHeadSCX)
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Caso Alteração Automatica deleta os rateios ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
	If Type( "nAutoAdt" ) == "N" .And. nAutoAdt==4 .And. Len(aRatSC) > 0
		aAreaSCX := GetArea()
		SCX->(DbSetOrder(1))
		If SCX->(MsSeek(xFilial("SCX")+SC1->C1_NUM))
			While !SCX->(EOF()) .and. (xFilial("SCX")+SC1->C1_NUM==SCX->CX_FILIAL+SCX->CX_SOLICIT)
				RecLock("SCX",.F.)
				SCX->(dbDelete())
				MsUnlock()
				SCX->(DbSkip())
			EndDo
		EndIf
		RestArea(aAreaSCX)
	EndIf
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Montagem dos dados da execauto de rateio por projeto³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("aRatProj") == "A" .And. Len(aRatProj) > 0
	If Type( "nAutoAdt" ) == "N" .And. nAutoAdt==4 .And. Len(aRatProj) > 0
		dbSelectArea("AFG")
		aAreaAFG := GetArea()
		SCX->(DbSetOrder(2))
		If SCX->(MsSeek(xFilial("AFG")+SC1->C1_NUM))
			While !SCX->(EOF()) .and. (xFilial("AFG")+SC1->C1_NUM==AFG->AFG_FILIAL+AFG->AFG_NUMSC)
				RecLock("AFG",.F.)
				AFG->(dbDelete())
				MsUnlock()
				AFG->(DbSkip())
			EndDo
		EndIf
		RestArea(aAreaAFG)
	EndIf
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Efetua a atualizacao da tabela de solicitacao de compra               ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
dbSelectArea("SC1")
SC1->(dbSetOrder(1))
SB1->(dbSetOrder(1))
For nX := 1 To Len(aCols)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³VerIfico se a linha foi deletada.                                     ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ValType(aCols[nX,Len(aCols[nX])]) == "L"
		lDeleted := aCols[nX,Len(aCols[nX])]
	EndIf
	If ( nOpcao == 3 )
		lDeleted := .T.
	EndIf
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Posiciono no registro para alteracao/exclusao                         ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If ( Len(aRegistro) >= nx )
		If ALTERA
			cGrupCom := ""			
			If SB1->(dbSeek(xFilial("SB1")+aCols[nX,nProduto]))
				cAliasSAI := GetNextAlias()
				
				cQueryAI := "SELECT AI_GRUPCOM "
				cQueryAI += " FROM "+RetSqlName("SAI")+" SAI "
				cQueryAI += " WHERE SAI.AI_FILIAL='"+xFilial("SAI")+"' "
				cQueryAI += " AND SAI.AI_GRUPO = '"+SB1->B1_GRUPO+"' "
				cQueryAI += " AND SAI.AI_USER ='"+__cUserID+"' "  				
				cQueryAI += " AND SAI.D_E_L_E_T_<>'*' "
				cQueryAI := ChangeQuery(cQueryAI)
				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQueryAI),cAliasSAI,.T.,.T.)	
				
				If((cAliasSAI)->(!EOF()))					
					cGrupCom := (cAliasSAI)->AI_GRUPCOM
				EndIf
				
				(cAliasSAI)->(dbCloseArea())
			Endif
		Endif		
		SC1->(dbGoto( aRegistro[nx] ))
		RecLock("SC1",.F.)
	ElseIf ( !lDeleted )
		RecLock("SC1",.T.)		
	EndIf
	
	If ( !lDeleted )
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza dados padroes da solicitacao de compras         ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC1->C1_FILIAL  := xFilial("SC1")
		SC1->C1_NUM     := cA110Num
		SC1->C1_EMISSAO := dA110Data
		SC1->C1_SOLICIT := cSolic
		
		If (Empty(SC1->C1_PEDIDO) .And. Empty(SC1->C1_COTACAO))
			SC1->C1_GRUPCOM := cGrupCom
		Endif 

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ cNumSCWS - Variavel utilizada na integracao com o RM Solum para   ³
		//³            recuperar o numero da SC gerada pela rotina Automatica.³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cTpcNumSCWS <> "U"
			cNumSCWS := cA110Num
		EndIf
			
		if lSCCNI
			SC1->C1_XTIPOSC := cTpSC  // Grava campo Tipo de documento
			SC1->C1_XNUMCT  := cNumCt  // Grava campo Numero Contrato
			SC1->C1_XNUMREV := AllTrim(cNumRev)  // Grava campo Revisao Ct.
			SC1->C1_XSOL    := cReqSol  // Grava campo Requisitante
		EndIf
			
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza dados do corpo da SC selecionados pelo cliente  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		For nY := 1 to Len(aHeader)
			If ( aHeader[nY][10] <> "V" )
				SC1->(FieldPut(FieldPos(Trim(aHeader[nY][2])),aCols[nX][nY]))
			EndIf
		Next nY
		
		If l110Auto
			If (nY := aScan(aAutoItens[1],{|x| AllTrim(x[1]) == "C1_ORIGEM"})) > 0
				If !Empty(aAutoItens[1,nY,2])
					SC1->C1_ORIGEM := aAutoItens[1,nY,2]
				Endif
			Endif
			If (nY := aScan(aAutoCab,{|x| AllTrim(x[1]) == "C1_USER"})) > 0
				If !Empty(aAutoCab[nY,2])
					SC1->C1_USER := aAutoCab[nY,2]
				Endif
			Endif
		Endif
		
		//-- Tratamento para integracao com TOTVS APS
		If cAPS == "TOTVS" .And. l110Auto 
			If (nY := aScan(aAutoItens[1],{|x| AllTrim(x[1]) == "C1_ITEM"})) == 0
				If (nY := aScan(aAutoItens[1],{|x| AllTrim(x[1]) == "LINPOS" .And. AllTrim(x[2]) == "C1_ITEM"})) > 0
					nW := aScan(aAutoItens,{|x| x[nY,3] == SC1->C1_ITEM})
				EndIf
			Else
				nW := aScan(aAutoItens,{|x| x[nY,2] == SC1->C1_ITEM})
			EndIf
			If !Empty(nW) .And. !Empty(nY := aScan(aAutoItens[nW],{|x| AllTrim(x[1]) == "C1_IDAPS"}))
				SC1->C1_IDAPS := aAutoItens[nW,nY,2]
			EndIf
		EndIf
			
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Se item para importacao,                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		SC1->C1_FILENT  := cFilEnt
		SC1->C1_UNIDREQ := cUnidReq

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Atualiza o comprador do item                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ		
		nCodCompr := aScan(aHeader,{|x| AllTrim(x[2])=="C1_CODCOMP"})
		If nCodCompr > 0
			cCodCompr       := aCols[nX][nCodCompr]
			SC1->C1_CODCOMP := cCodCompr
		Else
			SC1->C1_CODCOMP := cCodCompr
		EndIf
	
		SC1->C1_QTDORIG := SC1->C1_QUANT
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Preenche se é firme ou previsto                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If lTPOPDOC
			SC1->C1_TPOP := cTpOP
		EndIf
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ C1_ESTOQUE - campo para controlar o B2_SALPEDI           ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ  
		If lSb1TES			
			If SB1->(MsSeek(xFilial("SB1")+aCols[nX][nProduto]))
				If !Empty(SB1->B1_TE)
					SF4->(dbSetOrder(1))
					If SF4->(MsSeek(xFilial("SF4")+SB1->B1_TE))
						SC1->C1_ESTOQUE := SF4->F4_ESTOQUE
					EndIf
				EndIf
			EndIf
		EndIf
			
		If lNaturez
			SC1->C1_NATUREZ := cCodNatu
		EndIf

		SC1->C1_TIPO := 1

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Tratamento p/ geracao de SCs atraves da int. c/ Drummer APS  ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If l110Auto .And. lApsDrummer
			If n <= Len(aAutoItens)
				nPos := aScan(aAutoItens[n],{|x| x[1] == "C1_TPOP"})
				If nPos > 0
					If aAutoItens[n,nPos,2] == "P"
						SC1->C1_TPOP := "P"
					EndIf
				EndIf
			EndIf
		EndIf
 
		If lProjM711
			// Se a Solicitacao de Compra for gerada pelo MRP sem vinculo com Ordem de Producao
			If Empty(SC1->C1_OP)
				SC1->C1_TPOP := IIf(lDiasHf,A710VerHf(SC1->C1_DATPRF,SC1->C1_PRODUTO),If(aPergs711[10] == 1,"F","P"))
			ElseIf Empty(SC1->C1_OP) .AND. aPergs711[10] == 2
				SC1->C1_TPOP := "P"
			EndIf
			// Atualiza campos de entrada e Necessidade
			If !lMata712 .And. !lPCPA107
				A711CriSH5(SC1->C1_DATPRF,SC1->C1_PRODUTO,SC2->C2_OPC,Space(Len(SB1->B1_REVATU)),"SC1",SC1->(Recno()),SC1->C1_NUM,SC1->C1_ITEM,SC1->C1_OP,Max(0,SC1->C1_QUANT-SC1->C1_QUJE),"2",.T.,NIL,NIL,.T.)
			Else
				If lMata712
					A712CriCZI(SC1->C1_DATPRF,SC1->C1_PRODUTO,SC2->C2_OPC,Space(Len(SB1->B1_REVATU)),"SC1",SC1->(Recno()),SC1->C1_NUM,SC1->C1_ITEM,SC1->C1_OP,Max(0,SC1->C1_QUANT-SC1->C1_QUJE),"2",.T.,/*13*/,/*14*/,.F.,/*16*/,/*17*/,/*18*/,/*19*/,/*20*/,/*21*/,/*22*/,/*23*/,/*24*/,/*25*/,/*26*/)
				ElseIf lPCPA107
					If Select("SC2") < 1
					   cOpc := ""
					ElseIf AllTrim(SC2->C2_PRODUTO) == AllTrim(SC1->C1_PRODUTO)
					   cOpc := SC2->C2_OPC
					EndIf
					A107CriSOQ(SC1->C1_DATPRF,SC1->C1_PRODUTO,cOpc,Space(Len(SB1->B1_REVATU)),"SC1",SC1->(Recno()),SC1->C1_NUM,SC1->C1_ITEM,SC1->C1_OP,Max(0,SC1->C1_QUANT-SC1->C1_QUJE),"2",.T.,/*13*/,/*14*/,.F.,/*16*/,/*17*/,/*18*/,/*19*/,/*20*/,/*21*/,/*22*/,/*23*/,/*24*/,/*25*/,/*26*/)
					A107CriSOU('SC',nRec107, lPmp107, SC1->C1_NUM, /*05*/, SC1->C1_ITEM, SC1->C1_ITEMGRD, SC1->C1_QUANT, cPeri107, SC1->C1_DATPRF, SC1->C1_PRODUTO)
				EndIf
			EndIf
		EndIf
		MaAvalSC("SC1",1)
		
		If lLog
			RSTSCLOG("SOL",1,/*cUsrWF*/)
		EndIf

		// Contabiliza total de itens ativos
		nQtdItens++		

	Else
		If ( Len(aRegistro) >= nx )

			MaAvalSC("SC1",3)
			// VERIfICA SE ITEM FOI GERADO POR PV. CASO SEJA VOLTA STATUS DO PEDIDO DE VENDA
			cStringPV:=SC1->C1_OBS
			nAchoPV:=AT("#",cStringPV)
			If nAchoPV > 0 .And. AT("PV",cStringPV) > 0
				cNum        :=Substr(cStringPV,nAchoPV+1,LEN(SC6->C6_NUM))
				cStringPV   :=Substr(cStringPV,nAchoPV+2+LEN(SC6->C6_NUM))
				cItem       :=Substr(cStringPV,1,LEN(SC6->C6_ITEM))
				dbSelectArea("SC6")
				dbSetOrder(1)
				dbSeek(xFilial("SC6")+cNum+cItem+SC1->C1_PRODUTO)
				bWhile      := {||!Eof() .And. xFilial("SC6")+cNum+cItem+SC1->C1_PRODUTO == SC6->C6_FILIAL+SC6->C6_NUM+SC6->C6_ITEM+SC6->C6_PRODUTO }
			Else
				dbSelectArea("SC6")
				If A110IndSC6()
					cNum  := SC1->C1_NUM
					cItem := SC1->C1_ITEM
					dbSetOrder(9)
					dbSeek(xFilial("SC6")+SC1->C1_NUM+SC1->C1_ITEM)
					bWhile := {||!Eof() .And. xFilial("SC6")+cNum+cItem == SC6->C6_FILIAL+SC6->C6_NUMSC+SC6->C6_ITEMSC}
				EndIf
			EndIf
			aRegsSC6:={}
			dbSelectArea("SB2")
			dbSetOrder(1)
			dbSeek(xFilial("SB2")+SC1->(C1_PRODUTO+C1_LOCAL))
			If !Found()
				CriaSB2(SC1->C1_PRODUTO,SC1->C1_LOCAL)
				MsUnLock()
			EndIf
			While Eval(bWhile)
				If !Empty(SC6->C6_NOTA) .And. !Empty(SC6->&(SerieNfId('SC6',3,'C6_SERIE'))) .And. !Empty(SC6->C6_DATFAT)
					Help(" ",1,"A650NOTA",,SC6->C6_NOTA+" / "+SC6->&(SerieNfId('SC6',3,'C6_SERIE'))+" de "+DTOC(SC6->C6_DATFAT)+".",02,13)
				EndIf
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Caso esteja OK, desmarca o pedido,liberando o mesmo para ³
				//³ OPs novamente                                            ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If SC6->C6_OP $ "01#03"
					AADD(aRegsSC6,SC6->(Recno()))
				EndIf
				nQuantSC6:=(SC6->C6_QTDVEN-SC6->C6_QTDENT-SC6->C6_QTDRESE)
				If SC6->C6_OP != "03"
					If lAtuSGJ
						A650AtEmpn(nQuantSC6 - A650SomaSGJ("1"),"-",SC6->C6_TPOP)
					Else
						A650AtEmpn(nQuantSC6 - A650QLibPv(),"-",SC6->C6_TPOP)
					Endif
				EndIf
				dbSelectArea("SC6")
				dbSkip()
			EndDo
			   	
			// Limpa numero das OPs dos Pedidos de Venda
			For nCntFor:=1 to Len(aRegsSC6)
				dbGoto(aRegsSC6[nCntFor])
				RecLock("SC6",.F.)
				If SC6->C6_QTDEMP > 0
					Replace SC6->C6_OP With "07"
				Else
					Replace SC6->C6_OP With IIf(SC6->C6_OP=="01","  ","02")
				EndIf
				Replace SC6->C6_OK     With ""
				Replace SC6->C6_NUMSC  With Space(Len(SC6->C6_NUMSC))
				Replace SC6->C6_ITEMSC With Space(Len(SC6->C6_ITEMSC))
				MsUnLock()
			Next nCntFor

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Efetua a Exclusão do Rateio³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If nOpcao == 3
				SCX->(dbSetOrder(1))
				SCX->(dbSeek(xFilial("SCX")+SC1->C1_NUM+aCols[nX,nPItem]))
				While SCX->(!EOF()) .And. SCX->(CX_FILIAL+CX_SOLICIT+CX_ITEMSOL) == xFilial("SCX")+SC1->C1_NUM+aCols[nX,nPItem]
					RecLock("SCX",.F.)
					SCX->(dbDelete())
					MsUnlock()
					SCX->(dbSkip())
				EndDo
			Else
				aAreaSCX := GetArea()
				If (nY	:= aScan(aColsSCX,{|x| x[1] == SC1->C1_ITEM})) > 0
					For nZ := 1 To Len(aColsSCX[nY][2])
						SCX->(DbSetOrder(1))
						If SCX->(MsSeek(xFilial("SCX")+SC1->C1_NUM+SC1->C1_ITEM+GdFieldGet("CX_ITEM",nz,NIL,aHeadSCX,ACLONE(aColsSCX[NY,2]))))
							RecLock("SCX",.F.)
							SCX->(dbDelete())
							MsUnlock()
						EndIf
					Next nZ
				EndIf
				RestArea(aAreaSCX)
			EndIf
			DbSelectarea("SC1")
			cUnico 		:= "C1_FILIAL+"+UPPER(ArrTokStr(FWFormStruct(3,"SC1",NIL,.F.)[6][2],"+"))
			If !Empty(cUnico)
				cCodEnt	:= &cUnico
				MsDocGrv("SC1",cCodEnt,,.T.)
			Endif
			SC1->(dbDelete())			
			If lLog
				RSTSCLOG("SOL",2,/*cUsrWF*/)
			EndIf
		EndIf
	EndIf
	SC1->(MsUnLock())
	n110TotLib += SC1->C1_QUANT * Iif(SC1->C1_VUNIT > 0,SC1->C1_VUNIT,MTGetVProd(SC1->C1_PRODUTO))
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Atualizacao do rateio dos itens do documento de entrada                 ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	SCX->(DbSetOrder(1))
	If (nY	:= aScan(aColsSCX,{|x| x[1] == SC1->C1_ITEM})) > 0 .And. !lDeleted
		For nZ := 1 To Len(aColsSCX[nY][2])
			nItemSCX := aScan(aHeadSCX, {|x| AllTrim (x[2])=="CX_ITEM"})
			cItemSCX := aColsSCX[nY][2][nZ][nItemSCX]
			lAchou := SCX->(MsSeek(xFilial("SCX")+SC1->C1_NUM+SC1->C1_ITEM+cItemSCX))
			If !aColsSCX[nY,2,nZ,Len(aHeadSCX)+1] .And. !lDeleted .And. SC1->C1_RATEIO == "1" 
				RecLock("SCX",!lAchou)
				For nW := 1 To Len(aHeadSCX)
					If aHeadSCX[nW][10] <> "V"
						SCX->(FieldPut(FieldPos(aHeadSCX[nW][2]),aColsSCX[nY][2][nZ][nW]))
					EndIf
				Next nW
				SCX->CX_FILIAL	:= xFilial("SCX")
				SCX->CX_SOLICIT	:= SC1->C1_NUM
				SCX->CX_ITEMSOL	:= SC1->C1_ITEM
				MsUnlock()
			ElseIf lAchou
				RecLock("SCX",.F.)
				SCX->(dbDelete())
				MsUnlock()
			EndIf
		Next nZ
		If ALTERA
		    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Exclui do BD os rateios que foram marcados para delecao  ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			SCX->(MsSeek(xFilial("SCX")+SC1->C1_NUM+SC1->C1_ITEM))
			While !SCX->(EOF()) .and. (xFilial("SCX")+SC1->C1_NUM+SC1->C1_ITEM==SCX->CX_FILIAL+SCX->CX_SOLICIT+SCX->CX_ITEMSOL)
				If !aScan(aColsSCX[nY][2],{|x| x[nItemSCX] == SCX->CX_ITEM}) > 0
					RecLock("SCX",.F.)
					SCX->(dbDelete())
					MsUnlock()
				EndIf
				SCX->(DbSkip())
			Enddo
		EndIf
	EndIf
		
	If ( lMT110GRV ) .And. !lDeleted
		ExecBlock("MT110GRV",.f.,.f.,{lCopia})
	EndIf
Next nX

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Caso A SC tenha sido gerada por sugestao de compras reabre a sugestao    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lDeleted
	SFJ->(dbSetOrder(2))
	If SFJ->(dbSeek(xFilial("SFJ")+ca110Num))
		RecLock("SFJ",.F.)
		SFJ->FJ_SOLICIT:=""
		SFJ->FJ_FORNECE:=""
		SFJ->FJ_LOJA   :=""
		SFJ->FJ_FILENT :=""
		SFJ->FJ_TIPGER :=""
		SFJ->FJ_COND   :=""
		MsUnlock()
		SDF->(MsSeek(xFilial("SDF")+SFJ->FJ_CODIGO))
		While (SDF->DF_CODIGO == SFJ->FJ_CODIGO) .and. xFilial("SDF")==SDF->DF_FILIAL .and. ! SDF->(Eof())
			RecLock("SDF",.F.)
			SDF->DF_FLAG    := "A"
			SDF->(MsUnlock())
			SDF->(DbSkip())
		EndDo
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Envia e-mail na inclusao de SC's     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If nOpcao == 1 .And. Len(aCols) > 0
		
	cQuerySXI   := "SELECT COUNT(*) AS NREG "
	cQuerySXI   += "FROM SXI SXI "
	cQuerySXI   += "WHERE SXI.XI_EVENTID='"+cEventID+"' AND "
	cQuerySXI   += "SXI.D_E_L_E_T_= ' ' "
	cQuerySXI   := ChangeQuery(cQuerySXI)
	
	dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuerySXI),cAliasSXI)
			
	dbSelectArea(cAliasSXI)
	If (cAliasSXI)->NREG > 0 //Utiliza EventViewer
		cMessagem := STR0113+": "+SC1->C1_NUM+CHR(13)+CHR(10)+STR0114+" "+ STR0170+": "+ Subs(cUsuario,7,15)+"."
		EventInsert(FW_EV_CHANEL_ENVIRONMENT, FW_EV_CATEGORY_MODULES, cEventID,FW_EV_LEVEL_INFO,""/*cCargo*/,STR0115 ,cMessagem,.T./*lPublic*/)
	Else //Utiliza M-Messenger
		MEnviaMail(cEventID,{SC1->C1_NUM})
	EndIf
	(cAliasSXI)->(dbCloseArea())
EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Cria alcada de aprovacao da SC ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	// Retirado a validação do Projeto CNI - 11/09/17
	If lAlcSolCtb .And. (!FwIsInCallStack("MATA126") .Or. (FwIsInCallStack("MATA126") .And. Iif(ValType(lConsEntCtb)<>"U",lConsEntCtb,.F.)))
		MaEntCtb("SC1","SCX",cA110Num,"SC",aHeader,aCols,aHeadSCX,aColsSCX,nOpcao,dA110Data)
	EndIf

Endif

If INCLUI .And. !Empty(cMayCode)
	FreeUsedCode(cMayCode)
EndIf

If INCLUI
	If nQtdItens > 0
		ComMetric('inc',nQtdItens,1)
	Endif

	If lGeraSCR .And. lAlcSolCtb
		ComMetric('inc',0,2,"AlcAmbas")
	Elseif !lGeraSCR .And. lAlcSolCtb
		ComMetric('inc',0,2,"AlcEntidade")
	Elseif lGeraSCR .And. !lAlcSolCtb
		ComMetric('inc',0,2,"AlcSimples")
	Endif
Endif

Return .T.



/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Valid ³Rev.   ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de validacao da quantidade da solicitacao de compra   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: [P] para Produto                                      ³±±
±±³          ³       [Q] Para quantidade                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ExpL1: Indica se a quantidade eh valida                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo efetuar a validacao da quantida³±±
±±³          ³de informada na solicitacao de compras para nao permitir     ³±±
±±³          ³que a quantidade da solicitacao de compra seja menor que a   ³±±
±±³          ³quantidade em pedido.                                        ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Valid(cTipo)

Local cProduto	:= ""
Local nQuant	:= 0
Local nPProduto := aScan(aHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local nPQuant   := aScan(aHeader,{|x| Trim(x[2])=="C1_QUANT"})
Local nPItem    := aScan(aHeader,{|x| Trim(x[2])=="C1_ITEM"})
Local lRetorno  := .T.
Local lMta113   := Alltrim(Upper(FunName()))=="MATA113"

If ( cTipo == "P" )
	cProduto := &(ReadVar())
	nQuant   := aCols[n][nPQuant]
Else
	cProduto := aCols[n][nPProduto]
	nQuant   := &(ReadVar())
EndIf
If ( Altera )
	dbSelectArea("SC1")                                      
	dbSetOrder(2)
	If ( MsSeek(xFilial("SC1")+aCols[n][nPProduto]+cA110Num+aCols[n][nPItem]) )
		If ( SC1->C1_QUJE > nQuant )
			Help(" ",1,"A110MAIO")
			lRetorno := .F.
		Else
			lRetorno := MaCanAltSC("SC1")
		EndIf

	EndIf
EndIf
If lMta113 .And. cTipo == "P" 
	If SB1->B1_IMPORT <> "S"
		Help(" ",1,"A113IMPORT")
		lRetorno := .F.
	Endif
Endif

Return(lRetorno)
/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Monta ³Autor  ³Alexandre Inacio Lemes ³Data  ³19/12/2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de montagem do aHeader e do aCols da solicitacao de   ³±±
±±³          ³compra                                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1: [1] Inclusao                                          ³±±
±±³          ³       [2] Visualizacao                                      ³±±
±±³          ³       [3] Alteracao                                         ³±±
±±³          ³       [4] Exclusao                                          ³±±
±±³          ³ExpB2: CodeBlock a ser avaliado para o retorno da funcao     ³±±
±±³          ³ExpL1: Se for Copia da SC                                    ³±±
±±³          ³ExpN2: nOpcX do aRotina                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1: Conforme indicado pelo CodeBlock em ExpB2, quando o  ³±±
±±³          ³ este indicar .F., a execucao da funcao sera interrompida.   ³±±
±±³          ³ Para o codeblock sera informado o alias do SC1.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar as variaveis de uti- ³±±
±±³          ³lizada na modelo 2.                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function a110Monta(nOpc,bBlock,lCopia,nOpcX,aColsBKPRat,aHeader110, aCols110)
Local aArea     := GetArea()
Local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)
LOCAL cSCTCNOF  :=  SuperGetMV("MV_SCTCNOF",.F.,"")
Local aNoFields := IIf(Str(nOpc,1) $ '124' ,{"C1_NUM","C1_ORIGEM","C1_TIPO","C1_MOEDA","C1_SIGLA","C1_PRECO","C1_TOTAL","C1_FABRICA","C1_LOJFABR","C1_FILENT"} , {"C1_NUM","C1_ORIGEM","C1_PROJET","C1_REVISA","C1_TAREFA","C1_TRT","C1_TIPO","C1_MOEDA","C1_SIGLA","C1_PRECO","C1_TOTAL","C1_FABRICA","C1_LOJFABR","C1_FILENT"})
Local bCondicao := {||.T.}
Local bTrue     := {||.T.}
Local bFalse    := {||.T.}
Local cNumSC1   := ""
Local cSeek     := ""
Local cWhile    := ""
Local lRetorno  := .T.
Local lDelOk	:= .T.
Local alSCTCNOF := {}
Local nY := 0
Local nPosNoFields := 0

DEFAULT bBlock 		:= {|| .T.}
DEFAULT aColsBKPRat := {}
DEFAULT aHeader110 	:= {}
DEFAULT aCols110	:= {}

//-- Se tipo por documento, remove campo dos itens
If SuperGetMV("MV_TPOPDOC",.F.,.F.)
	aAdd(aNoFields,"C7_TPOP")
EndIf

lCopia	:= If(ValType(lCopia) == "L",lCopia,.F.)
cNumSC1 := If(lCopia,SC1->C1_NUM,cA110Num)
aCols   := {}

If lSCCNI
	aAdd(aNoFields,"C1_XSOL")
	aAdd(aNoFields,"C1_XNUMCT")
	aAdd(aNoFields,"C1_XNUMREV")
	aAdd(aNoFields,"C1_XTIPOSC")
	aAdd(aNoFields,"C1_XTPDESC")
EndIf

aAdd(aNoFields,"C1_SOLICIT")
aAdd(aNoFields,"C1_IDENT")
aAdd(aNoFields,"C1_QUJE")
aAdd(aNoFields,"C1_TX")
aAdd(aNoFields,"C1_OK")
aAdd(aNoFields,"C1_CODCOMP")
aAdd(aNoFields,"C1_QUJE2")
aAdd(aNoFields,"C1_GRUPCOM")
aAdd(aNoFields,"C1_USER")
aAdd(aNoFields,"C1_APROV")
aAdd(aNoFields,"C1_NOMAPRO")
aAdd(aNoFields,"C1_QTDREEM")
aAdd(aNoFields,"C1_NOMCOMP")
aAdd(aNoFields,"C1_ACCNUM")
aAdd(aNoFields,"C1_ACCITEM")
aAdd(aNoFields,"C1_IDAPS")
aAdd(aNoFields,"C1_COMPRAC")
aAdd(aNoFields,"C1_USRCODE")
aAdd(aNoFields,"C1_PRDREF")
aAdd(aNoFields,"C1_CODCOMP")

If len(cSCTCNOF) > 0
	alSCTCNOF := StrTokArr2(cSCTCNOF, "|", .F.)
	For nY := 1 to Len(alSCTCNOF)
		nPosNoFields := aScan(aNoFields,alSCTCNOF[nY]) 
		If nPosNoFields > 0
			aDel(aNoFields,nPosNoFields)
			aSize(aNoFields,len(aNoFields)-1)
		Endif
	next
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Monta aHeader e aCols utilizando a funcao FillGetDados.      ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( nOpc <> 1 .Or. lCopia)
	cSeek  := xFilial("SC1")+cNumSC1
	cWhile := "SC1->C1_FILIAL+SC1->C1_NUM"

	bCondicao := {|| Iif(lDelOk, lDelOk:= Eval(bBlock,"SC1"),lRetorno) .And. If( nOpc <> 2 , SoftLock("SC1") , .T. )}
	bTrue     := {|| lRetorno := lRetorno }
	bFalse    := {|| lRetorno := .F. }

    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Sintaxe da FillGetDados(nOpcX,Alias,nOrdem,cSeek,bSeekWhile,uSeekFor,aNoFields,aYesFields,lOnlyYes,cQuery,bMontCols,lEmpty,aHeaderAux,aColsAux,bAfterCols,bBeforeCols,bAfterHeader,cAliasQry |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	FillGetDados(nOpcX,"SC1",1,cSeek,{|| &cWhile },{{bCondicao,bTrue,bFalse}},aNoFields,,,,,,,, {|aColsX| A110After(lCopia,aColsX)},,{|aHeaderX| A110AfterH(aHeaderX)})
Else
    //ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Sintaxe da FillGetDados(nOpcX,Alias,nOrdem,cSeek,bSeekWhile,uSeekFor,aNoFields,aYesFields,lOnlyYes,cQuery,bMontCols,lEmpty,aHeaderAux,aColsAux,bAfterCols,bBeforeCols,bAfterHeader,cAliasQry |
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	FillGetDados(nOpcX,"SC1",1,,,,aNoFields,,,,,.T.,,,,,{|aHeaderX| A110AfterH(aHeaderX)})
	aCols[1][aScan(aHeader,{|x| Trim(x[2])=="C1_ITEM"})] := StrZero(1,Len(SC1->C1_ITEM))
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Copia o acols para verificar se houve mudança. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aColsBKPRat := aClone(aCols)
If !Empty(aHeader110) .And. !Empty(aCols110)
	aHeader110 	:= aClone(aHeader)
	aCols110	:= aClone(aCols)
Endif
If ExistBlock("M110MONT")
	ExecBlock("M110MONT",.F.,.F.,{cNumSC1,nOpc,lCopia})
EndIf

RestArea(aArea)
Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110After ³ Autor ³Alexandre Inacio Lemes ³Data  ³19/12/2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³A funcao trata a excecao na montagem do aCols pela FillGetDa ³±±
±±³          ³dos tratando os campos que deverao ser alterados.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpL1: Opcao de copia da SC                                  ³±±
±±³          ³ExpA1: aCols utilizado na funcao FillGetDados                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110After(lCopia,aColsX)
Local nY 		:= 0
Local nPosCpo	:= 0
Local aNoCopia  := {}
Local lRet		:= .T.

If lCopia
	//-- Trata campos que nao devem ser copiados
	aAdd(aNoCopia,"C1_OP");aAdd(aNoCopia,"C1_PEDIDO");aAdd(aNoCopia,"C1_ITEMPED");aAdd(aNoCopia,"C1_COTACAO")
	aAdd(aNoCopia,"C1_IDENT");aAdd(aNoCopia,"C1_QUJE");aAdd(aNoCopia,"C1_QUJE2");aAdd(aNoCopia,"C1_OS")
	aAdd(aNoCopia,"C1_SEQMRP");aAdd(aNoCopia,"C1_GRUPCOM");aAdd(aNoCopia,"C1_USER");aAdd(aNoCopia,"C1_CODCOMP")
	aAdd(aNoCopia,"C1_TX");aAdd(aNoCopia,"C1_OK");aAdd(aNoCopia,"C1_NUM_SI");aAdd(aNoCopia,"C1_ORIGEM")
	aAdd(aNoCopia,"C1_CODGRP");aAdd(aNoCopia,"C1_CODITE");aAdd(aNoCopia,"C1_RESIDUO");aAdd(aNoCopia,"C1_FLAGGCT")
	aAdd(aNoCopia,"C1_ACCPROC");aAdd(aNoCopia,"C1_ACCNUM");aAdd(aNoCopia,"C1_ACCITEM");aAdd(aNoCopia,"C1_FISCORI")
	aAdd(aNoCopia,"C1_SCORI");aAdd(aNoCopia,"C1_ITSCORI");aAdd(aNoCopia,"C1_CODED");aAdd(aNoCopia,"C1_NUMPR")
	aAdd(aNoCopia,"C1_MODAL");aAdd(aNoCopia,"C1_TPMOD");aAdd(aNoCopia,"C1_EMISSAO");aAdd(aNoCopia,"C1_UM")
	
	For nY := 1 to Len(aNoCopia)
		If (nPosCpo := GDFieldPos(aNoCopia[nY])) > 0
			aTail(aColsX)[nPosCpo] := CriaVar(aHeader[nPosCpo,2],.T.)
		EndIf
	Next nY
	aTail(aColsX)[GDFieldPos("C1_QUANT")] := aTail(aColsX)[GDFieldPos("C1_QTDORIG")]
	aTail(aColsX)[GDFieldPos("C1_UM")] :=  GetAdvFVal("SB1","B1_UM",xFilial("SB1")+aTail(aColsX)[GDFieldPos("C1_PRODUTO")],1)

EndIf

Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110UnidRe³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de validacao da unidade requisitante                  ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo da Unidade Requisitante                        ³±±
±±³          ³ExpO2: Objeto da unidade requisitante                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1: Indica se a unidade requisitante eh valida.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo validar a unidade requisitante ³±±
±±³          ³quanto a integridade referencial                             ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110UnidReq(cUnidReq,oReq)

Local aArea 	:= GetArea()
Local lRetorno  := .T.

If ( !Empty(cUnidReq) )
	dbSelectArea("SY3")
	dbSetOrder(1)
	If ( !(MsSeek(xFilial("SY3")+cUnidReq)) )
		Help( " ",1,"A110UNID")
		lRetorno := .F.
	EndIf
EndIf
RestArea(aArea)
Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110CodCom³ Autor ³ Eduardo Riera         ³ Data ³28.07.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de validacao do codigo do comprador                   ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Codigo do comprador                                   ³±±
±±³          ³ExpO2: Objeto do comprador                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1: Indica se o comprador eh valido                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo validar o comprador quanto a   ³±±
±±³          ³integridade referencial                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110CodCompr(cCodCompr,oComp)

Local lRetorno := .T.

//verificar se o campo está como obrigatório e usado
//x3Uso(sx3->x3_usado)

dbSelectArea("SX3")
dbSetOrder(2)
IF MsSeek("C1_CODCOMP")
	IF X3USO(SX3->X3_USADO) .AND. X3Obrigat("C1_CODCOMP")
		if Empty(cCodCompr)
			Help(" ",1,STR0167)
			lRetorno := .F.
		endif
	Endif
endif

If ( !Empty(cCodCompr) )
	lRetorno := ExistCpo("SY1",cCodCompr)
EndIf

Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Legenda³ Autor ³ Edson Maricate       ³ Data ³18.08.2000 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Exibe uma janela contendo a legenda da mBrowse.              ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum Codigo do comprador                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Exclusivo MATA110                                           ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Legenda()

local lSCCNI     := SuperGetMV("MV_SCLCNI",.F.,.F.)
Local aCores     := {}
Local aCoresNew  := {}   
Local lGspInUseM := If(Type('lGspInUse')=='L', lGspInUse, .F.)

aAdd(aCores,{"ENABLE"		,STR0024})
aAdd(aCores,{"DISABLE"		,STR0025})
aAdd(aCores,{"BR_AMARELO"	,STR0027})
aAdd(aCores,{"BR_AZUL"		,STR0026})
aAdd(aCores,{"BR_PRETO"		,STR0031})
aAdd(aCores,{"BR_CINZA"		,STR0035})
aAdd(aCores,{"BR_PINK"		,STR0053})
aAdd(aCores,{"BR_LARANJA"	,STR0034})
aAdd(aCores,{"BR_MARROM"	,STR0062}) //-- "Integração Modulo Gestao de Contratos"
aAdd(aCores,{"PMSEDT4"		,STR0101}) //-- "Solicitação em Processo de Edital" 
aAdd(aCores,{"PMSEDT1"		,STR0171}) //-- "Solicitação Parcialmente Atendida Utilizada em Cotação"
aAdd(aCores,{"BR_VIOLETA"	,STR0097}) //-- Solicitação em Compra Centralizada

if lSCCNI
	aAdd(aCores,{"metas_cima_16",/*STR0084*/STR0131}) // Contrato gerado     -  10/05/11
	aAdd(aCores,{"metas_baixo_16",/*STR0085*/STR0132}) // Contrato nao gerado -  10/05/11
EndIf

  aAdd(aCores,{"BR_BRANCO",STR0071})	//"Solicitacao de Importacao"

if lSCCNI
	aAdd(aCores,{"BR_VERDE_ESCURO",STR0133}) // SC proveniente de SA, aguardando classificacao
EndIf   

aAdd(aCores,{"PMSEDT3"	, STR0104 }) //-- "Solicitação Pendente (MarketPlace)"
aAdd(aCores,{"PMSEDT2"	, STR0105 }) //-- "Solicitação em Processo de Cotação (MarketPlace)"
aAdd(aCores,{"LIGHTBLU"	, STR0109 }) //-- "Solicitação para Licitação"
                                                                                                                                                                                                                      
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para alterar cores do Browse do Cadastro    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT110LEG")
	aCoresNew := ExecBlock("MT110LEG",.F.,.F.,{aCores,lGspInUseM})
	If ValType(aCoresNew) == "A"
		aCores := aCoresNew
	EndIf
EndIf

BrwLegenda(cCadastro,STR0023,aCores)

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A110Impri ³ Autor ³ Sergio Silveira       ³ Data ³11/09/2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Efetua a chamada do relatorio padrao ou do usuario         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ ExpX1 := A110Impri( ExpC1, ExpN1, ExpN2 )                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 -> Alias do arquivo                                  ³±±
±±³          ³ ExpN1 -> Recno do registro                                 ³±±
±±³          ³ ExpN2 -> Opcao do Menu                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpX1 -> Retorno do relatorio                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Function A110Impri( cAlias, nRecno, nOpc )

Local cPrinter := SuperGetMV("MV_SOLIMPR" ,.F., "" )
Local xRet     := .T.

If !Empty( cPrinter ) .And. Existblock( cPrinter )
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz a chamada do relatorio de usuario                        ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ExecBlock( cPrinter, .F., .F., { cAlias, nRecno, nOpc } )
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Faz a chamada do relatorio padrao                            ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	xRet := MATR140( cAlias, nRecno, nOpc )
EndIf

dbSelectArea("SC1")

//Restaura o pergunte do MATA110
Pergunte("MTA110",.F.)

Return( xRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SegumEIC  ³ Autor ³ Microsiga S/A         ³ Data ³07/04/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Segunda Unidade de Medida EIC					          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ SegumEic()								                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function SegumEIC()
Local nX := 0
Local cUni := ''
Local nQtde2Um := 0
Local lRet := .T.

If SuperGetMV("MV_EASY",.F.,"") $ "Y1S"
	For nx:= 1 To Len(aHeader)
		If Trim(Substr(aHeader[nx][2],3)) == "_SEGUM"
			cUni := aCols[n][nX]
		EndIf
		If Trim(Substr(aHeader[nx][2],3)) == "_QTSEGUM"
			nQtde2Um := aCols[n][nX]
		EndIf
	Next nx
	If (!Empty(cUni) .and. ! nQtde2Um > 0) .or. (Empty(cUni) .and.  nQtde2Um > 0)
		Help(" ",1,"SC2UMEIC")
		lRet := .F.
	EndIf
EndIf
Return(lRet)

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110FldOk ³  Autor³ Alexandre Inacio Lemes³ Data ³17/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Impede Alteracoes dos Campos conforme as restricoes alcadas ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110FldOk()
Local lRet      := .T.
Local cMenVar   := &(ReadVar())
Local nPProduto := aScan(aHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local nPItem    := aScan(aHeader,{|x| Trim(x[2])=="C1_ITEM"})
Local nPCodEd   := aScan(aHeader,{|x| Trim(x[2])=="C1_CODED"})
Local aNoAltACC := {"C1_PRODUTO","C1_QUANT","C1_UM","C1_SEGUM","C1_QTSEGUM","C1_DATPRF","C1_CC"}

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se a Linha pode ser alterada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( Altera ) .And. lRet
	dbSelectArea("SC1")
	dbSetOrder(2)
	If ( MsSeek(xFilial("SC1")+aCols[n][nPProduto]+cA110Num+aCols[n][nPItem]) )
		lRet := MaCanAltSC("SC1")
		//³ valida se o item está com o residuo eliminado..		
		If lRet .and.  SC1->C1_RESIDUO == "S"
			Help('',1,"A110FLDOK",,STR0126,1,0)//"Solicitação não pode ser alterada, pois foi eliminado residuo."
			lRet := .F.
		EndIf
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o item esta no portal marketplace e se o campo alterado e restrito ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. aScan(aNoAltACC,{|x| x == Substr(ReadVar(),4)}) > 0 .And.;
		Posicione("SC1",1,xFilial("SC1")+cA110Num+aCols[n,nPItem],"C1_ACCPROC") == '1' .And.;
		cMenVar # Posicione("SC1",1,xFilial("SC1")+cA110Num+aCols[n,nPItem],Substr(ReadVar(),4))
	Aviso( STR0102 ,STR0106,{STR0039}) //Este campo não podera ser alterado pois este item da solicitacao de compra ja esta em processo no MarketPlace
	lRet := .F.
EndIf

If !Empty(aCols[n][nPCodEd])
	MsgAlert(STR0116)
	lRet := .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza a legenda conforme o tipo de Compras   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Altera .And. lRet
	A110AltLeg(.T.)
EndIf

Return( lRet )

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110DelOk ³  Autor³ Alexandre Inacio Lemes³ Data ³17/07/2002³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Valida delecao da linha conforme as restricoes de alcadas   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Mata110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110DelOk()

Local lRet      := .T.
Local nPProduto := aScan(aHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local nPItem    := aScan(aHeader,{|x| Trim(x[2])=="C1_ITEM"})
Local nPCodEd    := aScan(aHeader,{|x| Trim(x[2])=="C1_CODED"})
Static lPermHlp := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Verifica se o usuario tem permissao de delecao. ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If !(lRet := MaAvalPerm(1,{aCols[n][nPProduto],"MTA110",5})) .And. !lPermHlp
		lPermHlp := .T.
		Help(,,1,'SEMPERM')
	Else
		lPermHlp := .F.
	EndIf
	
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³VerIfica se a Linha pode ser deletada                                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ( Altera ) .And. !aCols[n,Len(aCols[n])] .And. lRet
	dbSelectArea("SC1")
	dbSetOrder(2)
	If ( MsSeek(xFilial("SC1")+aCols[n][nPProduto]+cA110Num+aCols[n][nPItem]) )
		lRet := MaCanDelSC("SC1")
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se o item esta no portal marketplace e se o campo alterado e restrito ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If lRet .And. Posicione("SC1",1,xFilial("SC1")+cA110Num+aCols[n,nPItem],"C1_ACCPROC") == '1' 
	Aviso( STR0102 , STR0107 ,{ STR0039 }) //Este item não podera ser excluido pois já esta em processo no MarketPlace.
	lRet := .F.
EndIf

If !Empty(aCols[n][nPCodEd])
	MsgAlert(STR0117)	
	lRet := .F.
EndIf

Return( lRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ A110Track³ Autor ³ Aline Correa do Vale  ³ Data ³16/06/2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Faz o tratamento da chamada do System Tracker              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ .T.                                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A110Track()

Local aEnt     := {}
local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local cKey     := xFilial("SC1") + cA110Num
Local nPosItem := GDFieldPos( "C1_ITEM" )
Local nLoop    := 0                      
    
if lSCCNI
	cKey     := "" 
	
	If Empty(xFilial("SC1")) .And. Empty(xFilial("SC7")) .And. Empty(xFilial("SC8")) .And. ExistBlock("TrkFilEn")
		cKey:= cA110Num
	Else
		cKey:= xFilial("SC1") + cA110Num
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega os itens para rastreamento          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nLoop := 1 To Len( aCols )
	AAdd( aEnt, { "SC1", cKey + aCols[ nLoop, nPosItem ] } )
Next nLoop

MaTrkShow( aEnt )

Return( .T. )

Static Function ProcH(cCampo)
Return aScan(aAutoCab,{|x|Trim(x[1])== cCampo })

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A110FilEnt³ Rev.  ³ Eduardo Riera        ³ Data ³16.10.2003³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³VerIf. existencia da Filial para Entrega da SC em SM0.     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A110FilEnt(ExpC1)                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 := Codigo da Filial de Entrega                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MatA110                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110FilEnt(cFilialEnt)

Local aArea		:= GetArea()
Local lRet 		:= .T.
Local aAreaSM0  := SM0->(GetArea())
local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)

lGatilha := If(ValType(lGatilha) == "L",lGatilha,.T.) // .T.=Permite preencher aCols /  .F.=Executando via VldHead() 

if lSCCNI
	Do Case      
		Case !Empty(cFilialEnt) .And. Empty(xFilial("SC7"))  //A filial de entrega deve ser compativel com o modo de compartilhamento do SC7
			Help(" ",1,"FILENTC")
			lRet		:= .T.
		Case Empty(cFilialEnt) .And. Empty(xFilial("SC7")) 
			lRet := .T.
		Case Empty(cFilialEnt).And.!Empty(xFilial("SC7"))
			Help(" ",1,"FILENTE")
			lRet := .F.
		OtherWise
			dbSelectArea("SM0")
			dbSetOrder(1)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Procura pelo Numero da Empresa e Filial para Entrega.        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !MsSeek(SUBS(cNumEmp,1,2)+cFilialEnt)
				Help(" ",1,"C1_FILENT")
				lRet := .F.
			EndIf
			If lRet .And. lGatilha
				If MaFisFound("NF")
					MaFisAlt("NF_UFDEST",SM0->M0_ESTENT)
				EndIf
			EndIf
	EndCase      
Else
	Do Case
		Case FWModeAccess(aArea[1]) == "E" .And. FWModeAccess("SC7") == "C"  //A filial de entrega deve ser compativel com o modo de compartilhamento do SC7
			Help(" ",1,"FILENTC")
			lRet		:= .T.
		Case FWModeAccess(aArea[1]) == "C" .And. FWModeAccess("SC7") == "C" 
			lRet := .T.
		Case FWModeAccess(aArea[1]) == "C" .And. !FWModeAccess("SC7") == "E"
			Help(" ",1,"FILENTE")
			lRet := .F.
		OtherWise
			dbSelectArea("SM0")
			dbSetOrder(1)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Procura pelo Numero da Empresa e Filial para Entrega.        ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !MsSeek(SUBS(cNumEmp,1,2)+cFilialEnt)
				Help(" ",1,"C1_FILENT")
				lRet := .F.
			EndIf
			If lRet .And. lGatilha
				If MaFisFound("NF")
					MaFisAlt("NF_UFDEST",SM0->M0_ESTENT)
				EndIf
			EndIf
	EndCase      
EndIf

RestArea(aAreaSM0)
RestArea(aArea)
Return lRet

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110Aprov ³Rev.   ³ Eduardo Riera         ³ Data ³22.10.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de aprovacao de solicitacao de compra                 ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                    ³±±
±±³          ³ ExpN2 = Numero do registro                                  ³±±
±±³          ³ ExpN3 = Numero da opcao selecionada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ Nenhum                                                      ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo de aprovar ou rejeitar um item ³±±
±±³          ³da solicitação de compra                                     ³±±
±±³          ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110Aprov(cAlias,nReg,nOpcx)

local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local aArea		:= GetArea()
Local aSizeAut	:= MsAdvSize(.F.,.F.)
Local aCpos     := {"C1_FILENT","C1_NUM","C1_EMISSAO","C1_PRODUTO","C1_DESCRI","C1_OBS","C1_QUANT","C1_UM"}
Local aObjects	:= {}
Local aInfo 	:= {}
Local aPosGet	:= {}
Local aPosObj	:= {}
Local aItens 	:= {}
Local aCposNew 	:= {}

Local nOpcA     := 0
Local lRet
Local lContinua := .T. 
Local lAProvSI 	:= GetNewPar("MV_APROVSI",.F.)
Local l110ApvE	:= ExistBlock("MT110APV")
Local lMT110END := ExistBlock("MT110END")
Local l110Apv   := .T.
Local oQual
Local oDlg
Local cCond  	:= IIf(mv_par02==1,".T.","!Eof() .And. C1_FILIAL == xFilial('SC1') .And. SC1->C1_NUM == cNumSc")
Local cAprov    := ""  
//-- Variavel usada para verificar se o disparo da funcao IntegDef() pode ser feita manualmente
Local lIntegDef  :=  FWHasEAI("MATA110",.T.,,.T.)
Local lMkPlace	:= .F. 
Local cNameUser := UsrRetName(RetCodUsr())
Local lLog		:= GetNewPar("MV_HABLOG",.F.)
Local cAprovBkp	:= ""

Private lShowAprv	:= (lGeraSCR .Or. lAlcSolCtb .Or. !ExistSCR('SC',SC1->C1_NUM)) .And. (!ExistSCR('SC',SC1->C1_NUM) .Or. (Empty(SC1->C1_CC) .And. SC1->C1_RATEIO == "2")) 

/*REVISAR junto com soluções do spike de alçadas - checar evidência técnica do DMANMAT02-7553
•	CASO 4. Correção MATA110 para utilizar modo de aprovação desta quando não houver SCR e DBM em um 
item e a opção de aprovação for "Por Item" e outro item da mesma SC possua DBM e SCR do tipo SC correspondente a DBM.
If MtExistDBM('SC',SC1->C1_NUM,SC1->C1_ITEM)
	lShowAprv	:= .F.
Else
	If mv_par02==2//Por Cotação
		lShowAprv	:= !ExistSCR('SC',SC1->C1_NUM)
	Else//Por Item - Não Existe DBM e SCR ou Bloqueio Padrão da MATA110 
		lShowAprv	:= !ExistSCR('SC',SC1->C1_NUM) .OR.;
			(lGeraSCR .and. lAlcSolCtb .AND. Empty(cGrpAprov))
	EndIf
EndIf
*/

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ PE: MT110APV - Indica se a rotina de aprovação será executada |
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If l110ApvE
	l110Apv := ExecBlock("MT110APV",.F.,.F.,{cAlias, nReg})
	If ValType(l110Apv)<>"L"
		l110Apv:=.T.
	EndIf
EndIf  

If l110Apv .And. lShowAprv
	If l110Auto
		If ProcH("C1_NUM") > 0
			If ProcH("C1_ITEM") > 0
				dbSelectArea("SC1")
				dbSetOrder(1)
				dbSeek(xFilial("SC1")+aAutoCab[ProcH("C1_NUM"),2]+aAutoCab[ProcH("C1_ITEM"),2])
				nReg:=SC1->(RECNO())
				mv_par02 := 1//Aprovacao por item
				cCond := ".T."
			Else
				dbSelectArea("SC1")
				dbSetOrder(1)
				dbSeek(xFilial("SC1")+aAutoCab[ProcH("C1_NUM"),2])
				nReg:=SC1->(RECNO())
				mv_par02 := 2//Aprovacao por SC
				cCond := "!Eof() .And. C1_FILIAL == xFilial('SC1') .And. SC1->C1_NUM == cNumSc"
			EndIf
			
			If ProcH("C1_APROV") > 0
				cAprov := aAutoCab[ProcH("C1_APROV"),2]
			
				Do Case
					Case cAprov == "L"//Liberado 
						nOpcA := 1
					Case cAprov == "R"//Rejeitado 
						nOpcA := 2
					Case cAprov == "B"//Bloqueado
						nOpcA := 3
				EndCase
			EndIf
		EndIf
	EndIf   
		
	If SC1->C1_TIPO == 2
		Help(" ",1,"A113TIPO")
		RestArea(aArea)
		Return
	EndIf
	
	cNumSc := SC1->C1_NUM
	
	If ExistBlock("MT110CPO")
		aCposNew := ExecBlock("MT110CPO",.F.,.F.,{aCpos})
		If ValType(aCposNew) == "A"
			aCpos := aCposNew
		EndIf
	EndIf
	
	If mv_par02 == 1
		If SoftLock("SC1") .And. SC1->C1_APROV $ 'B,R,L, ' .And. SC1->C1_QUJE == 0 .And.;
			IIf( lAProvSI ,(Empty(SC1->C1_COTACAO).Or.C1_COTACAO=="IMPORT"),Empty(SC1->C1_COTACAO)) .And. Empty(SC1->C1_RESIDUO) .And. !lAlcSolCtb
			lContinua := .T.
		Else
			lContinua := .F.
		EndIf
	Else
	    dbSelectArea("SC1")
	    dbSetOrder(1)
	    dbSeek(xFilial("SC1")+SC1->C1_NUM)
	    While !Eof() .And. C1_FILIAL == xFilial("SC1") .And. SC1->C1_NUM == cNumSc
			If SoftLock("SC1") .And. SC1->C1_APROV $ 'B,R,L, ' .And. SC1->C1_QUJE == 0 .And.;
			    IIf( lAProvSI ,(Empty(SC1->C1_COTACAO).Or.C1_COTACAO=="IMPORT"),Empty(SC1->C1_COTACAO)) .And. Empty(SC1->C1_RESIDUO)
				AADD(aItens,{C1_PRODUTO,C1_UM,C1_QUANT,C1_OBS,C1_EMISSAO,C1_DESCRI,C1_FILENT})
			EndIf
			dbSkip()
		EndDo
		dbSeek(xFilial("SC1")+cNumSc) //Volta para o primeiro item da SC
		If Len(aItens) == 0
			lContinua := .F.
		EndIf
	EndIf 
EndIf

If lContinua .And. l110Apv .And. lShowAprv
	If !l110Auto
		AAdd( aObjects, { 100, 100, .T., .T. })
	
		if lSCCNI
			AAdd( aObjects, { 0,    55, .T., .F. })	
		Else
			AAdd( aObjects, { 0,    25, .T., .F. })
		EndIf
		
		aInfo := { aSizeAut[ 1 ], aSizeAut[ 2 ], aSizeAut[ 3 ], aSizeAut[ 4 ], 2, 2 }
		aPosObj := MsObjSize( aInfo, aObjects )
		aPosGet := MsObjGetPos(aSizeAut[3]-aSizeAut[1],305,{{10,35,100,135,205,255},{10,45,105,145,225,265,210,255}})
		DEFINE MSDIALOG oDlg TITLE OemToAnsi(STR0011)+" - Aprovar"+IIf(mv_par02==2," - "+cNumSc,"") From aSizeAut[7],0 TO aSizeAut[6],aSizeAut[5] OF oMainWnd PIXEL		//"Solicita‡„o de Compras"
	
		If mv_par02 == 1
			EnChoice( cAlias, nReg, nOpcx, , , , aCpos, aPosObj[1], , 3 )
		Else
			@ 1.6,.7 LISTBOX oQual VAR cVar Fields HEADER OemToAnsi(STR0042),OemToAnsi(STR0043),OemToAnsi(STR0044),OemToAnsi(STR0045),OemToAnsi(STR0046),OemToAnsi(STR0047),OemToAnsi(STR0048) SIZE aPosObj[1][4],aPosObj[1][3]-18 //	"Produto"##"Unid.Medida"##"Quantidade"##"Observacao"##"Dt.Emissao"##"Descricao"##"Fil.Entrega"
			oQual:SetArray(aItens)
			oQual:bLine := { || {aItens[oQual:nAT][1],aItens[oQual:nAT][2],aItens[oQual:nAT][3],aItens[oQual:nAT][4],aItens[oQual:nAT][5],aItens[oQual:nAT][6],aItens[oQual:nAT][7]}}
			If ExistBlock("MT110CP2")
				ExecBlock("MT110CP2",.F.,.F.,{aItens,oQual})
			EndIf
		EndIf
	
		@ aPosObj[2,1]+008,aPosObj[2,4]-300 BUTTON STR0035 SIZE 60,15 FONT oDlg:oFont ACTION (nOpcA := 3,oDlg:End()) PIXEL
		@ aPosObj[2,1]+008,aPosObj[2,4]-220 BUTTON STR0033 SIZE 60,15 FONT oDlg:oFont ACTION (nOpcA := 1,oDlg:End()) PIXEL
		@ aPosObj[2,1]+008,aPosObj[2,4]-140 BUTTON STR0034 SIZE 60,15 FONT oDlg:oFont ACTION (nOpcA := 2,oDlg:End()) PIXEL
		@ aPosObj[2,1]+008,aPosObj[2,4]-060 BUTTON STR0067 SIZE 60,15 FONT oDlg:oFont ACTION (nOpcA := 0,oDlg:End()) PIXEL
		ACTIVATE MSDIALOG oDlg
	EndIf

	If (ExistBlock("MT110BLO"))
		lRet := ExecBlock("MT110BLO",.f.,.f.,{nOpcA})
		If ValType(lRet) <> "L"
			lRet := .T.
		EndIf
	Else
		lRet := .T.
	EndIf

    PcoIniLan("000051")

	If lRet .And. nOpcA > 0
		While &cCond
			If mv_par02 == 2
				If !(SoftLock("SC1")) .And. !(SC1->C1_APROV $ 'B,R,L, ') .And. SC1->C1_QUJE <> 0 .And.;
				IIf( lAProvSI ,!(Empty(SC1->C1_COTACAO).Or.C1_COTACAO<>"IMPORT"),!Empty(SC1->C1_COTACAO))	.And.!Empty(SC1->C1_RESIDUO)
					dbSkip()
					Loop
				EndIf
			EndIf
			
			Do Case
				Case nOpcA == 1
					If !PcoVldLan('000051','02','MATA110',/*lUsaLote*/,/*lDeleta*/, .F./*lVldLinGrade*/)  // valida bloqueio na aprovacao de SC
						Exit
					Endif
					Begin Transaction
					If RecLock("SC1")
					cAprovBkp := SC1->C1_APROV
						If SC1->C1_APROV $ " ,B,R" .And. SC1->C1_QUJE == 0 .And.;
						    IIf( lAProvSI ,(Empty(SC1->C1_COTACAO).Or.C1_COTACAO=="IMPORT"),Empty(SC1->C1_COTACAO)) .And. Empty(SC1->C1_RESIDUO)
							SC1->C1_APROV := "L"
								SC1->C1_NOMAPRO := cNameUser
						EndIf
						MaAvalSC("SC1",8,,,,,,cAprovBkp)
					EndIf
					End Transaction					
				Case nOpcA == 2
					Begin Transaction
					If RecLock("SC1")
					cAprovBkp := SC1->C1_APROV
						If SC1->C1_APROV $"B,L, " .And. SC1->C1_QUJE == 0 .And.;
						    IIf( lAProvSI ,(Empty(SC1->C1_COTACAO).Or.C1_COTACAO=="IMPORT"),Empty(SC1->C1_COTACAO)) .And. Empty(SC1->C1_RESIDUO)
							SC1->C1_APROV := "R"
								SC1->C1_NOMAPRO := cNameUser
						EndIf
						MaAvalSC("SC1",8,,,,,,cAprovBkp)
					EndIf
					End Transaction
				Case nOpcA == 3
					Begin Transaction
					If RecLock("SC1")
					cAprovBkp := SC1->C1_APROV
						If SC1->C1_APROV $ " ,L,R" .And. SC1->C1_QUJE == 0 .And.;
						    IIf( lAProvSI ,(Empty(SC1->C1_COTACAO).Or.C1_COTACAO=="IMPORT"),Empty(SC1->C1_COTACAO)) .And. Empty(SC1->C1_RESIDUO)
							SC1->C1_APROV := "B"
								SC1->C1_NOMAPRO := cNameUser
						EndIf
						MaAvalSC("SC1",9,,,,,,cAprovBkp)
					EndIf
					End Transaction
					If lLog
						RSTSCLOG("APR",1,/*cUsrWF*/)
					EndIf
			EndCase

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Executa o PE MT110END apos acionar os botoes Aprovar Bloquear Rejeitar ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If lMT110END
				ExecBlock("MT110END",.F.,.F.,{cNumSc,nOpcA})
			EndIf

			If mv_par02 == 1
				Exit
			Else
			    dbSkip()
			EndIf
		EndDo

		SC1->(DbSetOrder(1))
		SB5->(DbSetOrder(1))
		
		If SB5->(DbSeek( xFilial("SB5") + SC1->C1_PRODUTO ) )
			If SB5->(FieldPos("B5_ENVMKT")) > 0
				If SB5->B5_ENVMKT <> "1"
					lMkPlace := .F.				
				EndIf
			EndIf
		EndIf
	
		If lIntegDef .And. SC1->( DbSeek( xFilial("SC1")+cNumSc ) ) 
			If SuperGetMV("MV_MKPLACE",.F.,.F.) .And. lMkPlace 
				Inclui:=.T.
				A110INTMU()
			EndIf
		EndIf

	EndIf
	PcoFinLan("000051")
	PcoFreeBlq("000051")

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Executa o PE MT110CFM apos acionar os botoes Aprovar Bloquear Rejeitar - para todos os itens da SC ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ	
	If ExistBlock("MT110CFM")
		ExecBlock("MT110CFM",.F.,.F.,{cNumSc,nOpcA})
	EndIf
Else
	If lAlcSolCtb .And. Empty(SC1->C1_RESIDUO)
		/*REVISAR junto com soluções do spike de alçadas - checar evidência técnica do DMANMAT02-7553
 		•	CASO 4. Correção MATA110 para utilizar modo de aprovação desta quando não houver SCR e DBM em um 
 		item e a opção de aprovação for "Por Item" e outro item da mesma SC possua DBM e SCR do tipo SC correspondente a DBM.*/ 
		Help(" ",1,"EXISTSCR")
	ElseIf !l110ApvE 
		Help(" ",1,"MT110APROV")
	EndIf
EndIf

RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A110Restr³ Autor ³   Edson Maricate      ³ Data ³ 01.10.98 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Validacao para controle de solicitantes.                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Codigo do produto.                                 ³±±
±±³          ³ ExpA1 = Array contendo os grupos do usuario.               ³±±
±±³          ³ ExpC1 = Codigo do usuario a ser verIficado.                ³±±
±±³          ³ ExpL1 = Variavel que controla a exibicao dos helps.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ RetL1 = .T. - usuario/grupo com permissao ao produto.      ³±±
±±³          ³ RetL1 = .F. - usuario/grupo sem permissao ao produto.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico.                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßß??ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß 
/*/
Function A110Restr(cProduto,aGrupo,cUser,lHelp)
Local lRet := .F.

If PutByAps()
	lRet := .T.
Else
	If Type ("l110Auto") == 'L' .And. l110Auto .And. IsIntegTop(,.T.)
		lRet := .T.
	Else
		cUser 	:= A110UsrDru(cUser)
		lRet 	:= MaVldSolic(cProduto,aGrupo,cUser,lHelp)	//Avalia regra do cadastro do solicitante
	Endif
Endif

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A110Copia ³Autor ³ Aline Correa do Vale  ³ Data ³27.01.2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Copia a solicitacao de compra posicionada                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Void A110Copia(ExpC1,ExpN1,ExpN2)                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Alias do arquivo                                   ³±±
±±³          ³ ExpN1 = Numero do registro                                 ³±±
±±³          ³ ExpN2 = Opcao selecionada                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
FUNCTION A110Copia(cAlias,nReg,nOpcX)

Local xRet
lCopia := .T.
l110Alt:= .F.                                               

If !SC1->(Eof())
	xRet := A110Inclui(cAlias,nReg,4,lCopia)
EndIf

If ( Type("bFiltraBrw") == "B" )
	Eval(bFiltraBrw)
EndIf

Return( xRet )

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A110Solic ³Autor ³Rodrigo de A Sartorio  ³ Data ³01.07.2004³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Muda o solicitante ao navegar pela GETDADOS                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ Void A110Solic(ExpC1,ExpO1,ExpC2)                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 = Numero da Solicitacao de Compra                    ³±±
±±³          ³ ExpN1 = Objeto com conteudo do solicitante                 ³±±
±±³          ³ ExpN2 = Variavel com conteudo do solicitantes              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A110Solic(cNumSC,oSolic,cSolic)
Local cItemSC:=GdFieldGet("C1_ITEM")
Local aArea:=GetArea()
Local aAreaSC1:=SC1->(GetArea())
dbSelectArea("SC1")
dbSetOrder(1)
If dbSeek(xFilial("SC1")+cNumSC+cItemSc)
	cSolic:=SC1->C1_SOLICIT
	oSolic:SetText(cSolic)
	oSolic:Refresh()
	Sysrefresh()
EndIf
RestArea(aAreaSC1)
RestArea(aArea)
Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ A110Exit  ³Autor ³Alexandre Inacio Lemes ³ Data ³28/03/2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Executa o ponto M110EXIT no calcelamento da Enchoicebar    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function A110Exit(nOpcA)

Local lRetorno := .T.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Executa o ponto de entrada somente quando for acionado o calcelamento ³
//³da dialog pelo botao cancelar ou pela opcao X da dialog.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If nOpca == 0
	If (ExistBlock("M110EXIT"))
		lRetorno := ExecBlock("M110EXIT",.F.,.F.)
		If ValType(lRetorno) <> "L"
	    	lRetorno := .T.
	    EndIf
	EndIf
EndIf

If nOpca <> 1
	lCopia := .F.
EndIf	

Return lRetorno

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A110Cancela³ Autor ³ Marcos V. Ferreira    ³ Data ³21.06.05 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ ÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cancelamento de SCs em aberto		                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA110	                                                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110Cancela()
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Salva a Integridade dos dados de Entrada                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
LOCAL 	lOk
LOCAL 	oDlg

If Pergunte("MTA110",.T.)

	DEFINE MSDIALOG oDlg FROM  160,20 TO 302,592 TITLE STR0050 PIXEL	//"Cancelamento das SCs em Aberto"
	@ 10, 6 TO 56,280 LABEL "" OF oDlg PIXEL
	@ 19, 15 SAY OemToAnsi(STR0051) SIZE 268, 8 OF oDlg PIXEL	//"Esta rotina ir  cancelar todas as SC's em aberto desde que n„o tenham sido movimentadas"
	@ 28, 15 SAY OemToAnsi(STR0052) SIZE 268, 8 OF oDlg PIXEL	//"por outros processos."
	DEFINE SBUTTON FROM 57, 196 TYPE 5 ACTION Pergunte("MTA110",.T.) ENABLE OF oDlg
	DEFINE SBUTTON FROM 57, 223 TYPE 1 ACTION (lOk := .T., oDlg:End()) ENABLE OF oDlg
	DEFINE SBUTTON FROM 57, 250 TYPE 2 ACTION oDlg:End() ENABLE OF oDlg
	ACTIVATE MSDIALOG oDlg

	If lOk
		Processa({|lEnd| A110Process(@lEnd)},STR0050,OemToAnsi(STR0050),.F.) //"Cancelamento das SCs em Aberto"###"Cancelando SCs em Aberto..."
	EndIf

EndIf

//Restaura o pergunte do MATA110
Pergunte("MTA110",.F.)

Return Nil

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A110Process ³ Autor ³ Marcos V. Ferreira    ³ Data ³21/06/05³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cancela SCs em Aberto              					      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A110Process(lEnd)
Local cAliasSC1  := ''
Local aAreaAnt   := GetArea()
Local aAreaSC1   := SC1->(GetArea())
Local cQuery     := ''

cAliasSC1 := GetNextAlias()
cQuery    := " SELECT R_E_C_N_O_ RECNOSC1 "
cQuery    += " FROM "+RetSqlName ("SC1") + " "
cQuery    += " WHERE C1_FILIAL = '" + xFilial("SC1") + "' AND "
cQuery    += " C1_NUM >= '" + mv_par03 + "' AND "
cQuery    += " C1_NUM <= '" + mv_par04 + "' AND "
cQuery    += " D_E_L_E_T_ = ' '"   
cQuery    := ChangeQuery(cQuery)
		
If Select(cAliasSC1) > 0
	(cAliasSC1)->(dbCloseArea())
EndIf
		
dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSC1,.T.,.T.)

ProcRegua(SC1->(LastRec()),17,06)
dbGoTop()
While !Eof() 
	IncProc()
	dbSelectArea("SC1")
	dbSetOrder(1)
	dbGoto((cAliasSC1)->RECNOSC1)
	A110Deleta("SC1",Recno(),5,,.F.,.F.)
	dbSelectArea(cAliasSC1)
	dbSkip()
EndDo
// Encerra area de trabalho
If Select(cAliasSC1) > 0
	(cAliasSC1)->(dbCloseArea())
EndIf

RestArea(aAreaSC1)
RestArea(aAreaAnt)
Return

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110DtNec ³Autor  ³ Ricardo Berti         ³ Data ³14.02.2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de validacao da data da necessidade          		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A110DtNec(ExpD1)                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpD1 := (opcional) data da necessidade	                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³.T. / .F.                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo CONFIRMAR a data de necessidade³±±
±±³          ³quando MENOR que a do dia (BOPS 90145)  		               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Materiais                                                   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110DtNec(dNeces)

Local lRetorno  := .T.
Local lDataNec  := ExistBlock("MT110DTN")
DEFAULT dNeces	:= &(ReadVar())

lGatilha := If(ValType(lGatilha) == "L",lGatilha,.T.) // .F.=Executando via VldHead()

If lGatilha .And. !l110Auto .And. !Empty( dNeces ) .And. dNeces < dDataBase

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada para validar a data da necessidade da SC              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If lDataNec 
	 	lRetorno := Execblock("MT110DTN",.F.,.F.)
	Else
	 	lRetorno := ( Aviso(OemToAnsi(STR0021),OemToAnsi(STR0058),{STR0059,STR0060},1,,1) == 1 ) //"Atencao!" //"Confirma a data de necessidade MENOR que a data base do sistema?"###"Sim"###"Não"
   	EndIf
EndIf
Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110NumOP ³Autor  ³Alexandre Inacio Lemes ³ Data ³18/06/2009 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de validacao do numero da Ordem de Producao  		   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ A110NumOp(ExpC1)                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 := (opcional) Numero da Ordem de Producao             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³.T. / .F.                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110NumOP(cNumOP)

Local lRetorno  := .T.
Local nPosOP    := aScan(aHeader,{|x| Trim(x[2])=="C1_OP"})

DEFAULT cNumOP  := &(ReadVar())

lGatilha := If(ValType(lGatilha) == "L",lGatilha,.T.) // .F.=Executando via VldHead()

If lGatilha .And. !l110Auto .And. nPosOP > 0 .And. !Empty(cNumOP)
	SC2->(dbSetOrder(1))
	If ( SC2->(MsSeek(xFilial("SC2")+cNumOP)) .And. !Empty(SC2->C2_DATRF))
		Help(" ",1,"A250ENCERR")
		lRetorno := .F.
	EndIf
EndIf

Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A110ComView³ Autor ³Alexandre Inacio Lemes³ Data ³11/08/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Cria uma tela de consulta de historico dos produtos        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ MATA110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110ComView()

Local nPosCod	:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_PRODUTO"})

If !AtIsRotina("MACOMVIEW")
	If !Empty(aCols[n][nPosCod])
		MaComView(aCols[n][nPosCod])
	EndIf
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110IndSC6³ Autor ³Rodrigo de A Sartorio  ³ Data ³18.10.2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³VerIfica a existencia do indice 9 no arquivo SC6            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Logico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß*/
Function A110IndSC6()
Local cSixChave := ""
Local aArea:=GetArea()
Local aAreaSIX:=SIX->(GetArea())
Local lRet:=.F.
dbSelectArea("SIX")
MsSeek("SC6")
Do While (INDICE == "SC6") .and. !Eof()
   cSixChave := AllTrim(CHAVE)
   If SIX->ORDEM == "9" .And. cSixChave == "C6_FILIAL+C6_NUMSC+C6_ITEMSC"
      lRet:=.T.
      Exit
   EndIf
   dbSkip()
EndDo
RestArea(aAreaSIX)
RestArea(aArea)
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Programa  ³MenuDef   ³ Autor ³ Fabio Alves Silva     ³ Data ³06/11/2006³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Utilizacao de menu Funcional                               ³±±
±±³          ³                                                            ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Array com opcoes da rotina.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Parametros do array a Rotina:                               ³±±
±±³          ³1. Nome a aparecer no cabecalho                             ³±±
±±³          ³2. Nome da Rotina associada                                 ³±±
±±³          ³3. Reservado                                                ³±±
±±³          ³4. Tipo de Transa‡„o a ser efetuada:                        ³±±
±±³          ³	  1 - Pesquisa e Posiciona em um Banco de Dados           ³±±
±±³          ³    2 - Simplesmente Mostra os Campos                       ³±±
±±³          ³    3 - Inclui registros no Bancos de Dados                 ³±±
±±³          ³    4 - Altera o registro corrente                          ³±±
±±³          ³    5 - Remove o registro corrente do Banco de Dados        ³±±
±±³          ³5. Nivel de acesso                                          ³±±
±±³          ³6. Habilita Menu Funcional                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao efetuada                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Static Function MenuDef()
Local lGspInUseM 	:= If(Type('lGspInUse')=='L', lGspInUse, .F.)
local lSCCNI		:= SuperGetMV("MV_SCLCNI",.F.,.F.)

PRIVATE aRotina	:= {}

// ALTERADO PARA SIGAGSP
aAdd(aRotina, {OemToAnsi(STR0006),"PesqBrw"    , 0 , 1, 0, .F.})		//"Pesquisar"
aAdd(aRotina, {OemToAnsi(STR0007),"A110Visual" , 0 , 2, 0, nil})		//"Visualizar"
aAdd(aRotina, {OemToAnsi(STR0008),"A110Inclui" , 0 , 3, 113, nil})		//"Incluir"
aAdd(aRotina, {OemToAnsi(STR0009),"A110Altera" , 0 , 4, 4, nil}) 	//"Alterar"
aAdd(aRotina, {OemToAnsi(STR0022),"A110Impri"  , 0 , 4, 0, nil})		//"Imprimir"
aAdd(aRotina, {OemToAnsi(STR0010),"A110Deleta" , 0 , 5, 5, nil})	   //"Excluir"

If !lSCCNI .And. !lGspInUseM
	aAdd(aRotina, {OemToAnsi(STR0032),"A110Aprov"  , 0 , 7, 0, nil})	//"Aprovacao"
EndIf    

aAdd(aRotina, {OemToAnsi(STR0036),"A110Copia"  , 0 , 9, 113, nil})		//"Copia"
aAdd(aRotina, {OemToAnsi(STR0023),"A110Legenda", 0 , 2, 0, .F.})		//"Legenda"
aAdd(aRotina, {OemToAnsi(STR0049),"A110Cancela", 0 , 6, 0, nil})		//"Cancelamento SCs"
If !__lPyme
	AAdd( aRotina, {OemToAnsi(STR0061), "MsDocument", 0, 4, 0, nil} )	//"Conhecimento"
EndIf
                      
if lSCCNI
	aAdd(aRotina, {OemToAnsi("Gera Contrato"),"A110GeraGCT", 0 , 6, 0, nil})		//"Gera Contrato" 
	aAdd(aRotina, {OemToAnsi("Exclui Contrato"),"A110ExclGCT", 0 , 6, 0, nil})		//"Exclui Contrato"		 
	aAdd(aRotina, {"Classificar","A110Classif",0,4,4,Nil})
EndIf

If(GetNewPar("MV_HABLOG",.F.))	
	aAdd(aRotina, {OemToAnsi("Log dos Processos"),"COMA100" , 0 , 2, 0, nil})			//"Log Historico"
EndIf

aAdd(aRotina, {STR0096,"MAComCent", 0 , 6, 0, nil})		//"Compra Centralizada"

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de entrada utilizado para inserir novas opcoes no array aRotina  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MTA110MNU")
	ExecBlock("MTA110MNU",.F.,.F.)
EndIf
Return(aRotina)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ A110QtdGra ³ Autor ³ Marcelo Iuspa       ³ Data ³ 15/01/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Faz tratamento de grade na digitacao de quantidades        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum (Le variaveis de memoria - ReadVar)                 ³±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±³Retorno   ³ True ou False (caso seja opcao de visualizacao)            ³±± 
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±³ Uso      ³ Em validacoes de campos que receberao tratamento para      ³±±
±±º          ³ edicao via grade (Ex.: C1_QUANT, C1_DATPRF) exibe a        º±±
±±º          ³ grade de produtos permitindo digitacao dos dados           º±±
±±º          ³                                                            º±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110QtdGra()
Local nPProduto := aScan(aHeader,{|x| AllTrim(x[2])=="C1_PRODUTO"})
Local nPQtdCom  := aScan(aHeader,{|x| AllTrim(x[2])=="C1_QUANT"  })
Local nPQtdCom2 := aScan(aHeader,{|x| AllTrim(x[2])=="C1_QTSEGUM"})
Local cCpoName	:= StrTran(ReadVar(),"M->","")

lGatilha := If(ValType(lGatilha) == "L",lGatilha,.T.) // .T.=Permite preencher aCols /  .F.=Executando via VldHead()  

If lGatilha .And. lGrade .And. !Empty(aCols[n][nPProduto])
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Arrays auxiliares para armazenar a getdados principal³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	oGrade:cProdRef	:= aCols[n][nPProduto]
	oGrade:nPosLinO	:= n
	If oGrade:Show(cCpoName)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza a quantidade do acols original                                 ³
		//³ATENCAO: a variavel nQtdInformada foi alimentada dentro do objeto com   ³
		//³         ReadVar(), mas o programador pode alimentala quando desejar.   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DO CASE
			//POSICIONADO NA QUANTIDADE VENDIDA
			CASE "C1_QUANT" $ cCpoName
				oGrade:nQtdInformada:=oGrade:SomaGrade("C1_QUANT",oGrade:nPosLinO,oGrade:nQtdInformada)
				aCols[n][nPQtdCom]	:= oGrade:nQtdInformada
				M->C1_QUANT	        := oGrade:nQtdInformada

				If ( nPQtdCom2 > 0 )
					oGrade:nQtdInformada := 0
					oGrade:nQtdInformada := oGrade:SomaGrade("C1_QTSEGUM",oGrade:nPosLinO,oGrade:nQtdInformada)
					//A410MultT("C6_UNSVEN",oGrade:nQtdInformada)
					aCols[n][nPQtdCom2] := oGrade:nQtdInformada
					M->C1_QTSEGUM       := oGrade:nQtdInformada
				EndIf
                         
				M->C1_DATPRF:=DDATABASE
			CASE "C1_QTSEGUM" $ cCpoName 
		   			oGrade:nQtdInformada:=oGrade:SomaGrade("C1_QTSEGUM",oGrade:nPosLinO,oGrade:nQtdInformada)
					aCols[n][nPQtdCom2]	:= oGrade:nQtdInformada
					M->C1_QTSEGUM		:= oGrade:nQtdInformada
					oGrade:nQtdInformada:= 0
					oGrade:nQtdInformada:= oGrade:SomaGrade("C1_QUANT",oGrade:nPosLinO,oGrade:nQtdInformada)
					aCols[n][nPQtdCom]	:= oGrade:nQtdInformada
					M->C1_QUANT		:= oGrade:nQtdInformada
					M->C1_DATPRF:=DDATABASE
		END CASE
	EndIf
EndIf
Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ A110GValid ³ Autor ³ Marcelo Iuspa       ³ Data ³ 15/01/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Validacao na digitacao das quantidades na grade            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum (Le variaveis mp objeto grade)                      ³±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±³ Uso      ³ Executada pelo objeto grade apos preenchimento de campo    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110GValid()
Local lRet := .T.
Local uReadVar := &(ReadVar())
Local cProduto   := PAD(ograde:GetNameProd(ograde:cprodref,ograde:ogetdados:obrowse:nat,ograde:ogetdados:obrowse:ncolpos),Len(SC1->C1_PRODUTO))
Local cRestSol   := SuperGetMv("MV_RESTSOL",.F.,"N")

dbSelectArea("SB1")
dbSetOrder(1)
MsSeek(xFilial("SB1")+cProduto)

cDescri := SB1->B1_DESC
Do Case
	Case !SB1->(Found())
		lRet := .F.
		Help(" ",1,"C1_PRODUTO")
	Case SB1->B1_CONTRAT == "S"
		lRet := .F.
		Help(" ",1,"A110CONTR")
	Case SB1->B1_SOLICIT =="S" .And. cRestSol == "S" .And. !A110Restr(cProduto,UsrRetGrp(),RetCodUsr())
		lRet := .F.
EndCase

If lRet
	If oGrade:cCpo == "C1_DATPRF"
		nLinha    := oGrade:oGetdados:oBrowse:Nat
		nColuna := oGrade:oGetdados:oBrowse:nColpos
		nposQuant:=aScan(ograde:acposCtrlGrd,{|x| AllTrim(x[1])=="C1_QUANT"})
		nqtd:=oGrade:aColsGrade[oGrade:nPosLinO, nlinha, ncoluna, nposQuant]
		If nQtd==0
			lRet:=.F.
			Help(' ',1,'A120DATPRF')
		Else
			lRet := A110DtNec()
		EndIf
	ElseIf oGrade:cCpo $ "C1_QUANT/C1_QTSEGUM"
		nLinha    := oGrade:oGetdados:oBrowse:Nat
		nColuna := oGrade:oGetdados:oBrowse:nColpos
		nposDatPrf:=aScan(ograde:acposCtrlGrd,{|x| AllTrim(x[1])=="C1_DATPRF"})
		nposQuant:=aScan(ograde:acposCtrlGrd,{|x| AllTrim(x[1])=="C1_QUANT"})
		
		If Empty(uReadVar)
			oGrade:aColsGrade[oGrade:nPosLinO, nlinha, ncoluna, nposDatPrf] := Ctod("")
		ElseIf Empty(oGrade:aColsGrade[oGrade:nPosLinO, nlinha, ncoluna, nposDatPrf])
			oGrade:aColsGrade[oGrade:nPosLinO, nlinha, ncoluna, nposDatPrf] := CriaVar("C1_DATPRF", .T.)
		EndIf
		If oGrade:cCpo $"C1_QTSEGUM"
		
			oGrade:aColsGrade[oGrade:nPosLinO][nlinha][ncoluna][nposQuant]:= ConvUM(cProduto,0,&(ReadVar()),1)
		
		Endif
	
	EndIf 
	
Endif
Return(lRet)


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Ma110GraGr³ Autor ³Marcelo Iuspa          ³ Data ³15.12.06  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao compatibiliza o acols da grade de produtos com  ³±±
±±³          ³o acols original da solicit. compras assim nao eh necessario³±±
±±³          ³qualquer modIficacao na funcao de gravacao da Solicitacao   ³±±
±±³          ³de Compra                                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum  (Usa e atualiza direto o array private aCols)       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpL1  (Define se chamado para gravação .T. ou não .F.      ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Author  ³ BOPS  ³ Manutencao Efetuada                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ma110GraGr()

Local aColsOrig:= aClone(aCols)  //aCols Original
Local nMaxFor  := Len(aColsOrig)
Local nCntFor  := 0     // Contador
Local nPProduto:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_PRODUTO"})
Local nPItem   := aScan(aHeader,{|x| AllTrim(x[2])=="C1_ITEM"})
Local nPItGrade:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_ITEMGRD"})
Local nPQtdVen := aScan(aHeader,{|x| AllTrim(x[2])=="C1_QUANT"})
Local nPQtdVen2:= aScan(aHeader,{|x| AllTrim(x[2])=="C1_QTSEGUM"})
Local nPDatPrf := aScan(aHeader,{|x| AllTrim(x[2])=="C1_DATPRF"})
Local nPGrade  := aScan(aHeader,{|x| AllTrim(x[2])=="C1_GRADE"})
Local nLinha   := 0     // Contador de Linhas
Local nColuna  := 0     // Contador de Colunas
Local nAcols   := 0     // Numero de Elementos do Acols
Local cProdRef := ""    // Codigo do Produto Grade
Local cItem    := "00"  // Controle de Itens do Pedido de Venda
Local aRet     :={} 
Local lTestaDel:= Nil

If MaGrade() .And. Type("oGrade")=="O" .And. Len(oGrade:aColsGrade)>0
	lTestaDel:= If(Len(aColsOrig[1])==Len(aHeader),.F.,.T.)
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Inicializa o Acols para posterior atualizacao                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aCols := {}
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Varre o acols original para atualizar a variavel aCols                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	For nCntFor := 1 To nMaxFor
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Atualiza o Controle de Itens do Pedido de Venda e da Grade              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		cItem    := aColsOrig[nCntFor][nPitem]
		cItemGrd := "000"
		cProdRef := aColsOrig[nCntFor][nPProduto]
		If ( !Empty(cProdRef) )
			oGrade:nPosLinO := nCntFor
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Verifica se foi digitado uma referencia                                 ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If ( Len(oGrade:aHeadGrade)>0 .And. oGrade:aHeadGrade[nCntFor][1] == "R" ) .And. aColsOrig[nCntFor, nPGrade]  == "S"
				For nLinha := 1 To Len(oGrade:aColsGrade[nCntFor])
					For nColuna := 2 To Len(oGrade:aHeadGrade[nCntFor])
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³Verifica se ha valor a ser gravado                                      ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If ( oGrade:aColsFieldByName("C1_QUANT",nCntFor,nLinha,nColuna) <> 0 .And.;
								If(lTestaDel,!aColsOrig[nCntFor][Len(aHeader)+1],.T.) )
							cItemGrd := Soma1(cItemGrd,Len(SC1->C1_ITEMGRD))
							cProdRef := aColsOrig[nCntFor][nPProduto]
							MatGrdPrRf(@cProdRef)
							cProdRef := oGrade:GetNameProd(cProdRef,nLinha,nColuna)
							
							aadd(aCols,aClone(aColsOrig[nCntFor]))
							nAcols := Len(aCols)
							aCols[nAcols][nPProduto ]  := PadR(cProdRef,Len(SB1->B1_COD))
							aCols[nAcols][nPItem    ]  := cItem
							If ( nPItGrade <> 0 )
								aCols[nAcols][nPItGrade ]  := cItemGrd
							EndIf
							If ( nPQtdVen <> 0 )
								aCols[nAcols][nPQtdVen  ]  := oGrade:aColsFieldByName("C1_QUANT",nCntFor,nLinha,nColuna)
							EndIf
							If ( nPQtdVen2 <> 0 )
								aCols[nAcols][nPQtdVen2 ]  := oGrade:aColsFieldByName("C1_QTSEGUM",nCntFor,nLinha,nColuna)
							EndIf
							If  ( nPGrade <>  0 )
								aCols[nAcols][nPGrade   ]  := "S"
							EndIf
							If  ( nPDatPrf <> 0 )
								aCols[nAcols][nPDatPrf  ]  := oGrade:aColsFieldByName("C1_DATPRF",nCntFor,nLinha,nColuna)
							EndIf	
					
						Else
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Verifica se o item ja foi gravado para deleta-lo                        ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							If ( !Empty(oGrade:aColsFieldByName("C1_ITEM",nCntFor,nLinha,nColuna)) )
								cProdRef := aColsOrig[nCntFor][nPProduto]
								cItemGrd := Soma1(cItemGrd,Len(SC1->C1_ITEMGRD))
								MatGrdPrRf(@cProdRef)
								cProdRef := oGrade:GetNameProd(cProdRef,nLinha,nColuna)
								
								aadd(aCols,aClone(aColsOrig[nCntFor]))
								nAcols := Len(aCols)
								aCols[nAcols][nPProduto ]  := PadR(cProdRef,Len(SB1->B1_COD))
								aCols[nAcols][nPItem    ]  := cItem
								If ( nPItGrade <> 0 )
									aCols[nAcols][nPItGrade ]  := cItemGrd
								EndIf
								If ( nPQtdVen <> 0 )
									aCols[nAcols][nPQtdVen  ]  := oGrade:aColsFieldByName("C1_QUANT",nCntFor,nLinha,nColuna)
								EndIf
								If  ( nPGrade <>  0 )
									aCols[nAcols][nPGrade   ]  := "S"
								EndIf
								aCols[nAcols][Len(aHeader)+1] := .T. 
							
							EndIf
						EndIf
					Next nColuna
				Next nLinha
			Else 
				aadd(aCols,aClone(aColsOrig[nCntFor]))
				nAcols := Len(aCols)
				aCols[nAcols][nPItem    ]  := cItem
			EndIf
		EndIf
	Next nCntFor
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Ordena o aCols                                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	aCols       := aSort(aCols,,,{|x,y| x[nPItem]+x[nPItGrade] < y[nPItem]+y[nPItGrade] })

	oGrade:aColsGrade  := {}
	oGrade:aHeadGrade  := {}

EndIf

Return(aRet)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A110AfterH ³ Autor ³Nereu Humberto Junior ³Autor ³12/04/2007³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Acrescenta campos no aHeader construido pela FillGetDados   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = aHeader de Referencia utilizado na FillGetDados    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110AfterH(aHeaderX)

Local aAreaSX3 := SX3->(GetArea())
Local nPosLeg	:= 0

If (nPosLeg := Ascan(aHeaderX,{|x| Alltrim(x[2])=="C1_TIPCLEG"}))>0
	aHeaderX[nPosLeg][1]:= " "
Endif

RestArea(aAreaSX3)

Return
       
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³Ma110ValGr³ Autor ³Patricia Duca          ³ Data ³20.06.06  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao compatibiliza o acols da grade de produtos      ³±±
±±³          ³para verificar se foram digitados itens na grade            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±³          ³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Author  ³ BOPS  ³ Manutencao Efetuada                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function Ma110ValGr()

Local nPProduto := aScan(aHeader,{|x| AllTrim(x[2])=="C1_PRODUTO"})
Local nPItem    := aScan(aHeader,{|x| AllTrim(x[2])=="C1_ITEM"})
Local nPGrade   := aScan(aHeader,{|x| AllTrim(x[2])=="C1_GRADE"})
Local nLinha    := 0     // Contador de Linhas
Local nColuna   := 0     // Contador de Colunas
Local cProdRef  := ""    // Codigo do Produto Grade                 0
Local cItem     := "00"  // Controle de Itens do Pedido de Compra
Local aRet      := {}
Local lTestaDel:= If(Len(aCols[1])==Len(aHeader),.F.,.T.)

If MaGrade() .And. Type("oGrade")=="O" .And. Len(oGrade:aColsGrade)>0
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Atualiza o Controle de Itens do Pedido de Venda e da Grade              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cItem    := aCols[n][nPitem] 
	cItemGrd := "000"
	cProdRef := aCols[n][nPProduto]
	If ( !Empty(cProdRef) )
		
		oGrade:nPosLinO := n
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³Verifica se foi digitado uma referencia                                 ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If ( Len(oGrade:aHeadGrade)>0 .And. oGrade:aHeadGrade[n][1] == "R" ) .And. aCols[n, nPGrade]  == "S"
			For nLinha := 1 To Len(oGrade:aColsGrade[n])
				For nColuna := 2 To Len(oGrade:aHeadGrade[n])
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Verifica se ha valor a ser gravado                                      ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If ( oGrade:aColsFieldByName("C1_QUANT",n,nLinha,nColuna) <> 0) .And. If(lTestaDel,!aCols[n][Len(aHeader)+1],.T.)
				
						cProdRef := aCols[n][nPProduto]
					
						If !Empty(cProdRef)
							aRet    := {cProdRef}
							Exit
						EndIf
					Endif          
				Next nColuna
			Next nLinha
		Endif
	Endif
EndIf

Return(aRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³A110UsrDru ³ Autor ³Felipe Nunes de Toledo³ Data ³ 18/10/07 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Retorna o Cod. do Usuario informado no param. MV_SOLIDRU.  ³±±
±±³			 ³ Parametro utilizado para informar o Nome do Usuario a ser  ³±±
±±³			 ³ considerado na geracao de SCs atraves da integracao com    ³±±
±±³			 ³ o Drummer Aps.                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ COM/PCP                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110UsrDru(cUser)
Local lApsDrummer:= SuperGetMv("MV_APS",.F.,"")=="DRUMMER"
Local cSoliDru   := AllTrim(SuperGetMv("MV_SOLIDRU",.F.,""))
Local cCodUser   := ""

If lApsDrummer .And. Empty(cUser) .And. !Empty(cSoliDru)
	PswOrder(2)
	If PswSeek(cSoliDru)
		cCodUser := PswRet(1)[1][1]
	EndIf
	If !Empty(cCodUser)
		cUser := cCodUser
	EndIf
EndIf

Return(cUser)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³a110When   ³ Autor ³Aline Sebrian Damasceno³ Data ³22/05/08  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Ajusta validação do campo c1_filent                         ³±±
±±³			 ³                                                             ³±±
±±³			 ³                                                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ COM                                                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/ 
Static Function a110When()   
local lSCCNI		:= SuperGetMV("MV_SCLCNI",.F.,.F.)
Local lPcFilEnt     := SuperGetMv("MV_PCFILEN",.F.,.T.)
Local lRet          := VisualSX3("C1_FILENT") .And. lPcFilEnt .And. FWModeAccess("SC7") == "E" //!Empty(xFilial("SC7")) 
Local lMT110WHEN	:= ExistBlock('MT110WHEN')
     
if lSCCNI
	lRet := VisualSX3("C1_FILENT") .And. lPcFilEnt .And. !Empty(xFilial("SC7")) 
EndIf

If lMT110WHEN
   lRet := ExecBlock('MT110WHEN', .F., .F.)
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³a110DtVld  ³ Autor ³Aline Sebrian Damasceno³ Data ³06/11/08  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Valida o campo c1_emissao			                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ COM                                                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/  

Static Function a110DtVld(nOpcx,lCopia)   
Local lRet          := .T.
Local lMT110DTV     := .T.  
  
If ExistBlock("MT110DTV")
	lMT110DTV := Execblock("MT110DTV",.F.,.F.,{nOpcx,lCopia})
	If ValType(lMT110DTV) == "L" .And. !lMT110DTV
		lRet := .F.
	EndIf 
EndIf  

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ PutByAPS ºAutor  ³ Andre Anjos		 º Data ³  09/11/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Retorna se eh inclusao pelo APS.                           º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA110                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PutByAPS()
Return Type("l110Auto") == "L" .And. l110Auto .And. SuperGetMV("MV_APS",.F.,"") == "TOTVS" .And.;
			 !Empty(ProcH('C1_SOLICIT')) .And. AllTrim(aAutoCab[ProcH('C1_SOLICIT'),2]) == "TOTVS APS"
			 
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³__MYEDIT  ³ Autor ³Allyson Freitas        ³ Data ³08.02.12  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao faz com que a validacao de permissao seja       ³±±
±±³          ³executada antes da alteracao dos campos                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³Nenhum                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   OBS    ³***** NAO ALTERAR ESSA FUNCAO ******                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function __MYEDIT(a,b,c,d,e,g,oGet)
Local xRet		:= NIL
Local cFieldSC1 := ReadVar()
Local cFieldEdit:= SubStr(cFieldSC1,4,Len(cFieldSC1))
Local nPProduto := aScan(aHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local lRet := .T.

cFieldSC1	:= ReadVar()
cFieldEdit	:= SubStr(cFieldSC1,4,Len(cFieldSC1))

If Altera
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica se o usuario tem permissao de alteracao. ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If cFieldEdit $ "C1_PRODUTO"
		
			If !(lRet := MaAvalPerm(1,{cCampo,"MTA110",5}) .And. MaAvalPerm(1,{aCols[n][nPProduto],"MTA110",3}))
				Help(,,1,'SEMPERM')
			EndIf
		
	Else
		
			If !(lRet := MaAvalPerm(1,{aCols[n][nPProduto],"MTA110",4}))
				Help(,,1,'SEMPERM')
			EndIf
		
	EndIf
EndIf

If lRet
	d:Cargo := "N"
	xRet := lEditCol(a,b,c,d,e,g)
	d:Cargo :={|a,b,c,d,e,g| __MYEDIT(a,b,c,d,e,g,oGet)}
Endif  
Return xRet
 
// 05/05/2011 - Funcao de Validacao do Campo C1_XTIPOSC           
/*/
______________________________________________________________________________
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦Funcao    ¦  CM060VL3    ¦ Autor ¦ Bruna Paola       ¦ Data ¦ 02/05/11  ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Descricao ¦ Funcao de validacao do campo C1_XTIPOSC.					   ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Uso       ¦ Exclusivo TOTVS.								   			   ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
/*/  
Function CM060VL3(cTipoSC)

Local cChave 	:= "" 
Local cQuery 	:= ""
Local cNum   	:= ""
Local nControle := 0
Local cMsg		:= ""
Local lParam	:= SuperGetMV("MV_SEQESP",.F.,.F.)
Local cTpAx  	:= SuperGetMV("MV_TPSCAX")
Local cTpCt 	:= SuperGetMV("MV_TPSCCT")
local lSCCNI	:= SuperGetMV("MV_SCLCNI",.F.,.F.)

If lSCCNI
	cDescTp  :=  POSICIONE("COL",1,XFILIAL("COL")+cTipoSC,"COL_DESC")
Else
	cDescTp  :=  POSICIONE("COL",1,XFILIAL("COL")+M->C1_XTIPOSC,"COL_DESC") 
	M->C1_XTPDESC := POSICIONE("COL",1,XFILIAL("COL")+M->C1_XTIPOSC,"COL_DESC")
EndIf

If lParam
	DbSelectArea("COE")
	DbSetOrder(2)  //PA1_FILIAL+PA1_DOC
                   
	// Verifica se existe range cadastrado para o tipo de documento escolhido
	If !( DbSeek(xFilial("COE")+cTipoSC) )   

		MsgAlert(STR0134+;
		STR0135,STR0136)
		
		Return (.F.)	
	EndIf

	// Procura qual o ultimo numero usado no C1_NUM para esse tipo de documento selecionado
	cQuery  := "  SELECT MAX(C1_NUM) AS C1_NUM"
	cQuery  += "  FROM " + RetSQLName('SC1') + " SC1 " 
	cQuery  += "  WHERE C1_XTIPOSC = " + ValToSQL(cTipoSC) + "AND"
	cQuery  += "  D_E_L_E_T_ = ' ' "

	cQuery := ChangeQuery(cQuery) 

	DbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),"TEMP",.T.,.T.)

	DbSelectArea("TEMP")  

	// Incrementar 1 no C1_NUM encontrado 
	If ( Empty(C1_NUM) ) // Primeiro registro de SC do tipo de documento escolhido
		cNum := COE->COE_INICIO
	Else
		cNum := Soma1(C1_NUM)
	EndIf

	TEMP->( DbCloseArea() )
EndIf          

DbSelectArea("COL")
COL->(DbSetOrder(1)) 
// Verifica se existe codigo cadastrado para o tipo de documento escolhido     
If cTipoSC == cTpAx 
	If !( DbSeek(xFilial("COL")+cTpAx) )   
	    
		cTipoSC := ''
		MsgAlert(STR0137,STR0136)
		
		Return (.F.)	
	EndIf  

Elseif cTipoSC == cTpCt
	// Verifica se existe codigo cadastrado para o tipo de documento escolhido
	If !( DbSeek(xFilial("COL")+cTpCt) )   
	    
		cTipoSC := ''
		MsgAlert(STR0138,STR0136)
		
		Return (.F.)	
	EndIf  
Endif

If lParam
	DbSelectArea("COE")
	DbSetOrder(2)  //COE_FILIAL+COE_DOC 
	DbSeek(xFilial("COE")+cTipoSC)

	cChave := xFilial("COE")+cTipoSC 
		
	Do While !( Eof() ) .And. ( xFilial("COE")+COE->COE_DOC == cChave ) // Verifica somente os ranges do tipo de documento escolhido

		If (cNum >= COE->COE_INICIO).And.(cNum <= COE->COE_FINAL) // Verifica se o numero pertence a algum range definido      
		nControle := 1 
		Exit
		ElseIf (cNum < COE->COE_INICIO) // Primeiro num do intervalo cadastrado  
			cNum := COE->COE_INICIO
			nControle := 1
			Exit
		EndIf      

		DbSkip()
	EndDo     
		
	// Nao existe intervalo cadastrado para o tipo de documento(acabou o range dos cadastrados)
	If (nControle == 0)
			
		cMsg := STR0139
		
		MsgAlert(cMsg,STR0136)
		
		Return (.F.)
	EndIf    
Endif

// Atribui ao objeto Num da SC o valor definido pelo tipo de documento.   
DbSelectArea("SC1")    
cA110Num := cNum

Return (.T.) 

// 05/05/2011 - Funcao de Validacao do Campo C1_NUM
/*/
______________________________________________________________________________
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¦¦+------------------------------------------------------------------------+¦¦
¦¦¦Funcao    ¦  CM060VL4    ¦ Autor ¦ Bruna Paola       ¦ Data ¦ 03/05/11  ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Descricao ¦ Funcao de validacao do campo C1_NUM.						   ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦Uso       ¦ Exclusivo TOTVS.								   			   ¦¦¦
¦¦+----------+-------------------------------------------------------------¦¦¦
¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
/*/  
Function CM060VL4()  

Local nControle := 0
Local cChave 	:= ""
Local cTipoSC	:= cTpSC
Local lParam	:= GETMV("MV_SEQESP")

If (Empty(cTipoSC) .Or. (lParam != .T.))
	Return (.T.)
EndIf

DbSelectArea("COE")
DbSetOrder(2)  //COE_FILIAL+COE_DOC 
DbSeek(xFilial("COE")+cTipoSC)

cChave := xFilial("COE")+cTipoSC 
	
Do While !( Eof() ) .And. ( xFilial("COE")+COE->COE_DOC == cChave ) // Verifica somente os ranges do tipo de documento escolhido

	If (cA110Num >= COE->COE_INICIO).And.(cA110Num <= COE->COE_FINAL) // Verifica se o numero pertence a algum range definido      
       nControle := 1 
       Exit
 	EndIf
 	
 	DbSkip()
EndDo

If (nControle == 0)
	MsgStop(STR0140,STR0136)
   	Return (.F.)
EndIf

Return (.T.)          

    
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³CM060VL5  ºAutor  ³FSW                 º Data ³  06/07/11   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³VALIDACAO CAMPO C1_CONTA                                    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ FSW                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function CM060VL5(cConta)
            
If Left(cConta,2) <> Left(cCCusto,2)
     Alert(STR0141)
     Return(.F.)
Endif

Return (.T.)        

                                                                      
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ A110GeraGCT³ Autor ³ FSW                 ³ Data ³ 10/05/11 ³±±
±± Caio.Santos - FSW - 05/04/2012 - Recodificacao da funcao				   ±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Gera um contrato da SC                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum (Le variaveis mp objeto grade)                      ³±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±³ Uso      ³ TOTVS                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110GeraGCT()
Local cParSc 	:= GETMV("MV_TPSCCT")//Tipo da SC
Local lLog 		:= GetNewPar("MV_HABLOG",.F.)
Local cContrato := ""
Local cItem 	:= ""
Local cTipPla	:= ''
Local oModel300 := Nil

Local dDataIni  := SToD ("") 
Local dDataFim  := SToD ("") 
Local cVige     := ""
Local cUnVige   := ""
Local cCondPg   := ""
Local cTpCto    := ""
Local cIndice   := ""
Local cFlgRej   := ""
Local cFlgCau   := ""
Local nMoeda    := 0
Local cCtOrigem := ""
Local cRevOri   := ""
Local lVLFUTU	:= CNB->(FieldPos("CNB_VLFUTU")) > 0
Local lFilSC	:= CNB->(FieldPos("CNB_FILSC")) > 0
Local aCTBEnt	:= CTBEntArr()
Local nCount	:= 0
Local SC1TMP 	:= GetNextAlias()
Local CNCTMP	:= GetNextAlias()
Local CNNTMP	:= GetNextAlias()
Local nGravou	:= 1
Local lRet 		:= .F.
Local lCtrFixo	:= .T.

If SC1->(FieldPos("C1_XTIPOSC")) > 0 .and.;
   SC1->(FieldPos("C1_XNUMCT")) > 0 .and.;
   SC1->(FieldPos("C1_XSTGCT")) > 0 

	oModel300 := FWLoadModel( "CNTA300" )
	oModel300:SetOperation(3)                                 
	oModel300:Activate()

	oCN9Master := oModel300:GetModel('CN9MASTER')
	oCNADetail := oModel300:GetModel('CNADETAIL')
	oCNBDetail := oModel300:GetModel('CNBDETAIL')
	oCNCDetail := oModel300:GetModel('CNCDETAIL')
	oCNNDetail := oModel300:GetModel('CNNDETAIL')
	oCNZDetail := oModel300:GetModel('CNZDETAIL')

	If(SC1->C1_XTIPOSC != cParSc)		
		Help("",1,STR0021,,STR0142,4,1)	
	ElseIf(Empty(SC1->C1_XNUMCT))		
		Help("",1,STR0021,,STR0143,4,1)
	ElseIf(!CN9->(dbSeek(xFilial("CN9")+SC1->(C1_XNUMCT+C1_XNUMREV))))
		Help("",1,STR0021,,STR0146,4,1)
	ElseIf(SC1->C1_XSTGCT == "1")
		Help("",1,STR0021,,STR0144,4,1)		
	ElseIf SC1->C1_APROV == "B"//SC bloqueada.
		Help("",1,STR0021,,STR0145,4,1)
	Else
		CN9->(dbSetOrder(1))//CN9_FILIAL+CN9_NUMERO+CN9_REVISA
		CNA->(dbSetOrder(1))//CNA_FILIAL+CNA_CONTRA+CNA_REVISA+CNA_NUMERO
		CNB->(dbSetOrder(1))//CNB_FILIAL+CNB_CONTRA+CNB_REVISA+CNB_NUMERO+CNB_ITEM
		CNC->(dbSetOrder(1))//CNC_FILIAL+CNC_NUMERO+CNC_CODIGO+CNC_LOJA
		CNN->(dbSetOrder(1))//CNN_FILIAL+CNN_USRCOD+CNN_CONTRA+CNN_TRACOD
		SC1->(dbSetOrder(1))//C1_FILIAL+C1_NUM+C1_ITEM

		cContrato := GetSXENum("CN9","CN9_NUMERO")
	
		CNA->(dbSeek(xFilial("CNA")+SC1->C1_XNUMCT))
		cTipPla := CNA->CNA_TIPPLA

		lCtrFixo   := CN300RetSt("FIXO",0,,CN9->CN9_NUMERO,CN9->CN9_FILCTR,.F.) //Verifica se o contrato referencia e do tipo FIXO

		If lCtrFixo
			While	CNA->(dbSeek(xFilial("CNA")+cContrato)) .Or. ;
					CNB->(dbSeek(xFilial("CNB")+cContrato)) .Or. ;
					CNC->(dbSeek(xFilial("CNC")+cContrato))
					
					cContrato := GetSXENum("CN9","CN9_NUMERO")			
			EndDo
			
			dDataIni  := CN9->CN9_DTINIC
			dDataFim  := CN9->CN9_DTFIM
			cVige     := CN9->CN9_VIGE
			cUnVige   := CN9->CN9_UNVIGE
			cCondPg   := CN9->CN9_CONDPG
			cTpCto    := CN9->CN9_TPCTO
			cIndice   := CN9->CN9_INDICE
			cFlgRej   := CN9->CN9_FLGREJ
			cFlgCau   := CN9->CN9_FLGCAU
			nMoeda    := CN9->CN9_MOEDA
			cCtOrigem := CN9->CN9_NUMERO
			cRevOri   := CN9->CN9_REVISA
			
			//Fornecedores do contrato original
			BeginSQL Alias CNCTMP
				SELECT CNC_NUMERO, CNC_REVISA, CNC_CODIGO, CNC_LOJA
				FROM %Table:CNC% CNC
				WHERE CNC_FILIAL = %xFilial:CNC% AND CNC_NUMERO = %Exp:CN9->CN9_NUMERO% AND CNC.%NotDel%
				GROUP BY CNC_NUMERO, CNC_REVISA, CNC_CODIGO, CNC_LOJA
			EndSQL
			(CNCTMP)->(dbGoTop())
			
			//Usuarios do contrato original
			BeginSQL Alias CNNTMP
				SELECT CNN_CONTRA, CNN_USRCOD, CNN_TRACOD, CNN_GRPCOD
				FROM %Table:CNN% CNN
				WHERE CNN_FILIAL = %xFilial:CNN% AND CNN_CONTRA = %Exp:CN9->CN9_NUMERO% AND CNN.%NotDel%
				GROUP BY CNN_CONTRA, CNN_USRCOD, CNN_TRACOD, CNN_GRPCOD
			EndSQL
			(CNNTMP)->(dbGoTop())

			BeginSQL Alias SC1TMP
				SELECT * 
				FROM %Table:SC1% SC1
				WHERE C1_FILIAL = %xFilial:SC1% AND C1_NUM = %Exp:SC1->C1_NUM% AND SC1.%NotDel%
			EndSQL
			(SC1TMP)->(dbGoTop())
					
			//Novo contrato
			oCN9Master:SetValue('CN9_FILORI',cFilAnt)
			oCN9Master:SetValue('CN9_NUMERO',cContrato)
			oCN9Master:SetValue('CN9_SITUAC',"02")
			oCN9Master:SetValue('CN9_DTINIC',dDataIni)
			oCN9Master:SetValue('CN9_DTFIM',dDataFim)
			oCN9Master:SetValue('CN9_VIGE',cVige)
			oCN9Master:SetValue('CN9_UNVIGE',cUnVige)
			oCN9Master:SetValue('CN9_CONDPG',cCondPg)
			oCN9Master:SetValue('CN9_TPCTO',cTpCto)
			oCN9Master:SetValue('CN9_FLGCAU',cFlgCau)
			oCN9Master:SetValue('CN9_MOEDA',nMoeda)
			If(CN9->(FieldPos("CN9_XSC")) > 0)		
				oCN9Master:SetValue('CN9_XSC',"1")	//Contrato gerado por SC
			EndIf
			
			If(CN9->(FieldPos("CN9_XSCORI")) > 0)
				oCN9Master:SetValue('CN9_XSCORI',SC1->C1_NUM)
			EndIf
			
			If(CN9->(FieldPos("CN9_XCTORI")) > 0)
				oCN9Master:SetValue('CN9_XCTORI',cCtOrigem)
			EndIf
			If(CN9->(FieldPos("CN9_XRVORI")) > 0)
				oCN9Master:SetValue('CN9_XRVORI',cRevOri)
			EndIf
			oCN9Master:SetValue('CN9_ESPCTR',"1") //1=Compra, por se tratar de uma SC
			oCN9Master:SetValue('CN9_FILCTR',FWCodFil()) 
			
			If Select(CNCTMP) > 0
				While !(CNCTMP)->(EOF())
					// Fornecedores novo contrato
					If !Empty( oCNCDetail:GetValue('CNC_CODIGO') )
						oCNCDetail:AddLine()
					EndIf
					oCNCDetail:SetValue('CNC_CODIGO',(CNCTMP)->CNC_CODIGO)
					oCNCDetail:SetValue('CNC_LOJA',(CNCTMP)->CNC_LOJA)

					(CNCTMP)->(dbSkip())
				EndDo		
			EndIf

			(CNCTMP)->(dbGoTop())
			// Planilha novo contrato (so inclui uma)
			If Select(CNCTMP) > 0
				oCNADetail:SetValue('CNA_NUMERO',"000001")
				oCNADetail:SetValue('CNA_FORNEC',(CNCTMP)->CNC_CODIGO)
				oCNADetail:SetValue('CNA_LJFORN',(CNCTMP)->CNC_LOJA)
				oCNADetail:SetValue('CNA_TIPPLA',cTipPla)
				oCNADetail:SetValue('CNA_DTINI',dDataIni)
				oCNADetail:SetValue('CNA_DTFIM',dDataFim)
			EndIf

			cItem	:= Replicate("0", (TamSx3('CNB_ITEM')[1]))
			While !(SC1TMP)->(EOF())
				// Itens planilha novo contrato
				cItem	:= soma1(cItem)

				If !Empty( oCNBDetail:GetValue('CNB_PRODUT') )
					oCNBDetail:AddLine()
					cItem	:= Soma1(cItem)
				EndIf

				oCNBDetail:SetValue('CNB_FILORI',cFilAnt)
				oCNBDetail:SetValue('CNB_NUMERO',"000001")
				If lFilSC
					oCNBDetail:SetValue('CNB_FILSC',(SC1TMP)->C1_FILIAL)
				EndIf
				oCNBDetail:SetValue('CNB_ITEM',cItem) //StrZero(nItem,3))
				oCNBDetail:SetValue('CNB_PRODUT',(SC1TMP)->C1_PRODUTO)
				oCNBDetail:SetValue('CNB_DESCRI',(SC1TMP)->C1_DESCRI)
				oCNBDetail:SetValue('CNB_UM',(SC1TMP)->C1_UM)
				oCNBDetail:SetValue('CNB_QUANT',(SC1TMP)->C1_QUANT)
				oCNBDetail:SetValue('CNB_VLUNIT',(SC1TMP)->C1_VUNIT)
				oCNBDetail:SetValue('CNB_VLTOT',(SC1TMP)->C1_VUNIT * (SC1TMP)->C1_QUANT)
				If lVLFUTU
					oCNBDetail:SetValue('CNB_VLFUTU',(SC1TMP)->C1_VUNIT * (SC1TMP)->C1_QUANT)				
				EndIf
				oCNBDetail:SetValue('CNB_DTCAD',dDataBase)
				oCNBDetail:SetValue('CNB_SLDMED',(SC1TMP)->C1_QUANT)
				oCNBDetail:SetValue('CNB_SLDREC',(SC1TMP)->C1_QUANT)
				oCNBDetail:SetValue('CNB_CONTA',(SC1TMP)->C1_CONTA)
				oCNBDetail:SetValue('CNB_CC',(SC1TMP)->C1_CC)
				oCNBDetail:SetValue('CNB_ITEMCT',(SC1TMP)->C1_ITEMCTA)
				oCNBDetail:SetValue('CNB_CLVL',(SC1TMP)->C1_CLVL)
				oCNBDetail:SetValue('CNB_NUMSC',(SC1TMP)->C1_NUM)
				oCNBDetail:SetValue('CNB_ITEMSC',(SC1TMP)->C1_ITEM)		

				For nCount := 1 To Len(aCTBEnt)
					//-- Adiciona valor nas entidades contabeis
					If CNB->(FieldPos("CNB_EC"+aCTBEnt[nCount]+"CR")) > 0 .And. (SC1TMP)->(FieldPos("C1_EC" +aCTBEnt[nCount] +"CR")) > 0
						oCNBDetail:SetValue("CNB_EC"+aCTBEnt[nCount]+"CR",(SC1TMP)->&("C1_EC" +aCTBEnt[nCount] +"CR"))
					EndIf
					If CNB->(FieldPos("CNB_EC" +aCTBEnt[nCount] +"DB")) > 0 .And. (SC1TMP)->(FieldPos("C1_EC" +aCTBEnt[nCount] +"DB")) > 0
						oCNBDetail:SetValue("CNB_EC" +aCTBEnt[nCount] +"DB",(SC1TMP)->&("C1_EC" +aCTBEnt[nCount] +"DB"))
					EndIf
				Next nCount
									
				(SC1TMP)->(dbSkip())
			EndDo

			While !(CNNTMP)->(EOF())
				//Usuarios novo contrato
				If !CNN->(dbSeek(xFilial("CNN")+(CNNTMP)->CNN_USRCOD+cContrato))
					oCNNDetail:SetValue('CNN_CONTRA',(CNNTMP)->CNN_CONTRA)
					oCNNDetail:SetValue('CNN_USRCOD',(CNNTMP)->CNN_USRCOD)
					oCNNDetail:SetValue('CNN_TRACOD',(CNNTMP)->CNN_TRACOD)
					oCNNDetail:SetValue('CNN_GRPCOD',(CNNTMP)->CNN_GRPCOD)
				EndIf
				
				(CNNTMP)->(dbSkip())
			EndDo

			If(!oModel300:HasErrorMessage())
				If IsBlind()
					lRet := oModel300:VldData() .And. oModel300:CommitData()
				Else
					nGravou := FWExecView (STR0178, "CNTA300", 3,, {||.T.},,,,,,, oModel300)//#"Inclusão via SC"
					lRet := (nGravou == 0)
				EndIf
			Else
				nGravou := 1		
				cErrMsg := oModel300:GetErrorMessage()[5] + "["+ oModel300:GetErrorMessage()[4] + "] - " + oModel300:GetErrorMessage()[6]
				Help("",1,STR0057,,cErrMsg,1,0)
			EndIf

			//Atualiza status da SC
			If lRet
				(SC1TMP)->(dbGoTop())
				While !(SC1TMP)->(EOF())
				
					If SC1->(dbSeek(xFilial("SC1")+(SC1TMP)->(C1_NUM+C1_ITEM)))
				
						//Atualiza itens da SC
						RecLock("SC1",.F.)
										
						If(SC1->(FieldPos("C1_XSTGCT")) > 0)						
							SC1->C1_XSTGCT := "1"	//Contrato gerado
						EndIf					
						If(SC1->(FieldPos("C1_XCTADT")) > 0)
							SC1->C1_XCTADT := CN9->CN9_NUMERO //Numero do contrato gerado
						EndIf
						
						SC1->C1_FLAGGCT	:= "1"	//Contrato gerado
						SC1->C1_QUJE	:= SC1->C1_QUANT //Baixa SC
										
						SC1->(MsUnLock())				
						
						If(lLog)					
							RSTSCLOG("CTR",1,/*cUser*/)				
						EndIf
					EndIf				
					(SC1TMP)->(dbSkip())
				EndDo
			EndIf
				
			oModel300:DeActivate()
			oModel300 := Nil
			
			(CNCTMP)->(dbCloseArea())
			(CNNTMP)->(dbCloseArea())
			(SC1TMP)->(dbCloseArea())
		Else
			Help("",1,STR0177,,STR0147+ CN9->CN9_NUMERO + STR0176,4,1) //#CTRFIXO #Contrato #não é do tipo Fixo 
		EndIf				
	EndIf
Else	
	Help("",1,STR0021,,STR0175,4,1) //STR0175# 'Campos não encontrados pra a geração do contrato'
EndIf

Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao    ³ A110ExclGCT³ Autor ³ FSW                 ³ Data ³ 10/05/11 ³±±
±±³Caio.Santos - FSW - 26/03/2012 - Recodificacao da funcao			  	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Exclui um contrato da SC                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ Nenhum (Le variaveis mp objeto grade)                      ³±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±³ Uso      ³ TOTVS                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110ExclGCT()
	Local aArea		:= GetArea()
	Local aAreaSC1 	:= SC1->(GetArea())
	Local SC1TMP 	:= GetNextAlias()
	Local nGravou	:= 1
	Local lRet		:= .F.

	dbSelectArea("CN9")
	CN9->(dbSetOrder(1))
	If CN9->(dbSeek(xFilial("CN9")+SC1->C1_XCTADT))
	
		If CN9->CN9_SITUAC == "02" .And. CN9->CN9_XSC == "1" .And. CN9->CN9_XSCORI == SC1->C1_NUM .And. Empty(CN9->CN9_REVISA)
	
			If IsBlind()
				oModel300 := FWLoadModel( "CNTA300" )
				oModel300:SetOperation(5)                                 
				oModel300:Activate()

				lRet := oModel300:VldData() .And. oModel300:CommitData()

				oModel300:DeActivate()
				oModel300 := Nil
			Else
				nGravou := FWExecView ("Excluir","CNTA300",5,,{|| .T.}) //Excluir contrato
				lRet := (nGravou == 0)
			EndIf

			//Atualiza status da SC
			If lRet
				BeginSQL Alias SC1TMP
					SELECT C1_NUM, C1_ITEM
					FROM %Table:SC1% SC1
					WHERE C1_FILIAL = %xFilial:SC1% AND C1_XSTGCT = '1' AND C1_XCTADT = %Exp:CN9->CN9_NUMERO% AND SC1.%NotDel%
				EndSQL
				(SC1TMP)->(dbGoTop())
				SC1->(dbSetOrder(1))
				While !(SC1TMP)->(EOF())
					If SC1->(dbSeek(xFilial("SC1")+(SC1TMP)->(C1_NUM+C1_ITEM)))
						RecLock("SC1",.F.)
						SC1->C1_XSTGCT := "2"
						SC1->C1_XCTADT := ""
						SC1->C1_QUJE := 0                                                           					
						RSTSCLOG("CTR",2,/*cUser*/)					
						MsUnlock()
					EndIf
					(SC1TMP)->(dbSkip())
				EndDo
				(SC1TMP)->(dbCloseArea())
			EndIf		
		ElseIf CN9->CN9_SITUAC != "02"
			Help("",1,STR0021,,STR0151,4,1)
		EndIf
				
	EndIf

	RestArea(aArea)
	RestArea(aAreaSC1)
Return(lRet)

//------------------------------------------------------------
// Bloco de Funcoes carregadas do Ponto de Entrada M110STTS
// FWS - 25/05/11
//------------------------------------------------------------

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³M110STTS  ºAutor  ³Microsiga           º Data ³  22/11/10   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MP 11 - PROJETO CNI                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function _f110TotSC(_cNumSC)
Local _cArea   := GetArea()
Local _nRet    := 0
Local _cQuery  := ""
Local _cArqTRB := CriaTrab(nil,.f.)

_cQuery := "SELECT SUM(C1_QUANT*C1_VUNIT) TOTAL FROM "+RetSqlName("SC1")+" WHERE D_E_L_E_T_ = ' ' "
_cQuery += "AND C1_NUM = '"+_cNumSC+"' AND C1_FILIAL = '"+XFilial("SC1")+"' "
_cQuery := ChangeQuery(_cQuery)

dbUseArea(.T.,"TOPCONN",TCGenQry(,,_cQuery),_cArqTRB,.t.,.t.)

_nRet := (_cArqTRB)->TOTAL

(_cArqTRB)->(dbCloseArea())
RestArea(_cArea)
Return(_nRet)                   

Static Function ValGCT(cNumCt, cNumRev)
Local lRet := .F.
Local aArea:= GetArea()               

Default cNumRev := ""
Default cNumCt  := ""

dbSelectArea("CN9")
dbSetOrder(1)
dbSeek(xFilial("CN9")+cNumCt+cNumRev)
While !eof() .and. CN9->CN9_NUMERO == cNumCt

	If CN9->CN9_SITUAC = '05' .Or. CN9->CN9_SITUAC = '09'
		lRet := .T. // Considera contrato escolhido.
	EndIf

	dbSkip()
EndDo

RestArea(aArea)

Return(lRet)

////////////////////////////////////////////////////////////////////////////
//±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±//
//±± Função: A110Classif     Autor: Caio Santos        Data: 02.01.2012 ±±//
//±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±//
//±± Descrição: Valida a classificação das SC's provenientes de SA's    ±±//
//±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±//
//±± Requisito 69 - CNI												    ±±//
//±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±//
////////////////////////////////////////////////////////////////////////////

Function A110Classif()

Local _nTotSC	:= 0
Local SC1TMP 	:= GetNextAlias()

	//Valida se a SC esta com a classificacao pendente
	If SC1->C1_XCLASSI
		
		If (A110Altera("SC1",SC1->(Recno()),4,.F./*lCopia*/,.F./*lWhenGet*/))
		
			BeginSQL Alias SC1TMP
				SELECT C1_NUM, C1_ITEM
				FROM %Table:SC1% SC1
				WHERE C1_FILIAL = %xFilial:SC1% AND C1_NUM = %Exp:SC1->C1_NUM% AND SC1.%NotDel%
			EndSQL
			
			(SC1TMP)->(dbGoTop())
			
			While !(SC1TMP)->(EOF())
			
				If SC1->(dbSeek(xFilial("SC1")+(SC1TMP)->C1_NUM+(SC1TMP)->C1_ITEM))
				
					RecLock("SC1",.F.)
						SC1->C1_XCLASSI := .F.
					MsUnlock()
					
				EndIf
				
				(SC1TMP)->(dbSkip())
				
			EndDo
				
			(SC1TMP)->(dbCloseArea())
				
			If !SC1->C1_XCLASSI
			
				Help("",1,STR0021,,STR0152,4,1)
				
				_nTotSC := _f110TotSC(SC1->C1_NUM)
				MaAlcDoc({SC1->C1_NUM,"SC",_nTotSC,,,SC1->C1_XGRPAPR,,1,1,SC1->C1_EMISSAO},,1)
				
			EndIf
			
		EndIf
			
	Else
	
		Help("",1,STR0021,,STR0153,4,1)
		
	EndIf
	
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ A110RatCC  ³ Autor ³ Rodrigo Toledo	    ³ Data ³ 20/11/2012 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descricao ³ Monta tela de rateio por centro de custo para o item da SC 	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe	 ³ a110RatCC(aHeadSCX,aColsSCX,lAltera)				        	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpA1 = aHeader de Referencia utilizado na FillGetDados      ³±±
±±³			 ³ ExpA2 = aItens de Referencia utilizado na FillGetDados       ³±±
±±³			 ³ ExpL3 = lAltera criado para ser utilizado na FillGetDados    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ SIGACOM													    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function A110RatCC(aHeadSCX,aColsSCX,lAltera)

Local aArea       := GetArea()
Local aSavaRotina := aClone(aRotina)
Local aColsCC     := {}
Local aButtons	  := {}
Local aButtonUsr  := {}
Local aHeadSC1    := {}
Local aColsSC1    := {}
Local aNoFields   := {"CX_FILIAL","CX_CUSTO1","CX_CUSTO2","CX_CUSTO3","CX_CUSTO4","CX_CUSTO5","CX_SOLICIT","CX_ITEMSOL"}
Local bSavKeyF4   := SetKey(VK_F4 ,Nil)
Local bSavKeyF5   := SetKey(VK_F5 ,Nil)
Local bSavKeyF6   := SetKey(VK_F6 ,Nil)
Local bSavKeyF7   := SetKey(VK_F7 ,Nil)
Local bSavKeyF8   := SetKey(VK_F8 ,Nil)
Local bSavKeyF9   := SetKey(VK_F9 ,Nil)
Local bSavKeyF10  := SetKey(VK_F10,Nil)
Local bSavKeyF11  := SetKey(VK_F11,Nil)
Local nPItemNF	  := GDFieldPos("C1_ITEM")
Local nPCC	      := GDFieldPos("C1_CC") 
Local nPConta	  := GDFieldPos("C1_CONTA")
Local nPItemCta   := GDFieldPos("C1_ITEMCTA")
Local nPCLVL	  := GDFieldPos("C1_CLVL")
Local nPDECC	  := 0
Local nPDEConta	  := 0
Local nPDEItemCta := 0
Local nPDECLVL	  := 0
Local nPRateio    := GDFieldPos("C1_RATEIO")
Local nItem  	  := aScan(aColsSCX,{|x| x[1] == aCols[n][nPItemNF]})
Local nX          := 0
Local nSavN       := N
Local nPPercSCX   := 0
Local nTotPerc    := 0
Local nOpcA       := 0
Local lContinua   := .T.
Local oDlg
Local cCampo      := ReadVar()
Local nAviso      := 0
Local oSize
Local lVldRat	:= .F.
Local lAtuRat	:= .T.
Local lErro	:= .F.
Local lHelp	:= .F.
Local nXR		:= 0
Local nYR		:= 0
Local aCampos 	:= {}

DEFAULT aHeadSCX  := {}
DEFAULT aColsSCX  := {}
DEFAULT lAltera   := .T.

Private aOrigHeader := aClone(aHeader)
Private aOrigAcols  := aClone(aCols)
Private oGetMan
Private nOrigN      := N
Private nPercRat    := 0
Private nPercARat	:= 100
Private oPercRat
Private oPercARat
Private oGetDad


If Type("nFAltRat ") == "U"
	Private nFAltRat := 0
Endif

If Type("nFAltRat2") == "U"
	Private nFAltRat2 := 0
Endif

If Type("lGeraSCR") == "U"
	lGeraSCR := SuperGetMv("MV_APROVSC",.F.,.F.)
Endif

If Type("lAlcSolCtb") == "U"
	lAlcSolCtb := SuperGetMv("MV_APRSCEC",.F.,.F.)
Endif

lVldRat	:= lGeraSCR .And. lAlcSolCtb

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ativa os botoes da toolbar                                          ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !__lPyme
	aadd(aButtons,{'AUTOM',{|| AdmRatExt(aHeadSCX,oGetDad:aCols,{ |x,y,z,w| a110CarCC(x,y,@z,w) }) },STR0083,OemToAnsi(STR0120)}) //"Rateio" // 'Escolha de Rateio Pre-Configurado'
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Ponto de Entrada para adicionar Botões na Enchoicebar do Rateio     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("MT110BTR")
	aButtonUsr:=ExecBlock("MT110BTR",.F.,.F.,{aButtons})
	If ValType(aButtonUsr)=="A"
		aButtons:=Aclone(aButtonUsr)
	EndIf
EndIf                                                        


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Impede de executar a rotina quando a tecla F3 estiver ativa	        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Type("InConPad") == "L"
	lContinua := !InConPad
EndIf

If nSavN == 0
	lContinua := .F.
EndIf

If lContinua
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aHeader SCX ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Empty(aHeadSCX)
		dbSelectArea("SX3")
		dbSetOrder(1)
		MsSeek("SCX")
		While !EOF() .And. (SX3->X3_ARQUIVO == "SCX")
			IF X3USO(SX3->X3_USADO) .AND. cNivel >= SX3->X3_NIVEL .And. !"CX_CUSTO"$SX3->X3_CAMPO .and. aScan(aNoFields,{|x| AllTrim(x)==AllTrim(SX3->X3_CAMPO)}) == 0
				AADD(aHeadSCX,{ TRIM(x3Titulo()),;
				SX3->X3_CAMPO,;
				SX3->X3_PICTURE,;
				SX3->X3_TAMANHO,;
				SX3->X3_DECIMAL,;			   
				SX3->X3_VALID,;
				SX3->X3_USADO,;
				SX3->X3_TIPO,;
				SX3->X3_F3,;
			  	SX3->X3_CONTEXT } )
			EndIf
			dbSelectArea("SX3")
			dbSkip()
		EndDo
	EndIf
	
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aCols do SCX ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	
	If nItem > 0
	
		aColsCC := aClone(aColsSCX[nItem][2])
		
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Totaliza o % ja Rateado ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nPercRat := 0
		For nX   := 1  To  Len(aColsCC)
			nPercRat += aColsCC[nX][aScan(aHeadSCX,{|x| AllTrim(x[2])=="CX_PERC"})]
		Next nX
		
		nPercARat := 100 - nPercRat
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ aHeader e aCols do SC1 devem ser salvos pois a FillGetDados destroe ³
		//³ ambos por serem PRIVATE, independente da construcao do aColsCC.     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		aHeadSC1 := aClone(aHeader)
		aColsSC1 := aClone(aCols)
		aHeadSCX := {}
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Sintaxe da FillGetDados(nOpcX,Alias,nOrdem,cSeek,bSeekWhile,uSeekFor,aNoFields,aYesFields,lOnlyYes,cQuery,bMontCols,lEmpty,aHeaderAux,aColsAux,bAfterCols,bBeforeCols,bAfterHeader,cAliasQry |
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		FillGetDados(IIf(lAltera,3,2),"SCX",1,,,,aNoFields,,,,,.T.,aHeadSCX,aColsCC,,,)
		aColsCC[1][aScan(aHeadSCX,{|x| Trim(x[2])=="CX_ITEM"})] := StrZero(1,Len(SCX->CX_ITEM))
		
		aHeader := aHeadSC1
		aCols   := aColsSC1		
	EndIf
	If !(Type('l110Auto') <> 'U' .And. l110Auto) .OR. (Type('lPWhenGet') <> 'U' .And. lPWhenGet)
		If (Type('lPWhenGet') <> 'U' .And. lPWhenGet)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Montagem dos dados da execauto de rateio ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If Type("aRatSC") == "A" .And. Len(aRatSC) > 0
				If Len(aColsSCX) == 0
					aColsSCX  := M110AutRat(aClone(aRatSC),aHeadSCX)
				EndIf
				nItem := aScan(aColsSCX,{|x| x[1] == aCols[n][nPItemNF]})
				If Len(aColsSCX) >= nItem .and. nItem > 0
					aColsCC := aColsSCX[nItem][2]
				EndIf
			Endif
		EndIf
	
		aHeadSC1 := aClone(aHeader)
		aColsSC1 := aClone(aCols)

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta Dialog                                                 ³    
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DEFINE MSDIALOG oDlg FROM 000,000 TO 250,635 TITLE STR0095 Of oMainWnd PIXEL //"Rateio por Centro de Custo"
  
 		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Calcula dimensões                                            ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		oSize := FwDefSize():New(.T.,,,oDlg)              

		oSize:AddObject( "CABECALHO",  100, 10, .T., .T. ) // Totalmente dimensionavel
		oSize:AddObject( "GETDADOS" ,  100, 80, .T., .T. ) // Totalmente dimensionavel 
		oSize:AddObject( "RODAPE"   ,  100, 10, .T., .T. ) // Totalmente dimensionavel
		
		oSize:lProp 	:= .T. // Proporcional             
		oSize:aMargins 	:= { 3, 3, 3, 3 } // Espaco ao lado dos objetos 0, entre eles 3 
		
		oSize:Process() 	   // Dispara os calculos 
		
	 	@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")     SAY STR0087  Of oDlg PIXEL SIZE 56 ,9 //"Documento : "
		@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")+33  SAY cA110Num Of oDlg PIXEL SIZE 29 ,9
		@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")+73  SAY RetTitle("C1_ITEM") Of oDlg PIXEL SIZE 65 ,9 //"Item :"
		@ oSize:GetDimension("CABECALHO","LININI") ,oSize:GetDimension("CABECALHO","COLINI")+112 SAY aCols[N][nPItemNF] Of oDlg PIXEL SIZE 37 ,9
	    
	    oGetDad := MsNewGetDados():New(oSize:GetDimension("GETDADOS","LININI"),oSize:GetDimension("GETDADOS","COLINI"),;
	     							   oSize:GetDimension("GETDADOS","LINEND"),oSize:GetDimension("GETDADOS","COLEND"),;
    									IIF(lAltera,GD_INSERT+GD_UPDATE+GD_DELETE,0),"A110RatLOk","A110RatTOk","+CX_ITEM",,,999,/* - */,/*superdel*/,/*delok*/,oDlg,aHeadSCX,aColsCC)
    	oGetMan := oGetDad
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")     Say STR0088 FONT oDlg:oFont OF oDlg PIXEL	 // "% Rateada: "
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")+40  Say oPercRat VAR nPercRat Picture PesqPict("SCX","CX_PERC") FONT oDlg:oFont COLOR CLR_HBLUE OF oDlg PIXEL
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")+160 Say STR0089 FONT oDlg:oFont OF oDlg PIXEL	 // "% A Ratear: "
		@ oSize:GetDimension("RODAPE","LININI"),oSize:GetDimension("RODAPE","COLINI")+200 Say oPercARat VAR nPercARat Picture PesqPict("SCX","CX_PERC") FONT oDlg:oFont COLOR CLR_HBLUE OF oDlg PIXEL

		ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar(oDlg,{||IIF(oGetDad:TudoOk(),(nOpcA:=1,oDlg:End()),(nOpcA:=0))},{||oDlg:End()},,aButtons)

		If lAltera
			aColsCC := Aclone(oGetDad:aCols)		
		Else
			aHeader := aHeadSC1
			aCols   := aColsSC1
		EndIf
	Else
		nOpcA := 1
	EndIf
	nPPercSCX := aScan(aHeadSCX,{|x| AllTrim(x[2])=="CX_PERC"})
	nTotPerc := 0
	
	aColsPar :={}
	AEval( aColsCC, { |x| If( !x[ Len(aHeadSCX) + 1], AAdd( aColsPar, x ), ) } )
	aColsCC := aClone( aColsPar )
	
	For nX := 1 To Len(aColsCC)
		nTotPerc += aColsCC[nX][nPPercSCX]
	Next nX
	
	nPDECC	      := aScan(aHeadSCX,{|x| AllTrim(x[2]) == "CX_CC"} )
	nPDIt	      := aScan(aHeadSCX,{|x| AllTrim(x[2]) == "CX_ITEM"} )
	nPDEConta	  := aScan(aHeadSCX,{|x| AllTrim(x[2]) == "CX_CONTA"} )
	nPDEItemCta   := aScan(aHeadSCX,{|x| AllTrim(x[2]) == "CX_ITEMCTA"} )
	nPDECLVL	  := Ascan(aHeadSCX,{|x| AllTrim(x[2]) == "CX_CLVL"} )
	
	If nOpcA == 1 .And. lAltera
		//-- Validação para que se for alterado os itens refazer o rateio.
		If  nFAltRat > 0 
			nFAltRat := 0
			If(nFAltRat2>0)
				nFAltRat2 := 0
			EndIf
			nFAltRat2++
		EndIf
		If nTotPerc > 0
			//Acerta a numeração do Item
			For nX := 1 to Len(aColsCC)
				aColsCC[nX][nPDIt] := RetAsc(Str(nX),TamSX3("CX_ITEM")[1],.T.)
			Next nX
			
			If nItem > 0
				aColsSCX[nItem][2]	:= aClone(aColsCC)
			Else
				aadd(aColsSCX,{aCols[N][nPItemNF],aClone(aColsCC)})
			EndIf
			
			aCols[N][nPRateio] := "1"
			If nPCC <> 0 .And. nPDECC <> 0
				aCols[N][nPCC]     := Space(Len(aCols[N][nPCC]))
			EndIf
			If nPConta <> 0 .And. nPDEConta <> 0
				aCols[N][nPConta]  := Space(Len(aCols[N][nPConta]))
			EndIf
			If nPItemCta <> 0 .And. nPDEItemCta <> 0
				aCols[N][nPItemCta]:= Space(Len(aCols[N][nPItemCta]))
			EndIf
			If nPCLVL <> 0 .And. nPDECLVL <> 0
				aCols[N][nPCLVL]   := Space(Len(aCols[N][nPCLVL]))
			EndIf
			If Len(aCols)>1
				cMsg := CRLF + CRLF
				cMsg += STR0121 + StrZero(n,TamSx3("C1_ITEM")[1]) + CRLF //"Sim - Replica TODAS informações a partir do item da solicitação posicionado: "
				cMsg += STR0122 //"Todos - Replica TODAS informações para todos os itens da solicitação"
				
				nAviso := Aviso(STR0021,STR0090+cMsg,{STR0059,STR0060,STR0165},2) //"Atenção"###"Replicar informações para os demais itens do documento?"###"Sim"###"Não"
				If nAviso <> 2
					If nAviso == 3
						aColsSCX := {}
						nAux := 1
					Else
						nAux := n
					Endif
					
					For nX := nAux To Len(aCols)
						nItem  := aScan(aColsSCX,{|x| x[1] == aCols[nX][nPItemNF]})
						If nItem == 0
							aadd(aColsSCX,{aCols[nX][nPItemNF],aClone(aColsCC)})							
							
							//Validação por Entidades Contabeis
							If lVldRat
								lErro 	:= .F.
								lAtuRat:= .T.
								aCampos := MTGETFEC("SCX","CX")
								For nXR := 1 to len(aColsCC)
									For nYR := 1 to len(aCampos)
										If !(MTVLDSOLEC(aCols[nX][GDFieldPos("C1_PRODUTO")], aColsSCX[len(aColsSCX)][2][nXR][aScan(aHeadSCX,{ |x|  x[2] = aCampos[nYR] })], aCampos[nYR]))
									 		lErro := .T.
									 		lAtuRat := .F.
									 		lHelp := .T.
									 		exit
									 	EndIF	
								 	Next nX	
								 	If lErro 
								 		exit
								 	EndIf		
								Next nY	
								If lErro
									ADel(aColsSCX,len(aColsSCX))
									aSize(aColsSCX,len(aColsSCX)-1)
									aCols[nX][nPRateio] := "2"						
								EndIf							
							EndIf
							
							If lAtuRat
								aCols[nX][nPRateio] := "1"							
								If nPCC <> 0 .And. nPDECC <> 0
									aCols[NX][nPCC]     := Space(Len(aCols[NX][nPCC]))
								EndIf
								If nPConta <> 0 .And. nPDEConta <> 0
									aCols[NX][nPConta]  := Space(Len(aCols[NX][nPConta]))
								EndIf
								If nPItemCta <> 0 .And. nPDEItemCta <> 0
									aCols[NX][nPItemCta]:= Space(Len(aCols[NX][nPItemCta]))
								EndIf
								If nPCLVL <> 0 .And. nPDECLVL <> 0
									aCols[NX][nPCLVL]   := Space(Len(aCols[NX][nPCLVL]))
								EndIf
							EndIf
						Else
							aColsSCX[nItem,2] := aClone(aColsCC)
						Endif
					Next nX
					If lHelp
						Help(' ', 1,'A110RATEC')
					EndIf
				EndIf
			EndIf
		Else
			If nItem > 0
				aColsSCX[nItem][2]	:= aClone(aColsCC)
			Else
				aadd(aColsSCX,{aCols[N][nPItemNF],aClone(aColsCC)})
			EndIf
			aCols[nSavN][nPRateio] := "2"
		EndIf
	Else
		If nTotPerc > 0 .And. nItem > 0
			If "C1_RATEIO" $ cCampo
				&cCampo := "1"
			EndIf
			aCols[nSavN][nPRateio] := "1"
		Else
			If "C1_RATEIO" $ cCampo
				&cCampo := "2"
			EndIf
			aCols[nSavN][nPRateio] := "2"
		EndIf
	EndIf
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Armazena aHeadSCX e aColsSCX em array Private validacoes em outros pontos do fonte  ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aCPHSCX:=aClone(aHeadSCX)
ACPISCX:=aClone(aColsSCX)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Atualiza a legenda conforme o tipo de Compras   ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
A110AltLeg()

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Restaura a integridade da rotina                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

aRotina	:= aClone(aSavaRotina)
N := nSavN
SetKey(VK_F4 ,bSavKeyF4)
SetKey(VK_F5 ,bSavKeyF5)
SetKey(VK_F6 ,bSavKeyF6)
SetKey(VK_F7 ,bSavKeyF7)
SetKey(VK_F8 ,bSavKeyF8)
SetKey(VK_F9 ,bSavKeyF9)
SetKey(VK_F10,bSavKeyF10)
SetKey(VK_F11,bSavKeyF11)
RestArea(aArea)


Return (.T.)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³ A110RatLok³ Autor ³ Rodrigo Toledo       ³ Data ³20.11.2012 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Esta rotina tem como objetivo validar a linhaok do rateio do³±±
±±³          ³ itens do documento de entrada                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1: Indica se a linha esta valida                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ SIGACOM                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110RatLOk()
Local nPPerc    := aScan(aHeader,{|x| AllTrim(x[2]) == "CX_PERC"})
Local nPCC	    := aScan(aHeader,{|x| AllTrim(x[2]) == "CX_CC"})
Local nPConta	:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_CONTA"})
Local nPItemCta := aScan(aHeader,{|x| AllTrim(x[2]) == "CX_ITEMCTA"})
Local nPCLVL	:= Ascan(aHeader,{|x| AllTrim(x[2]) == "CX_CLVL"})
Local nPosEC05DB 	  := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC05DB"}) 
Local nPosEC05CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC05CR"})
Local nPosEC06DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC06DB"}) 
Local nPosEC06CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC06CR"})
Local nPosEC07DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC07DB"}) 
Local nPosEC07CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC07CR"})
Local nPosEC08DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC08DB"}) 
Local nPosEC08CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC08CR"})
Local nPosEC09DB    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC09DB"}) 
Local nPosEC09CR    := aScan(aHeader,{|x| Alltrim(x[2]) == "CX_EC09CR"}) 
Local aEntid  := {}
Local aEntid2 := {}
Local lRatDupl	:= GetNewPar("MV_RATDUPL",.F.)
Local lRetorno  := .T.
Local nX        := 0
Local nAscan    := 0
Local nPProd    := aScan(aOrigHeader,{|x| Trim(x[2])=="C1_PRODUTO"})
Local lSCCLIN	:= SuperGetMV("MV_SCCLIN",.F.,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica se valida ou nao o aCols a partir das validacoes do aHeader ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
Iif( nPConta  > 0  , aAdd(aEntid, aCols[n,nPConta]),  aAdd(aEntid," ") )
Iif( nPCC     > 0  , aAdd(aEntid, aCols[n,nPCC]),     aAdd(aEntid," ") )
Iif( nPItemCta> 0  , aAdd(aEntid, aCols[n,nPItemCta]),aAdd(aEntid," ") )
Iif( nPClVl   > 0  , aAdd(aEntid, aCols[n,nPClVl]),   aAdd(aEntid," ") )
Iif( nPosEC05DB > 0  , aAdd(aEntid, aCols[n,nPosEC05DB]), aAdd(aEntid," ") )
Iif( nPosEC06DB > 0  , aAdd(aEntid, aCols[n,nPosEC06DB]), aAdd(aEntid," ") )
Iif( nPosEC07DB > 0  , aAdd(aEntid, aCols[n,nPosEC07DB]), aAdd(aEntid," ") )
Iif( nPosEC08DB > 0  , aAdd(aEntid, aCols[n,nPosEC08DB]), aAdd(aEntid," ") )
Iif( nPosEC09DB > 0  , aAdd(aEntid, aCols[n,nPosEC09DB]), aAdd(aEntid," ") )

Iif( nPConta  > 0  , aAdd(aEntid2, aCols[n,nPConta]),  aAdd(aEntid2," " ) )
Iif( nPCC     > 0  , aAdd(aEntid2, aCols[n,nPCC]),     aAdd(aEntid2," " ) )
Iif( nPItemCta> 0  , aAdd(aEntid2, aCols[n,nPItemCta]),aAdd(aEntid2," " ) )
Iif( nPClVl   > 0  , aAdd(aEntid2, aCols[n,nPClVl]),   aAdd(aEntid2," " ) )
Iif( nPosEC05CR > 0  , aAdd(aEntid2, aCols[n,nPosEC05CR]), aAdd(aEntid2," " ) )
Iif( nPosEC06CR > 0  , aAdd(aEntid2, aCols[n,nPosEC06CR]), aAdd(aEntid2," " ) )
Iif( nPosEC07CR > 0  , aAdd(aEntid2, aCols[n,nPosEC07CR]), aAdd(aEntid2," " ) )
Iif( nPosEC08CR > 0  , aAdd(aEntid2, aCols[n,nPosEC08CR]), aAdd(aEntid2," " ) )
Iif( nPosEC09CR > 0  , aAdd(aEntid2, aCols[n,nPosEC09CR]), aAdd(aEntid2," " ) )

If !aCols[N][Len(aCols[N])]
	If aCols[N][nPPerc] == 0
		Help(" ",1,"A103PERC")
		lRetorno := .F.
	EndIf
EndIf

If lRetorno .And. !lRatDupl
	If nPosEC05DB = 0
		nAscan := Ascan( aCols, { |e| 	e[nPCC] == aCols[n][nPCC] .And. e[nPConta] == aCols[n][nPConta] .And. e[nPItemCta] == aCols[n][nPItemCta] .And.;
												 	e[nPCLVL] == aCols[n][nPCLVL] .And. !e[len(e)] } )
	Elseif nPosEC09CR > 0
		nAscan := Ascan( aCols, { |e| 	e[nPCC] == aCols[n][nPCC] .And. e[nPConta] == aCols[n][nPConta] .And. e[nPItemCta] == aCols[n][nPItemCta] .And.;
												 	e[nPCLVL] == aCols[n][nPCLVL] .And. !e[len(e)] .And. ;
												 	e[nPosEC09CR] == aCols[n][nPosEC09CR] .And. e[nPosEC09DB] == aCols[n][nPosEC09DB] .And.;
												 	e[nPosEC08CR] == aCols[n][nPosEC08CR] .And. e[nPosEC08DB] == aCols[n][nPosEC08DB] .And.;
												 	e[nPosEC07CR] == aCols[n][nPosEC07CR] .And. e[nPosEC07DB] == aCols[n][nPosEC07DB] .And.;
												 	e[nPosEC06CR] == aCols[n][nPosEC06CR] .And. e[nPosEC06DB] == aCols[n][nPosEC06DB] .And.;
												 	e[nPosEC05CR] == aCols[n][nPosEC05CR] .And. e[nPosEC05DB] == aCols[n][nPosEC05DB]} )
	Elseif nPosEC08CR > 0
		nAscan := Ascan( aCols, { |e| 	e[nPCC] == aCols[n][nPCC] .And. e[nPConta] == aCols[n][nPConta] .And. e[nPItemCta] == aCols[n][nPItemCta] .And.;
												 	e[nPCLVL] == aCols[n][nPCLVL] .And. !e[len(e)] .And. ;
												 	e[nPosEC08CR] == aCols[n][nPosEC08CR] .And. e[nPosEC08DB] == aCols[n][nPosEC08DB] .And.;
												 	e[nPosEC07CR] == aCols[n][nPosEC07CR] .And. e[nPosEC07DB] == aCols[n][nPosEC07DB] .And.;
												 	e[nPosEC06CR] == aCols[n][nPosEC06CR] .And. e[nPosEC06DB] == aCols[n][nPosEC06DB] .And.;
												 	e[nPosEC05CR] == aCols[n][nPosEC05CR] .And. e[nPosEC05DB] == aCols[n][nPosEC05DB]} )
	Elseif nPosEC07CR > 0
		nAscan := Ascan( aCols, { |e| 	e[nPCC] == aCols[n][nPCC] .And. e[nPConta] == aCols[n][nPConta] .And. e[nPItemCta] == aCols[n][nPItemCta] .And.;
												 	e[nPCLVL] == aCols[n][nPCLVL] .And. !e[len(e)] .And. ;
												 	e[nPosEC07CR] == aCols[n][nPosEC07CR] .And. e[nPosEC07DB] == aCols[n][nPosEC07DB] .And.;
												 	e[nPosEC06CR] == aCols[n][nPosEC06CR] .And. e[nPosEC06DB] == aCols[n][nPosEC06DB] .And.;
												 	e[nPosEC05CR] == aCols[n][nPosEC05CR] .And. e[nPosEC05DB] == aCols[n][nPosEC05DB]} )
	Elseif nPosEC06CR > 0
		nAscan := Ascan( aCols, { |e| 	e[nPCC] == aCols[n][nPCC] .And. e[nPConta] == aCols[n][nPConta] .And. e[nPItemCta] == aCols[n][nPItemCta] .And.;
												 	e[nPCLVL] == aCols[n][nPCLVL] .And. !e[len(e)] .And. ;
												 	e[nPosEC06CR] == aCols[n][nPosEC06CR] .And. e[nPosEC06DB] == aCols[n][nPosEC06DB] .And.;
												 	e[nPosEC05CR] == aCols[n][nPosEC05CR] .And. e[nPosEC05DB] == aCols[n][nPosEC05DB]} )
	Elseif nPosEC05DB > 0
		nAscan := Ascan( aCols, { |e| 	e[nPCC] == aCols[n][nPCC] .And. e[nPConta] == aCols[n][nPConta] .And. e[nPItemCta] == aCols[n][nPItemCta] .And.;
												 	e[nPCLVL] == aCols[n][nPCLVL] .And. !e[len(e)] .And. ;
												 	e[nPosEC05CR] == aCols[n][nPosEC05CR] .And. e[nPosEC05DB] == aCols[n][nPosEC05DB]} )
	Endif
	
	If nAscan > 0 .And. n != nAscan
		Help(" ",1,"CCEXIST")// Centro de Custo ja Cadastrado
		lRetorno := .F.	
	Endif
EndIf	

If lRetorno
	nPercRat := 0
	nPercARat:= 0
	For nX	:= 1 To Len(aCols)
		If !aCols[nX][Len(aCols[nX])]
			nPercRat += aCols[nX][nPPerc]
		EndIf
	Next
	nPercARat := 100 - nPercRat
	If Type("oPercRat")=="O"
		oPercRat:Refresh()
		oPercARat:Refresh()
	Endif
EndIf

//Consiste amarração da Conta Contábil X Centro de Custo
If lRetorno
	If nPConta <> 0 .And. nPCC>0 .And. nPItemCta <> 0 .And. nPClVl <> 0 .And.;
 	   (!CtbAmarra(aCols[n,nPConta],aCols[n,nPCC],aCols[n,nPItemCta],aCols[n,nPClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid) .Or.;
	 	!CtbAmarra(aCols[n,nPConta],aCols[n,nPCC],aCols[n,nPItemCta],aCols[n,nPClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid2))
	   lRetorno:=.F.
	EndIf
EndIf

//Verifica a validaçao solicitante X entidade contábil
If !aCols[n,Len(aCols[n])]
	If lRetorno
		lRetorno := MTPVLSOLPD("CX",AORIGACOLS[nOrign,nPProd],lSCCLIN)
	EndIf
Endif

If lRetorno .And. empty(aCols[N][nPCC]) // O Centro de Custo SEMPRE devera ser obrigatorio, Conta Contabil, Item Contabil e Classe Valor nao tem esta necessidade
	Help('   ',1,'A103RATEI')
	lRetorno:=.F.	
EndIf


//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
// Ponto de entrada para validações customizadas 
// Obs.. mesmo ponto de entrada chamado nas funcoes. A110RatLOk e A110RatTok
// PARAMIXB[1] = aheader SCX
// PARAMIXB[2] = acols   SCX
// PARAMIXB[3] = chamado pela função A110RatLOk
// PARAMIXB[4] = chamado pela função A110RatTok
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If lRetorno .And. ExistBlock("MA110VLRAT")
	lRetorno := ExecBlock("MA110VLRAT",.F.,.F.,{aHeader,aCols,.T.,.F.}) 
EndIf

Return(lRetorno)

/*/
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³A110RatLok ³Autor ³ Rodrigo Toledo        ³ Data ³20.11.2012 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Esta rotina tem como objetivo validar a tudook do rateio dos³±±
±±³          ³ itens do documento de entrada                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³ ExpL1: Indica se a todas as linhas estao validas            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ SIGACOM                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function A110RatTok()
Local nPPerc    := aScan(aHeader,{|x| AllTrim(x[2]) == "CX_PERC"} )
Local nPCC	    := aScan(aHeader,{|x| AllTrim(x[2]) == "CX_CC"})
Local nPConta	:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_CONTA"})
Local nPItemCta := aScan(aHeader,{|x| AllTrim(x[2]) == "CX_ITEMCTA"})
Local nPCLVL	:= Ascan(aHeader,{|x| AllTrim(x[2]) == "CX_CLVL"})
Local aEntid  := {}
Local aEntid2 := {}
Local nTotal   := 0
Local nX       := 0
Local lRetorno := .T.

For nX	:= 1 To Len(aCols)
	If !aCols[nX][Len(aCols[nX])]
		nTotal += aCols[nX][nPPerc]
	 	//Consiste amarração da Conta Contábil X Centro de Custo
	 	If (!CtbAmarra(aCols[n,nPConta],aCols[n,nPCC],aCols[n,nPItemCta],aCols[n,nPClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid) .Or.;
			!CtbAmarra(aCols[n,nPConta],aCols[n,nPCC],aCols[n,nPItemCta],aCols[n,nPClVl],/*lPosiciona*/,/*lHelp*/,/*lValidLinOk*/,aEntid2))
	 	    lRetorno:=.F.
	 	    Aviso("A110RatTok",STR0091+aCols[nX,1],{"Ok"}) //"Verifique o rateio do Item: "
		    Exit 
		EndIf       
	EndIf
Next

If lRetorno .And. nTotal > 0 .And. nTotal <> 100
	Help(" ",1,"A103TOTRAT")
	lRetorno := .F.
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
// Ponto de entrada para validações customizadas 
// Obs.. mesmo ponto de entrada chamado nas funcoes. A110RatLOk e A110RatTok
// PARAMIXB[1] = aheader SCX
// PARAMIXB[2] = acols   SCX
// PARAMIXB[3] = chamado pela função A110RatLOk
// PARAMIXB[4] = chamado pela função A110RatTok
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

If lRetorno .And. ExistBlock("MA110VLRAT")
	lRetorno := ExecBlock("MA110VLRAT",.F.,.F.,{aHeader,aCols,.F.,.T.}) 
EndIf

Return(lRetorno)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³MATA110   ºAutor  ³Rodrigo Toledo      º Data ³  22/11/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³Monta o array aRatSC para ser utilizado via ExecAuto.       º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³MATA110                                                     º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function M110AutRat(aRatSC,aHeaderRAT)
Local aAux	:= {}
Local nPos	:= 0
Local nZ	:= 0
Local nY	:= 0
Local nX	:= 0

For nX := 1 To Len(aRatSC)
	If Empty(aScan(aCols,{|x| x[GDFieldPos("C1_ITEM")] == aRatSC[nX,1]}))
		Loop
	EndIf
	For nY := 1 To Len(aRatSC[nX,2])
		aAux := aClone(aRatSC[nX,2,nY])
		aRatSC[nX,2,nY] := Array(Len(aHeaderRAT)+1)
		For nZ := 1 To Len(aRatSC[nX,2,nY]) - 1
			If IsHeadRec(aHeaderRAT[nZ,2]) .Or. IsHeadAlias(aHeaderRAT[nZ,2])
				Loop
			ElseIf (nPos := aScan(aAux,{|x| AllTrim(x[1]) == AllTrim(aHeaderRAT[nZ,2])})) > 0
				aRatSC[nX,2,nY,nZ] := aAux[nPos,2]
			Else
				aRatSC[nX,2,nY,nZ] := CriaVar(aHeaderRAT[nZ,2])
			EndIf
		Next nZ
		aTail(aRatSC[nX,2,nY]) := .F.
	Next nY
Next nX
	
Return aRatSC

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A110RatAutºAutor  ³Microsiga           º Data ³  22/11/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³ Valida o array de rateio por CC da ExecAuto.               º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ aRateioSC[nX,1]: item da solicitacao de compra.			  º±±
±±º			 ³ aRateioSC[nX,2]: array com os itens do rateio.			  º±±
±±º			 ³ aRateioSC[nX,2,nY,nZ,1]: nome do campo.					  º±±
±±º			 ³ aRateioSC[nX,2,nY,nZ,2]: conteudo do campo. 			  	  º±±
±±º			 ³ aRateioSC[nX,2,nY,nZ,3]: validacao especifica.			  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA110                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A110RatAut(aRateioSC, nOpcX) 
Local lRet      := .T.
Local nTotal	  := 0
Local nX		  := 0
Local nY		  := 0
Local nZ		  := 0
Local aPosCampo := Array(4)
Local aHead110	:= {}
Local aCols110

Default aRateioSC :=  {}
Default nOpcx := 0

Private nOrigN := IIF(Type("N") == "U",1, N)

If nOpcx != 0 .And. nOpcX != 5
	A110Monta(1,,,nOpcX,,@aHead110, @aCols110)
	aOrigHeader := aClone(aHead110)
	aOrigAcols := aClone(aCols110)
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ No modo Automatico checa Rateio                       				 ³
//³    1 - A soma dos percentuais de rateios dos C.Custo eh igual a 100% ³
//³    2 - Cada C.Custo rateado existe na tabela SCC                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If Len(aRateioSC) > 0
	//-- Obtem posicao dos campos no array da ExecAuto
	nPosPerc := aScan(aRateioSC[1,2,1],{|x| AllTrim(x[1]) == "CX_PERC"	}) 
	aPosCampo[1] := {"CX_CC",aScan(aRateioSC[1,2,1],{|x| AllTrim(x[1]) == "CX_CC"})}
	aPosCampo[2] := {"CX_CONTA",aScan(aRateioSC[1,2,1],{|x| AllTrim(x[1]) == "CX_CONTA"})}
	aPosCampo[3] := {"CX_ITEMCTA",aScan(aRateioSC[1,2,1],{|x| AllTrim(x[1]) == "CX_ITEMCTA"})}
	aPosCampo[4] := {"CX_CLVL",aScan(aRateioSC[1,2,1],{|x| AllTrim(x[1]) == "CX_CLVL"})}		
	If nPosPerc > 0
		For nX := 1 To Len(aRateioSC)
			//-- Zera acumuladores de validacao
			nTotal    := 0
			For nY := 1 to Len(aRateioSC[nX,2])
				//-- Valida campos pelo dicionario 
				If !lRet
					Exit 
				Else 
					For nZ := 1 To Len(aRateioSC[nX,2,nY])
						__READVAR := "M->"+(aRateioSC[nX,2,nY,nZ,1])
						M->&(aRateioSC[nX,2,nY,nZ,1]) := aRateioSC[nX,2,nY,nZ,2]
						If !(lRet := CheckSX3(aRateioSC[nX,2,nY,nZ,1],aRateioSC[nX,2,nY,nZ,2]))
							Exit
						EndIf
					Next nZ
				EndIf
				//-- Acumula percentual
				nTotal += aRateioSC[nX,2,nY,nPosPerc,2]
			Next nY			
		    If lRet .And. (nTotal > 100 .Or. nTotal < 100)
				Help(' ',1,'A103TOTRAT')
				lRet := .F.
				Exit
			Endif
		Next nX
	Else
		Help(' ',1,STR0092+AllTrim(RetTitle("CX_PERC")) +STR0093) //"Erro na estrutura do vetor de rateio: campo "##" ausente."
		lRet := .F.
	EndIf
EndIf

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºFunção    ³A110AColsRaºAutor  ³Fabricio Pequeno    º Data ³  23/11/12  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Funcao verifica se existe alteração nos itens da solicitacaoº±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA110                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A110AColsRa(aColsBKPRat,nOpcx,aColsSCX)
Local lContAltRat	:= .T.
Local nRat			:= 0
Local nRat2			:= 0
Local nCols			:= 0
Local nCols2		:= 0
Local nItem			:= 0  
Local nPosRateio
Local lDelet

Default aColsBKPRat := {}

nFAltRat++ //-- Passou uma vez nesta validação
If( (nOpcx==4) .And. (Len(aColsSCX)>0) )
	If!(nFAltRat>0 .And. nFAltRat2>0 .And. nFAltRat == nFAltRat2)
		//-- Se é uma alteração, o aCols foi alterado e existe rateio é preciso fazer o rateio novamente.
		For nRat := 1 to Len(aColsSCX) //-- Faz a comparação para itens que tenham rateio.
			For nRat2 := 1 to Len(aCols)
				lDelet := aCols[nRat2,Len(aCols[nRat2])]
				If(aColsSCX[nRat,1] == aCols[nRat2,1]) .And. ! lDelet
					nItem := aColsSCX[nRat,1] //-- Seleciona qual item tem rateio.
					For nCols:=1 to Len(aColsBKPRat)
						If (aColsBKPRat[nCols,1] == nItem) //-- Só compara dados dos itens que tem rateio.
							For nCols2:=1 to Len(aColsBKPRat[nCols])
								If nCols<=Len(aColsBKPRat[1])
									If ( Ascan(aColsBKPRat,{|x| x[nCols2]==aCols[nCols,nCols2] } ) == 0 )//-- Comparando aCols original com novo.
										nCols  := Len(aColsBKPRat)
										nCols2 := Len(aColsBKPRat[nCols]) 
										MsgAlert(STR0094+" Item "+Str(nRat2,3))//--"Na inclusão do Pedido de compra foi feito rateio para o(os) iten(S), necessário verificar os rateios antes de alterar."
										lContAltRat := .F.
									EndIf
								EndIf
							Next
						EndIf
					Next
  					nItem := 0
	  			EndIf
	  		Next
		Next nRat
	EndIf
EndIf

//alteração - Valida preenchimento do rateio 
If nOpcx==4 .And. lContAltRat
	nPosRateio	:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_RATEIO"})
	nItem		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_ITEM"})
	For nRat := 1 to Len(aCols)
		If ! aCols[nRat,Len(aCols[nRat])] .And. aCols[nRat,nPosRateio] == '1'
			If (nRat2 := (Ascan(aColsSCX, {|a| a[1] == aCols[nRat,nItem] }))) == 0 //verifica se foi informado o rateio 
				MsgAlert(STR0094+", Item "+Str(nRat,3))//--"Na inclusão do Pedido de compra foi feito rateio para o(os) iten(S), necessário verificar os rateios antes de alterar."
				lContAltRat := .F.
				exit
			EndIf
		EndIf
	Next
EndIf	
	
Return (lContAltRat)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³A110AcoSCXºAutor  ³Rodrigo Toledo      º Data ³  06/12/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Funcao responsavel por criar o aCols da tabela SCX para	  º±±
±±º     	 ³ ser utilizado nos processos de Alterar e Visualizar  	  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºParametros³ aExp1: aHeadSCX da tabela SCX 							  º±±
±±º			 ³ aExp2: aColsSCX da tabela SCX							  º±±
±±º			 ³ aExp3: cNumSCX c1_NUM para o caso de copia	    				  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA110                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110AcoSCX(aHeadSCX,aColsSCX,cNumSCX)
Local aAreaSCX 	:= SCX->(GetArea())
Local aAreaSC1 	:= SC1->(GetArea())
Local cAliasSCX := ""
Local nX 		:= 0
Local nY		:= 0
Local aStruSCX	:= {}
Local cQuery	:= ""
Local cItemSCX	:= ""
Local nItemSCX	:= 0
Local aNoFields   := {"CX_FILIAL","CX_CUSTO1","CX_CUSTO2","CX_CUSTO3","CX_CUSTO4","CX_CUSTO5","CX_SOLICIT","CX_ITEMSOL"}
Default aHeadSCX := {}
Default aColsSCX := {}
Default cNumSCX := cA110Num

If Type("aBackSCX") # "A"
	aBackSCX := {}
EndIf

SC1->(DbSetOrder(1))
SC1->(MsSeek(xFilial("SC1")+cNumSCX))
DbSelectArea("SCX")
DbSetOrder(1)
cAliasSCX := "SCX"
lQuery    := .T.
aStruSCX  := SCX->(dbStruct())
cAliasSCX := "A120NFISCAL"
cQuery    := "SELECT SCX.*,SCX.R_E_C_N_O_ SCXRECNO "
cQuery    += "FROM "+RetSqlName("SCX")+" SCX "
cQuery    += "WHERE SCX.CX_FILIAL='"+xFilial("SCX")+"' AND "
cQuery    += "SCX.CX_SOLICIT='"+SC1->C1_NUM+"' AND "
cQuery    += "SCX.D_E_L_E_T_=' ' "
cQuery    += "ORDER BY "+SqlOrder(SCX->(IndexKey()))
cQuery := ChangeQuery(cQuery)
dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQuery),cAliasSCX,.T.,.T.)
For nX := 1 To Len(aStruSCX)
	If aStruSCX[nX,2]<>"C"
		TcSetField(cAliasSCX,aStruSCX[nX,1],aStruSCX[nX,2],aStruSCX[nX,3],aStruSCX[nX,4])
	EndIf
Next nX
dbSelectArea(cAliasSCX)
While (!Eof() .And. xFilial('SCX') == (cAliasSCX)->CX_FILIAL .And. SC1->C1_NUM == (cAliasSCX)->CX_SOLICIT)
	If Empty(aBackSCX)
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Montagem do aHeader                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		DbSelectArea("SX3")
		DbSetOrder(1)
		MsSeek("SCX")
		While ( !EOF() .And. SX3->X3_ARQUIVO == "SCX" )
			If X3USO(SX3->X3_USADO) .AND. cNivel >= SX3->X3_NIVEL .And. !AllTrim(SX3->X3_CAMPO)$"CX_CUSTO#CX_FILIAL" .and. aScan(aNoFields,{|x| AllTrim(x)==AllTrim(SX3->X3_CAMPO)}) == 0
				aAdd(aBackSCX,{TRIM(X3Titulo()),;
					SX3->X3_CAMPO,;
					SX3->X3_PICTURE,;
					SX3->X3_TAMANHO,;
					SX3->X3_DECIMAL,;
					SX3->X3_VALID,;
					SX3->X3_USADO,;
					SX3->X3_TIPO,;
					SX3->X3_F3,;
					SX3->X3_CONTEXT })
			EndIf
			DbSelectArea("SX3")
			dbSkip()
		EndDo
	EndIf
	aHeadSCX  := aBackSCX

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Adiciona os campos de Alias e Recno ao aHeader para WalkThru.³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	ADHeadRec("SCX",aHeadSCX)
	If cItemSCX <> 	(cAliasSCX)->CX_ITEMSOL
		cItemSCX	:= (cAliasSCX)->CX_ITEMSOL
		aAdd(aColsSCX,{cItemSCX,{}})
		nItemSCX++
	EndIf
	
	aAdd(aColsSCX[nItemSCX][2],Array(Len(aHeadSCX)+1))
	For nY := 1 to Len(aHeadSCX)
		If IsHeadRec(aHeadSCX[nY][2])
			aColsSCX[nItemSCX][2][Len(aColsSCX[nItemSCX][2])][nY] := IIf(lQuery,(cAliasSCX)->SCXRECNO,SCX->(Recno()))
		ElseIf IsHeadAlias(aHeadSCX[nY][2])
			aColsSCX[nItemSCX][2][Len(aColsSCX[nItemSCX][2])][nY] := "SCX"
		ElseIf (aHeadSCX[nY][10] <> "V")
			aColsSCX[nItemSCX][2][Len(aColsSCX[nItemSCX][2])][nY] := (cAliasSCX)->(FieldGet(FieldPos(aHeadSCX[nY][2])))
		Else
			aColsSCX[nItemSCX][2][Len(aColsSCX[nItemSCX][2])][nY] := (cAliasSCX)->(CriaVar(aHeadSCX[nY][2]))
		EndIf
		aColsSCX[nItemSCX][2][Len(aColsSCX[nItemSCX][2])][Len(aHeadSCX)+1] := .F.
	Next nY
	DbSelectArea(cAliasSCX)
	dbSkip()
EndDo

If lQuery
	DbSelectArea(cAliasSCX)
	dbCloseArea()
	DbSelectArea("SCX")
EndIf

RestArea(aAreaSCX)
RestArea(aAreaSC1)
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±º Function  ³ IntegDef º Autor ³ Alex Egydio          º Data ³  27/12/12   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Descricao ³ Funcao de tratamento para o recebimento/envio de mensagem    º±±
±±º           ³ unica da Solicitacao de Compra.                              º±±
±±ÌÍÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±º Uso       ³ MATA110                                                      º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function IntegDef( cXML, nTypeTrans, cTypeMessage, cVersion )
Local aRet := {}

aRet := MATI110(cXml, nTypeTrans, cTypeMessage, cVersion, aRecSC1)

Return aRet 

Function MTA110SC1(aReg)
aRecSC1 := aReg 
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³a110VldAfgºAutor  ³Alexandre Circenis  º Data ³  02/13/13   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Valida o rateio por projeto                                 º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function A110VldAFG(nOpcao,cNumSC)
Local lRet := .T.
Local aSavCols := aClone(aCols)
Local aSavHeader := aClone(aHeader)
Local nSavN := n
Local nX

for nX := 1 to Len (aRatProj) 
    // Buscar a numero da linha da Solicitacao referente ao item do rateio
    n:=  aScan(aCols,{|x| x[GDFieldPos("C1_ITEM")] == aRatProj[nX,1]})
	if n > 0                                                             
		// Chamar a rotina automatica do cadastro de rateios 
		if !PmsDlgSC(nOpcao,cNumSC,.F.,aRatProj[nX,2])
	   		lRet := .F.
	   		Exit
	   	endif	
	endif

next nX	  

aCols := aClone(aSavCols)
aHeader := aClone(aSavHeader)
N := nSavN

Return lRet 


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ VldAltSolic º Autor ³      	            º Data ³11/02/13  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDescricao ³ Valida se o usuario pode Alt./Excl. de acordo com o grupo  º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ MATA110                                                    º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function VldAltSolic()

Local aArea		:= GetArea()
Local aAreaSC1	:= SC1->(GetArea())
Local aGrupo   	:= {}
Local aGrupSolic:= {}
Local cUser    	:= RetCodUsr()
Local lRet 		:= .T.
Local lSolic	:= IF(SuperGetMv("MV_RESTCOM",.F.,"N")=="S",.T.,.F.)
Local lPertGrp 	:= .F. //Pertence ao mesmo grupo do criador da SC
Local nX		:= 0
Local aGrpSC	:= {}
Local cQry		:= ""
Local cAliasGrp	:= ""

//Grupos de Compras do usuario logado
aGrupo := UsrGrComp(cUser)

//Se usuario logado pertencer ao grupo generico, não há restrição
If aScan(aGrupo,"*") != 0
	lSolic := .F.
EndIf

If (lSolic)
	DbSelectArea("SC1")                       
	DbSetOrder(1)
	If (MsSeek(xFilial("SC1")+C1_NUM))
		//Grupo de Compras do usuario que incluiu a SC
		aGrupSolic := UsrGrComp(SC1->C1_USER)

		//Se usuario que incluiu a SC pertencer ao grupo generico, não há restrição
		If aScan(aGrupSolic,"*") != 0
			lSolic := .F.
		Else
			
			If !lPertGrp 
				//Verifica se os Grupo de compras do usuario logado, pertence ao
				//grupo de compras vinculado a SC
				If aScan(aGrupo,SC1->C1_GRUPCOM) > 0
					lPertGrp := .T.
				Endif
			Endif

			If !lPertGrp
				//Verifica se o grupo de compras do usuario que fez a SC, esta no 
				//mesmo grupo de compras do usuario logado
				For nX := 1 To Len(aGrupSolic)
					If aScan(aGrupo,aGrupSolic[nX]) > 0
						lPertGrp := .T.
						Exit
					Endif
				Next nX
			Endif

			If !lPertGrp
				//Verifica se grupo de compras do usuario logado, contem
				//no grupo de compras da SC
				cQry := " SELECT C1_GRUPCOM "
				cQry += " FROM " + RetSqlName("SC1")
				cQry += " WHERE C1_NUM = '" + SC1->C1_NUM + "'
				cQry += " AND D_E_L_E_T_ = ' '"
				cQry += " GROUP BY C1_GRUPCOM"

				cAliasGrp  := GetNextAlias()
				dbUseArea(.T.,"TOPCONN",TcGenQry(,,cQry),cAliasGrp,.F.,.T.)

				While (cAliasGrp)->(!EOF())
					aAdd(aGrpSC,(cAliasGrp)->C1_GRUPCOM)
					(cAliasGrp)->(DbSkip())
				Enddo

				(cAliasGrp)->(DbCloseArea())

				If Len(aGrpSC) > 0
					For nX := 1 To Len(aGrupo)
						If aScan(aGrpSC,aGrupo[nX]) > 0
							lPertGrp := .T.
							Exit
						Endif
					Next nX
				Endif
			Endif
		EndIf 

		If lSolic .And. !lPertGrp .And. SC1->C1_USER != cUser .And. !Empty(SC1->C1_USER)	
			If Empty(aGrupSolic)
				Help("  ",1,"A120RSPED",,UsrRetName(SC1->C1_USER),4,11)
			Else
				Help(,, "USUNOTAUT",, STR0172, 1, 0,,,,,,{STR0173, If (!Empty(SC1->C1_GRUPCOM), STR0174+ SC1->C1_GRUPCOM,"")})
				// STR0172 Usuário sem permissão para alterar este item. Apenas os compradores do grupo de compras tem permissão de alterar este item.
				// STR0173 Verifique se você pertence a este grupo de compras ou o status do parâmetro MV_RESTCOM
			EndIf
			lRet := .F.
		EndIf
	EndIf
EndIf

RestArea(aAreaSC1)
RestArea(aArea)
Return	lRet



//-------------------------------------------------------------------
/*/{Protheus.doc} A110GETSCX()
Função para recuperar variavel aColsSCX

@author Alexandre.Gimenez
@since 04/09/2013
@version 1.0
@return lRet 
/*/
//-------------------------------------------------------------------
Function A110GETSCX()

Return aColsSCX

//-------------------------------------------------------------------
/*/{Protheus.doc} A110SETSCX(aSCX)
Função para atualizar variavel aColsSCX

@author Alexandre.Gimenez
@since 04/09/2013
@version 1.0
@return lRet 
/*/
//-------------------------------------------------------------------
Function A110SETSCX(aSCX)

aColsSCX := aSCX

Return



//-------------------------------------------------------------------
/*/{Protheus.doc} A110ScxEdt()
Função para verificar se algum item da SC tem amarração com algum Edital

@author Matheus Lando
@since 09/03/2015
@version 1.0
@return lRet 
/*/
//-------------------------------------------------------------------
Function A110ScxEdt()
Local aAreaSC1  := SC1->(GetArea())
Local lRet 		:= .F.
Local cNumSc	:= SC1->C1_NUM
Local cFilSC1	:= xFilial("SC1") 

SC1->(dbSetOrder(1))
SC1->(dbSeek(cFilSC1+cNumSc))

While !SC1->(Eof()) .And. SC1->(C1_FILIAL+C1_NUM) == cFilSC1+cNumSc
	If !Empty(SC1->C1_CODED)
		lRet := .T.
		Exit
	EndIf		
	SC1->(dbSkip())	
EndDo

RestArea(aAreaSC1)

Return lRet

//-------------------------------------------------------------------
/*/{Protheus.doc} MaBloqMkt()
Função para verificar se bloqueia registro devido a integração

@author Flavio Lopes Rasta
@since 09/03/2015
@version 1.0
@return lRet 
/*/
//-------------------------------------------------------------------
Function MaBloqMkt(cTabela)
Local lBlock := .F.
If (SuperGetMv("MV_MKPLACE",.F.,.F.))
	If cTabela == "SC1"
		If !Empty(SC1->(C1_ACCNUM+C7_ACCITEM))
			lBlock := .T.
		Endif
	ElseIf cTabela == "SC7"
		If !Empty(SC7->(C7_ACCNUM+C7_ACCITEM))
			lBlock := .T.
		Endif
	Endif
	
	If lBlock
		Aviso(STR0154,STR0155,{"Ok"}) 
	Endif
Endif

Return lBlock

//-------------------------------------------------------------------
/*/{Protheus.doc} a110CarCC()
Carrega as definições de rateio externo
@author Rafael Duram
@since 10/05/2016
@version P12
@return .T.
/*/
//-------------------------------------------------------------------
Function a110CarCC(aCols, aHeader, cItem, lPrimeiro)

Local lCusto		:= CtbMovSaldo("CTT")
Local lItem	 	:= CtbMovSaldo("CTD")
Local lCLVL	 	:= CtbMovSaldo("CTH")
Local nPosPerc	:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_PERC" } )
Local nPosItem	:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_ITEM" } )
Local nPosCC		:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_CC"} )
Local nPosConta	:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_CONTA"} )
Local nPosItemCta	:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_ITEMCTA"} )
Local nPosCLVL	:= aScan(aHeader,{|x| AllTrim(x[2]) == "CX_CLVL"} )
Local nHeader		:= 0
Local aEntidades	:= {}
Local nEnt			:= 0
Local nDeb			:= 0 

If lPrimeiro
	//-- Se ja foi informado algum rateio, limpar o aCols
	If aCols[Len(aCols)][nPosPerc] <> 0
		aCols := {}
		Aadd(aCols, Array(Len(aHeader) + 1))
		For nHeader := 1 To Len(aHeader)
			If Trim(aHeader[nHeader][2]) <> "CX_ALI_WT" .And. Trim(aHeader[nHeader][2]) <> "CX_REC_WT"
				aCols[Len(aCols)][nHeader] := CriaVar(aHeader[nHeader][2])
			Endif
		Next
	EndIf
	cItem := Soma1(cItem)
	aCols[Len(aCols)][nPosItem]  := cItem
	aCols[Len(aCols)][Len(aHeader)+1] := .F.
Else
	If aCols[Len(aCols)][nPosPerc] = 0
		nCols := Len(aCols)
		cItem := aCols[nCols][nPosItem]
	Else
		If Len(aCols) > 0
			cItem := aCols[Len(aCols)][nPosItem]
		Endif
		Aadd(aCols, Array(Len(aHeader) + 1))
		cItem := Soma1(cItem)
	EndIf
	
	For nHeader := 1 To Len(aHeader)
		If Trim(aHeader[nHeader][2]) <> "CX_ALI_WT" .And. Trim(aHeader[nHeader][2]) <> "CX_REC_WT"
			aCols[Len(aCols)][nHeader] := CriaVar(aHeader[nHeader][2])
		EndIf
	Next
	
	aCols[Len(aCols)][nPosItem] := cItem
	
	// Interpreto os campos incluida possibilidade de variaveis de memoria
	If !Empty(CTJ->CTJ_DEBITO)
		aCols[Len(aCols)][nPosConta]	:= CTJ->CTJ_DEBITO
	Else
		aCols[Len(aCols)][nPosConta]	:= CTJ->CTJ_CREDIT
	Endif
	
	
	If lCusto
		If ! Empty(CTJ->CTJ_CCD)
			aCols[Len(aCols)][nPosCc]	:= CTJ->CTJ_CCD
		Else
			aCols[Len(aCols)][nPosCc]	:= CTJ->CTJ_CCC
		Endif
	EndIf
	
	If lItem
		If ! Empty(CTJ->CTJ_ITEMD)
			aCols[Len(aCols)][nPosItemCta]	:= CTJ->CTJ_ITEMD
		Else
			aCols[Len(aCols)][nPosItemCta]	:= CTJ->CTJ_ITEMC
		Endif
	EndIf
	
	If lClVl
		If ! Empty(CTJ->CTJ_CLVLDB)
			aCols[Len(aCols)][nPosClVl]	:= CTJ->CTJ_CLVLDB
		Else
			aCols[Len(aCols)][nPosClVl]	:= CTJ->CTJ_CLVLCR
		Endif
	EndIf
	aCols[Len(aCols)][nPosPerc] := CTJ->CTJ_PERCEN
	aCols[Len(aCols)][Len(aHeader) + 1] := .F.

	aEntidades := CtbEntArr()
	For nEnt := 1 to Len(aEntidades)
		For nDeb := 1 to 2
			cCpo := "CX_EC"+aEntidades[nEnt]
			cCTJ := "CTJ_EC"+aEntidades[nEnt]
			
			If nDeb == 1
				cCpo += "DB"
				cCTJ += "DB"
			Else
				cCpo += "CR"
				cCTJ += "CR"
			EndIf
			
			nPosHead := aScan(aHeader,{|x| AllTrim(x[2]) == Alltrim(cCpo) } )
			
			If nPosHead > 0
				aCols[Len(aCols)][nPosHead] := CTJ->(&(cCTJ))
			EndIf
			
		Next nDeb
	Next nEnt
	
EndIf

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} A110LegIt()
Exibe uma janela contendo a legenda do tipo de compra nos itens

@author Flavio Lopes Rasta
@since 09/03/2015
@version 12 
/*/
//-------------------------------------------------------------------
Function A110LegIt()
Local cLeg:= ""
Local aCores     := {}
Local nPosLeg	 := 0
Local aLegend	 := {}
Local cCampo	 := ""

aAdd(aCores,{"BR_BRANCO",STR0162})

DHK->(DbSelectArea("DHK"))
DHK->(DbSetOrder(2))
If DHK->(DbSeek(xFilial("DHK")))
	While !DHK->(Eof())  .And. DHK->DHK_FILIAL == xFilial("DHK")
		If DHK->DHK_ATIVO == '1' .And. !Empty(DHK->DHK_SOLCOM)
			cCampo	:= DHK->DHK_LEGEND
            aLegend := x3CboxToArray("DHK_LEGEND")
            nPosLeg := aScan(aLegend[2],{|x|x == cCampo})
            cLeg := aLegend[1][nPosLeg]
			cLeg := "BR_"+SubStr(cLeg,At('-',cLeg)+2)
			// Ajuste para selecionar o bitmap de cor para o MI
			cLeg := A110CLeg(cLeg)
			aAdd(aCores,{cLeg,DHK->DHK_DESCR})
		Endif
		DHK->(DbSkip())
	EndDo
Endif

BrwLegenda(STR0163,STR0164,aCores)

Return

//-------------------------------------------------------------------
/*/{Protheus.doc} A110AltLeg()
Função altera a legenda de acordo com tipo de compra

@author Flavio Lopes Rasta
@since 09/03/2015
@version 12
@return lRet 
/*/
//-------------------------------------------------------------------
Function A110AltLeg(lNoVerCamp)
Local nPosLegTpC	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_TIPCLEG'}) 
Local nPosTipCom	:= aScan(aHeader,{|x| AllTrim(x[2]) == 'C1_TIPCOM'})    
Local cCondTpCom	:= ""
Local cRet			:= ""
Local nPosLeg		:= 0
Local aLegend		:= {}
Local cCampo		:= ""

Default lNoVerCamp := .F.

If (!Type("l110Auto") == "L" .Or. !l110Auto)
	DHK->(DbSelectArea("DHK"))
	DHK->(DbSetOrder(2))
	If DHK->(DbSeek(xFilial("DHK")))
		While !DHK->(Eof()) .And. DHK->DHK_FILIAL == xFilial("DHK")
			If DHK->DHK_ATIVO == '1' .And. !Empty(DHK->DHK_SOLCOM)
				cCondTpCom := MTAjustExp(DHK->DHK_SOLCOM,aDlgFields)
				If MTExecExp(cCondTpCom)
					aCols[n][nPosTipCom] := DHK->DHK_CODIGO
					    cCampo	:= DHK->DHK_LEGEND
                        aLegend := x3CboxToArray("DHK_LEGEND")
                        nPosLeg := aScan(aLegend[2],{|x|x == cCampo})
                        cRet 	:= aLegend[1][nPosLeg]
					aCols[n][nPosLegTpC] := "BR_"+SubStr(cRet,At('-',cRet)+2)
					// Ajuste para selecionar o bitmap de cor para o MI
					aCols[n][nPosLegTpC] := A110CLeg(aCols[n][nPosLegTpC])
					Exit
				Else
					aCols[n][nPosTipCom] := ""
					aCols[n][nPosLegTpC] := "BR_BRANCO"
				EndIf
			Endif
			DHK->(DbSkip())
		EndDo
	Endif
Endif

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} A110CabLCh(oGet)
Função que atuliza leganda do grid baseado nos campos do cabeçalho
Executar no valid dos campos

@author Flavio Lopes Rasta
@since 09/03/2015
@version 12
@return lRet 
/*/
//-------------------------------------------------------------------
Function A110CabLCh(oGet)
Local nAnt := n 
Local nX := 1

For nX:=1 To Len(aCols)
	n := nX
	A110AltLeg(.T.)
Next nX 

n := nAnt
oGet:oBrowse:Refresh()

Return .T.

//-------------------------------------------------------------------
/*/{Protheus.doc} A110CLeg(oGet)
Função que converte o texto de bitmap da legenda quando o ambiente for MI

@author rafael.duram
@since 05/04/2016
@version 12
@return lRet 
/*/
//-------------------------------------------------------------------
Function A110CLeg(cBitmap)
Local cTexto := cBitmap

cTexto := STRTRAN(cTexto,"AMARILLO","AMARELO")
cTexto := STRTRAN(cTexto,"PLOMO","CINZA")
cTexto := STRTRAN(cTexto,"NARANJJA","LARANJA")
cTexto := STRTRAN(cTexto,"MARRON","MARROM")
cTexto := STRTRAN(cTexto,"AMARILLO","AMARELO")
cTexto := STRTRAN(cTexto,"ROJO","VERMELHO")
cTexto := STRTRAN(cTexto,"ROSADO","PINK")
cTexto := STRTRAN(cTexto,"NEGRO","PRETO")
cTexto := STRTRAN(cTexto,"YELLOW","AMARELO")
cTexto := STRTRAN(cTexto,"BLUE","AZUL")
cTexto := STRTRAN(cTexto,"GRAY","CINZA")
cTexto := STRTRAN(cTexto,"ORANGE","LARANJA")
cTexto := STRTRAN(cTexto,"BROWN","MARROM")
cTexto := STRTRAN(cTexto,"GREEN","VERDE")
cTexto := STRTRAN(cTexto,"RED","VERMELHO")
cTexto := STRTRAN(cTexto,"BLACK","PRETO")

Return cTexto

/*
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³A110Resid ³ Autor ³ TOTVS					³ Data ³ 10/01/18 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Funcao utilizada para verificar se existem itens eliminados³±±
±±³          ³ como residuo para exibir o controle de aprovacao SCR       ³±±
±±³          ³ deletados quando MV_EXAPROV = .T.						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ MATA110                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function A110Resid()

Local aArea		:= GetArea()
Local nPosItem	:= aScan(aHeader,{|x| AllTrim(x[2]) == "C1_ITEM"})
Local nX		:= 0
Local lRet		:= .F.
Local lExAprov	:= SuperGetMV("MV_EXAPROV",.F.,.F.)
Local cNumSC	:= SC1->C1_NUM

If lExAprov			// So executa se MV_EXAPROV = .T.
	For nX := 1 To Len(aCols)
		dbSelectArea("SC1")
		dbSetOrder(1)
		If MsSeek(xFilial("SC1")+cNumSC+aCols[nX][nPosItem])
			If SC1->C1_RESIDUO == "S"
				lRet := .T.
				Exit
			EndIf
		EndIf
	Next nX
EndIf

RestArea(aArea)

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Função    ³A110Rateio()	 ³ Autor ³Leonardo Magalhães	 ³ Data ³09/04/18  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descrição ³ Função chamada pelo X3_VALID do campo C1_RATEIO para que não    ³±±
±±³			 ³ seja possível setar C1_RATEIO = 1 (Sim) sem informar as entida- ³±±
±±³			 ³ des do rateio da solicitação de compra (SCX) 				   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³                                                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ SIGACOM - X3_VALID                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/ 

Function A110Rateio()

Local nPosItem := 0
Local nPosRat  := 0
Local nX 	   := 0

If Type("aColsSCX") == "U"
	 aColsSCX := {}
Endif

If Type("aHeadSCX") == "U"
	 aHeadSCX := {}
Endif

If Type("l110Auto") == "L" .And. !l110Auto 
	If M->C1_RATEIO =="1"
		A110RatCC(aHeadSCX,aColsSCX, INCLUI .Or. ALTERA)
		nPosItem := aScan(aHeader,{|x| Trim(x[2])=="C1_ITEM"})
        nPosRat := aScan(aHeader,{|x| Trim(x[2])=="C1_RATEIO"})
        For nX := 1 To Len(aColsSCX)
        	If aColsSCX[nX][1] == aCols[N][nPosItem] .And. Len(aColsSCX[nX][2]) == 0
        		aCols[N][nPosRat] := "2"
        		M->C1_RATEIO := "2"
        	EndIf 
        Next nX 		
	EndIf
EndIf

Return(.T.) 

//-------------------------------------------------------------------
/*/{Protheus.doc} A110INTMU()
Função para chamar a integração com mensagem unica.

@author rodrigo m pontes
@since 21/09/18
@version 12
@return lRet 
/*/
//-------------------------------------------------------------------

Function A110INTMU()

Local aRetInt	:= {}
Local lRetInt	:= .T.

aRetInt := FwIntegDef('MATA110')
If Valtype(aRetInt) == "A"
	If Len(aRetInt) == 2
		If !aRetInt[1]
			If !Empty(aRetInt[2])
				Aviso("Atenção",aRetInt[2],{"Ok"},2)
				lGravaOk := .F.
				DisarmTransaction()
			Else
				Aviso("Atenção","Verificar monitor eai",{"Ok"},2)
				lGravaOk := .F.
				DisarmTransaction()
			Endif
			lRetInt := .F.
		Endif
	Endif
Endif

Return lRetInt

/*/{Protheus.doc} ComMetric
	Média de quantidade de itens utilizados via <FWCustomMetrics>
	Total solicitações com alçadas via <FWCustomMetrics>

@param	cOper	Operação (Inclusão)
@param	nItens	Quantidade de itens da SC
@param	nOpc	1-Media de itens / 2 - SC com alçadas
@param	cAlcada	Tipo de alçada 
				- Ambas - APROVSC e APRSCEC ativo
				- Entidade - APROVSC desativo e APRSCEC ativo
				- Simples - APROVSC ativo e APRSCEC desativo

@author rd.santos
@since 25/05/2021
@return Nil, indefinido
/*/
Static Function ComMetric(cOper,nItens,nOpc,cAlcada)
Local cIdMetric		:= ""
Local cRotina		:= "mata110"
Local cSubRoutine	:= ""
Local lContinua		:= (FWLibVersion() >= "20210517") .And. FindClass('FWCustomMetrics')

If lContinua 
	If nOpc == 1
		cIdMetric		:= "compras-protheus_media-itens-solicitacao-compras_average"
		cSubRoutine		:= cRotina+cOper+"-media"

		FWCustomMetrics():setAverageMetric(cSubRoutine, cIdMetric, nItens,/*dDateSend*/, /*nLapTime*/,cRotina)
	Elseif nOpc == 2
		cIdMetric		:= "compras-protheus_total-de-solicitacoes-com-mv_aprovsc_total"
		cSubRoutine		:= cRotina+cOper+"-total-"+cAlcada

		FWCustomMetrics():setSumMetric(cSubRoutine, cIdMetric, 1,/*dDateSend*/, /*nLapTime*/,cRotina)
	Endif 
Endif

Return
